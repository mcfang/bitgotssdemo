"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressInitializationBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const iface_1 = require("./iface");
const iface_utils_1 = require("./iface_utils");
const transactionBuilder_1 = require("./transactionBuilder");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class AddressInitializationBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._index = 0;
    }
    /** @inheritDoc */
    buildTransaction() {
        if (this._delegate) {
            return this.buildAddProxyTransaction();
        }
        else {
            return this.buildAnonymousProxyTransaction();
        }
    }
    /**
     * Register a proxy account for the sender that is able to make calls on its behalf.
     *
     * @returns {UnsignedTransaction} an unsigned Dot transaction
     *
     * @see https://polkadot.js.org/docs/substrate/extrinsics/#proxy
     */
    buildAddProxyTransaction() {
        const baseTxInfo = this.createBaseTxInfo();
        return txwrapper_polkadot_1.methods.proxy.addProxy({
            delegate: this._delegate,
            proxyType: this._proxyType,
            delay: this._delay,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    }
    /**
     * Spawn a receive address for the sender
     *
     * @return {UnsignedTransaction} an unsigned Dot transaction
     */
    buildAnonymousProxyTransaction() {
        const baseTxInfo = this.createBaseTxInfo();
        return utils_1.default.pureProxy({
            proxyType: this._proxyType,
            index: this._index,
            delay: parseInt(this._delay, 10),
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.AddressInitialization;
    }
    /**
     * The account to delegate auth to.
     *
     * @param {BaseAddress} owner
     * @returns {AddressInitializationBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#why-use-a-proxy
     */
    owner(owner) {
        this.validateAddress({ address: owner.address });
        this._delegate = owner.address;
        return this;
    }
    /**
     * Used for disambiguation if multiple calls are made in the same transaction
     * Use 0 as a default
     *
     * @param {number} index
     *
     * @returns {AddressInitializationBuilder} This transfer builder.
     */
    index(index) {
        this.validateValue(new bignumber_js_1.default(index));
        this._index = index;
        return this;
    }
    /**
     * The proxy type to add.
     *
     * @param {proxyType} proxyType
     * @returns {AddressInitializationBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#proxy-types
     */
    type(proxyType) {
        this._proxyType = proxyType;
        return this;
    }
    /**
     * The number of blocks that an announcement must be in place for.
     * before the corresponding call may be dispatched.
     * If zero, then no announcement is needed.
     * TODO: move to the validity window method once it has been standardized
     *
     * @param {string} delay
     * @returns {AddressInitializationBuilder} This transfer builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#time-delayed-proxies
     */
    delay(delay) {
        this.validateValue(new bignumber_js_1.default(parseInt(delay, 10)));
        this._delay = delay;
        return this;
    }
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn) {
        var _a, _b, _c;
        let validationResult;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.AddProxy) {
            const txMethod = decodedTxn.method.args;
            validationResult = this.validateAddProxyFields(iface_utils_1.getDelegateAddress(txMethod), txMethod.proxyType, txMethod.delay);
        }
        else if (((_b = decodedTxn.method) === null || _b === void 0 ? void 0 : _b.name) === iface_1.MethodNames.Anonymous || ((_c = decodedTxn.method) === null || _c === void 0 ? void 0 : _c.name) === iface_1.MethodNames.PureProxy) {
            const txMethod = decodedTxn.method.args;
            validationResult = this.validateAnonymousProxyFields(parseInt(txMethod.index, 10), txMethod.proxyType, txMethod.delay);
        }
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        var _a, _b, _c, _d;
        const tx = super.fromImplementation(rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.AddProxy) {
            const txMethod = this._method.args;
            this.owner({ address: iface_utils_1.getDelegateAddress(txMethod) });
            this.type(txMethod.proxyType);
            this.delay(new bignumber_js_1.default(txMethod.delay).toString());
        }
        else if (((_b = this._method) === null || _b === void 0 ? void 0 : _b.name) === iface_1.MethodNames.Anonymous || ((_c = this._method) === null || _c === void 0 ? void 0 : _c.name) === iface_1.MethodNames.PureProxy) {
            const txMethod = this._method.args;
            this.index(new bignumber_js_1.default(txMethod.index).toNumber());
            this.type(txMethod.proxyType);
            this.delay(new bignumber_js_1.default(txMethod.delay).toString());
        }
        else {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${(_d = this._method) === null || _d === void 0 ? void 0 : _d.name}. Expected ${iface_1.MethodNames.AddProxy} or ${iface_1.MethodNames.Anonymous}`);
        }
        return tx;
    }
    /** @inheritdoc */
    validateTransaction(_) {
        super.validateTransaction(_);
        this.validateFields();
    }
    validateFields() {
        let validationResult;
        if (this._delegate) {
            validationResult = this.validateAddProxyFields(this._delegate, this._proxyType, this._delay);
        }
        else {
            validationResult = this.validateAnonymousProxyFields(this._index, this._proxyType, this._delay);
        }
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`AddressInitialization Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    validateAddProxyFields(delegate, proxyType, delay) {
        return txnSchema_1.AddressInitializationSchema.validate({
            delegate,
            proxyType,
            delay,
        });
    }
    validateAnonymousProxyFields(index, proxyType, delay) {
        return txnSchema_1.AnonymousAddressInitializationSchema.validate({
            proxyType,
            index,
            delay,
        });
    }
}
exports.AddressInitializationBuilder = AddressInitializationBuilder;
//# sourceMappingURL=data:application/json;base64,