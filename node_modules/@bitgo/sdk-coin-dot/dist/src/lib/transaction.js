"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = exports.STAKING_DESTINATION = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const keyring_1 = __importStar(require("@polkadot/keyring"));
const util_1 = require("@polkadot/util");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const keyPair_1 = require("./keyPair");
const iface_1 = require("./iface");
const iface_utils_1 = require("./iface_utils");
const utils_1 = __importDefault(require("./utils"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
/**
 * Use a dummy address as the destination of a bond or bondExtra because our inputs and outputs model
 * doesn't seem to handle the concept of locking funds within a wallet as a method of transferring coins.
 */
exports.STAKING_DESTINATION = keyring_1.encodeAddress('0x0000000000000000000000000000000000000000000000000000000000000000');
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
    }
    /** @inheritdoc */
    canSign({ key }) {
        const kp = new keyPair_1.KeyPair({ prv: key });
        const addr = kp.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
        return addr === this._sender;
    }
    /**
     * Sign a polkadot transaction and update the transaction hex
     *
     * @param {KeyPair} keyPair - ed signature
     */
    sign(keyPair) {
        if (!this._dotTransaction) {
            throw new sdk_core_1.InvalidTransactionError('No transaction data to sign');
        }
        const { prv, pub } = keyPair.getKeys();
        if (!prv) {
            throw new sdk_core_1.SigningError('Missing private key');
        }
        const signingPayload = txwrapper_polkadot_1.construct.signingPayload(this._dotTransaction, {
            registry: this._registry,
        });
        // Sign a payload. This operation should be performed on an offline device.
        const keyring = new keyring_1.default({ type: 'ed25519' });
        const secretKey = new Uint8Array(Buffer.from(prv, 'hex'));
        const publicKey = new Uint8Array(Buffer.from(pub, 'hex'));
        const signingKeyPair = keyring.addFromPair({ secretKey, publicKey });
        const txHex = utils_1.default.createSignedTx(signingKeyPair, signingPayload, this._dotTransaction, {
            metadataRpc: this._dotTransaction.metadataRpc,
            registry: this._registry,
        });
        // get signature from signed txHex generated above
        this._signatures = [utils_1.default.recoverSignatureFromRawTx(txHex, { registry: this._registry })];
        this._signedTransaction = txHex;
    }
    /**
     * Adds the signature to the DOT Transaction
     * @param {string} signature
     */
    addSignature(signature) {
        this._signedTransaction = utils_1.default.serializeSignedTransaction(this._dotTransaction, signature, this._dotTransaction.metadataRpc, this._registry);
    }
    /**
     * Returns a serialized representation of this transaction with a fake signature attached which
     * can be used to estimate transaction fees.
     */
    fakeSign() {
        return utils_1.default.serializeSignedTransaction(this._dotTransaction, Transaction.FAKE_SIGNATURE, this._dotTransaction.metadataRpc, this._registry);
    }
    registry(registry) {
        this._registry = registry;
    }
    chainName(chainName) {
        this._chainName = chainName;
    }
    sender(sender) {
        this._sender = sender;
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._dotTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        if (this._signedTransaction && this._signedTransaction.length > 0) {
            return this._signedTransaction;
        }
        else {
            return txwrapper_polkadot_1.construct.signingPayload(this._dotTransaction, {
                registry: this._registry,
            });
        }
    }
    transactionSize() {
        return this.toBroadcastFormat().length / 2;
    }
    /** @inheritdoc */
    toJson() {
        var _a;
        if (!this._dotTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        const decodedTx = txwrapper_polkadot_1.decode(this._dotTransaction, {
            metadataRpc: this._dotTransaction.metadataRpc,
            registry: this._registry,
            isImmortalEra: utils_1.default.isZeroHex(this._dotTransaction.era),
        });
        const result = {
            id: txwrapper_polkadot_1.construct.txHash(this.toBroadcastFormat()),
            sender: decodedTx.address,
            referenceBlock: decodedTx.blockHash,
            blockNumber: decodedTx.blockNumber,
            genesisHash: decodedTx.genesisHash,
            nonce: decodedTx.nonce,
            specVersion: decodedTx.specVersion,
            transactionVersion: decodedTx.transactionVersion,
            eraPeriod: decodedTx.eraPeriod,
            chainName: this._chainName,
            tip: decodedTx.tip,
        };
        if (this.type === sdk_core_1.TransactionType.Send) {
            const txMethod = decodedTx.method.args;
            if (utils_1.default.isProxyTransfer(txMethod)) {
                const keypairReal = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(iface_utils_1.getAddress(txMethod))).toString('hex'),
                });
                result.owner = keypairReal.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
                result.forceProxyType = txMethod.forceProxyType;
                const decodedCall = utils_1.default.decodeCallMethod(this._dotTransaction, {
                    metadataRpc: this._dotTransaction.metadataRpc,
                    registry: this._registry,
                });
                const keypairDest = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(decodedCall.dest.id)).toString('hex'),
                });
                result.to = keypairDest.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
                result.amount = decodedCall.value;
            }
            else if (utils_1.default.isTransfer(txMethod)) {
                const keypairDest = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(txMethod.dest.id)).toString('hex'),
                });
                result.to = keypairDest.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
                result.amount = txMethod.value;
            }
            else if (utils_1.default.isTransferAll(txMethod)) {
                const keypairDest = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(txMethod.dest.id)).toString('hex'),
                });
                result.to = keypairDest.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
                result.keepAlive = txMethod.keepAlive;
            }
            else {
                throw new sdk_core_1.ParseTransactionError(`Serializing unknown Transfer type parameters`);
            }
        }
        if (this.type === sdk_core_1.TransactionType.StakingActivate) {
            const txMethod = decodedTx.method.args;
            if (utils_1.default.isBond(txMethod)) {
                const keypair = new keyPair_1.KeyPair({
                    pub: Buffer.from(keyring_1.decodeAddress(this._sender, false, this._registry.chainSS58)).toString('hex'),
                });
                result.controller = keypair.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
                result.amount = txMethod.value;
                const payee = txMethod.payee;
                if (payee.account) {
                    const keypair = new keyPair_1.KeyPair({
                        pub: Buffer.from(keyring_1.decodeAddress(payee.account, false, this._registry.chainSS58)).toString('hex'),
                    });
                    result.payee = keypair.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
                }
                else {
                    const payeeType = utils_1.default.capitalizeFirstLetter(Object.keys(payee)[0]);
                    result.payee = payeeType;
                }
            }
            else if (utils_1.default.isBondExtra(decodedTx.method.args)) {
                result.amount = decodedTx.method.args.maxAdditional;
            }
        }
        if (this.type === sdk_core_1.TransactionType.AddressInitialization) {
            let txMethod;
            if (((_a = decodedTx.method) === null || _a === void 0 ? void 0 : _a.args).delegate) {
                txMethod = decodedTx.method.args;
                const delegateAddress = iface_utils_1.getDelegateAddress(txMethod);
                const decodedAddress = keyring_1.decodeAddress(delegateAddress, false, this._registry.chainSS58);
                const keypair = new keyPair_1.KeyPair({ pub: Buffer.from(decodedAddress).toString('hex') });
                result.owner = keypair.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
            }
            else {
                txMethod = decodedTx.method.args;
                result.index = txMethod.index;
            }
            result.method = this._dotTransaction.method;
            result.proxyType = txMethod.proxyType;
            result.delay = txMethod.delay;
        }
        if (this.type === sdk_core_1.TransactionType.StakingUnlock) {
            const txMethod = decodedTx.method.args;
            result.amount = txMethod.value;
        }
        if (this.type === sdk_core_1.TransactionType.StakingWithdraw) {
            const txMethod = decodedTx.method.args;
            result.numSlashingSpans = txMethod.numSlashingSpans;
        }
        if (this.type === sdk_core_1.TransactionType.StakingClaim) {
            const txMethod = decodedTx.method.args;
            result.validatorStash = txMethod.validatorStash;
            result.claimEra = txMethod.era;
        }
        if (this.type === sdk_core_1.TransactionType.Batch) {
            const txMethod = decodedTx.method.args;
            result.batchCalls = txMethod.calls;
        }
        return result;
    }
    explainTransferTransaction(json, explanationResult) {
        var _a, _b;
        explanationResult.displayOrder.push('owner', 'forceProxyType');
        return {
            ...explanationResult,
            outputs: [
                {
                    address: ((_a = json.to) === null || _a === void 0 ? void 0 : _a.toString()) || '',
                    amount: ((_b = json.amount) === null || _b === void 0 ? void 0 : _b.toString()) || '',
                },
            ],
            owner: json.owner,
            forceProxyType: json.forceProxyType,
        };
    }
    explainStakingActivateTransaction(json, explanationResult) {
        var _a;
        explanationResult.displayOrder.push('payee', 'forceProxyType');
        return {
            ...explanationResult,
            outputs: [
                {
                    address: ((_a = json.controller) === null || _a === void 0 ? void 0 : _a.toString()) || '',
                    amount: json.amount || '',
                },
            ],
            payee: json.payee,
            forceProxyType: json.forceProxyType,
        };
    }
    explainAddressInitializationTransaction(json, explanationResult) {
        explanationResult.displayOrder.push('owner', 'proxyType', 'delay');
        return {
            ...explanationResult,
            owner: json.owner,
            proxyType: json.proxyType,
            delay: json.delay,
        };
    }
    explainStakingUnlockTransaction(json, explanationResult) {
        return {
            ...explanationResult,
            outputs: [
                {
                    address: json.sender.toString(),
                    amount: json.amount || '',
                },
            ],
        };
    }
    /** @inheritdoc */
    explainTransaction() {
        var _a, _b;
        const result = this.toJson();
        const displayOrder = ['outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        const outputs = [];
        const explanationResult = {
            // txhash used to identify the transactions
            id: result.id,
            displayOrder,
            outputAmount: ((_a = result.amount) === null || _a === void 0 ? void 0 : _a.toString()) || '0',
            changeAmount: '0',
            changeOutputs: [],
            outputs,
            fee: {
                fee: ((_b = result.tip) === null || _b === void 0 ? void 0 : _b.toString()) || '',
                type: 'tip',
            },
            type: this.type,
        };
        switch (this.type) {
            case sdk_core_1.TransactionType.Send:
                return this.explainTransferTransaction(result, explanationResult);
            case sdk_core_1.TransactionType.StakingActivate:
                return this.explainStakingActivateTransaction(result, explanationResult);
            case sdk_core_1.TransactionType.AddressInitialization:
                return this.explainAddressInitializationTransaction(result, explanationResult);
            case sdk_core_1.TransactionType.StakingUnlock:
                return this.explainStakingUnlockTransaction(result, explanationResult);
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
    }
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs() {
        if (!this._dotTransaction) {
            return;
        }
        const decodedTx = txwrapper_polkadot_1.decode(this._dotTransaction, {
            metadataRpc: this._dotTransaction.metadataRpc,
            registry: this._registry,
            isImmortalEra: utils_1.default.isZeroHex(this._dotTransaction.era),
        });
        if (this.type === sdk_core_1.TransactionType.Send) {
            this.decodeInputsAndOutputsForSend(decodedTx);
        }
        else if (this.type === sdk_core_1.TransactionType.Batch) {
            this.decodeInputsAndOutputsForBatch(decodedTx);
        }
        else if (this.type === sdk_core_1.TransactionType.StakingActivate) {
            this.decodeInputsAndOutputsForBond(decodedTx);
        }
        else if (this.type === sdk_core_1.TransactionType.StakingUnlock) {
            this.decodeInputsAndOutputsForUnbond(decodedTx);
        }
        else if (this.type === sdk_core_1.TransactionType.StakingWithdraw) {
            this.decodeInputsAndOutputsForWithdrawUnbond(decodedTx);
        }
    }
    decodeInputsAndOutputsForSend(decodedTx) {
        const txMethod = decodedTx.method.args;
        let to;
        let value;
        let from;
        if (utils_1.default.isProxyTransfer(txMethod)) {
            const decodedCall = utils_1.default.decodeCallMethod(this._dotTransaction, {
                metadataRpc: this._dotTransaction.metadataRpc,
                registry: this._registry,
            });
            const keypairDest = new keyPair_1.KeyPair({
                pub: Buffer.from(keyring_1.decodeAddress(decodedCall.dest.id)).toString('hex'),
            });
            const keypairFrom = new keyPair_1.KeyPair({
                pub: Buffer.from(keyring_1.decodeAddress(iface_utils_1.getAddress(txMethod))).toString('hex'),
            });
            to = keypairDest.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
            value = `${decodedCall.value}`;
            from = keypairFrom.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
        }
        else if (utils_1.default.isTransferAll(txMethod)) {
            const keypairDest = new keyPair_1.KeyPair({
                pub: Buffer.from(keyring_1.decodeAddress(txMethod.dest.id)).toString('hex'),
            });
            to = keypairDest.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
            value = '0'; // DOT transferAll's do not deserialize amounts
            from = decodedTx.address;
        }
        else if (utils_1.default.isTransfer(txMethod)) {
            const keypairDest = new keyPair_1.KeyPair({
                pub: Buffer.from(keyring_1.decodeAddress(txMethod.dest.id)).toString('hex'),
            });
            to = keypairDest.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name));
            value = txMethod.value;
            from = decodedTx.address;
        }
        else {
            throw new sdk_core_1.ParseTransactionError(`Loading inputs of unknown Transfer type parameters`);
        }
        this._outputs = [
            {
                address: to,
                value,
                coin: this._coinConfig.name,
            },
        ];
        this._inputs = [
            {
                address: from,
                value,
                coin: this._coinConfig.name,
            },
        ];
    }
    decodeInputsAndOutputsForBatch(decodedTx) {
        const sender = decodedTx.address;
        this._inputs = [];
        this._outputs = [];
        const txMethod = decodedTx.method.args;
        if (utils_1.default.isStakingBatch(txMethod)) {
            if (!txMethod.calls) {
                throw new sdk_core_1.InvalidTransactionError('failed to decode calls from batch transaction');
            }
            const bondMethod = txMethod.calls[0].callIndex;
            const decodedBondCall = this._registry.findMetaCall(sdk_core_1.toUint8Array(utils_1.default.stripHexPrefix(bondMethod)));
            if (decodedBondCall.section !== iface_1.SectionNames.Staking || decodedBondCall.method !== iface_1.MethodNames.Bond) {
                throw new sdk_core_1.InvalidTransactionError('Invalid batch transaction, only staking batch calls are supported, expected first call to be bond.');
            }
            const addProxyMethod = txMethod.calls[1].callIndex;
            const decodedAddProxyCall = this._registry.findMetaCall(sdk_core_1.toUint8Array(utils_1.default.stripHexPrefix(addProxyMethod)));
            if (decodedAddProxyCall.section !== iface_1.SectionNames.Proxy || decodedAddProxyCall.method !== iface_1.MethodNames.AddProxy) {
                throw new sdk_core_1.InvalidTransactionError('Invalid batch transaction, only staking batch calls are supported, expected second call to be addProxy.');
            }
            const stakeArgs = txMethod.calls[0].args;
            const addProxyArgs = txMethod.calls[1].args;
            const bondValue = `${stakeArgs.value}`;
            const proxyAddress = iface_utils_1.getDelegateAddress(addProxyArgs);
            this._inputs.push({
                address: sender,
                value: bondValue,
                coin: this._coinConfig.name,
            });
            this._outputs.push({
                address: exports.STAKING_DESTINATION,
                value: bondValue,
                coin: this._coinConfig.name,
            });
            const addProxyCost = this.getAddProxyCost().toString(10);
            this._inputs.push({
                address: sender,
                value: addProxyCost,
                coin: this._coinConfig.name,
            });
            this._outputs.push({
                address: proxyAddress,
                value: addProxyCost,
                coin: this._coinConfig.name,
            });
        }
        else if (utils_1.default.isUnstakingBatch(txMethod)) {
            if (!txMethod.calls) {
                throw new sdk_core_1.InvalidTransactionError('failed to decode calls from batch transaction');
            }
            const removeProxyMethod = txMethod.calls[0].callIndex;
            const decodedRemoveProxyCall = this._registry.findMetaCall(sdk_core_1.toUint8Array(utils_1.default.stripHexPrefix(removeProxyMethod)));
            if (decodedRemoveProxyCall.section !== iface_1.SectionNames.Proxy ||
                decodedRemoveProxyCall.method !== iface_1.MethodNames.RemoveProxy) {
                throw new sdk_core_1.InvalidTransactionError('Invalid batch transaction, only staking batch calls are supported, expected first call to be removeProxy.');
            }
            const chillMethod = txMethod.calls[1].callIndex;
            const decodedChillCall = this._registry.findMetaCall(sdk_core_1.toUint8Array(utils_1.default.stripHexPrefix(chillMethod)));
            if (decodedChillCall.section !== iface_1.SectionNames.Staking || decodedChillCall.method !== iface_1.MethodNames.Chill) {
                throw new sdk_core_1.InvalidTransactionError('Invalid batch transaction, only staking batch calls are supported, expected second call to be chill.');
            }
            const unstakeMethod = txMethod.calls[2].callIndex;
            const decodedUnstakeCall = this._registry.findMetaCall(sdk_core_1.toUint8Array(utils_1.default.stripHexPrefix(unstakeMethod)));
            if (decodedUnstakeCall.section !== iface_1.SectionNames.Staking || decodedUnstakeCall.method !== iface_1.MethodNames.Unbond) {
                throw new sdk_core_1.InvalidTransactionError('Invalid batch transaction, only staking batch calls are supported, expected third call to be unbond.');
            }
            const removeProxyArgs = txMethod.calls[0].args;
            const proxyAddress = iface_utils_1.getDelegateAddress(removeProxyArgs);
            const removeProxyCost = this.getRemoveProxyCost().toString(10);
            this._inputs.push({
                address: proxyAddress,
                value: removeProxyCost,
                coin: this._coinConfig.name,
            });
            this._outputs.push({
                address: sender,
                value: removeProxyCost,
                coin: this._coinConfig.name,
            });
        }
    }
    getRemoveProxyCost() {
        return this.getAddProxyCost();
    }
    getAddProxyCost() {
        const proxyPallet = this._registry.metadata.pallets.find((p) => p.name.toString().toLowerCase() === iface_1.SectionNames.Proxy);
        if (proxyPallet) {
            const proxyDepositBase = this.getConstant('ProxyDepositBase', proxyPallet.constants);
            const proxyDepositFactor = this.getConstant('ProxyDepositFactor', proxyPallet.constants);
            return proxyDepositBase.plus(proxyDepositFactor);
        }
        else {
            const palletNames = this._registry.metadata.pallets.map((p) => p.name.toString().toLowerCase());
            throw new Error(`Could not find ${iface_1.SectionNames.Proxy} pallet in [${palletNames}]`);
        }
    }
    getConstant(name, constants) {
        const constant = constants.find((c) => c.name.toString() === name);
        if (constant === undefined) {
            const constantNames = constants.map((p) => p.name.toString());
            throw new Error(`Could not find constant ${name} in [${constantNames}]`);
        }
        else {
            // Convert from Little-Endian to Big-Endian
            const valueBe = Buffer.from(constant.value.toU8a(true).reverse()).toString('hex');
            return bignumber_js_1.default(valueBe, 16);
        }
    }
    decodeInputsAndOutputsForBond(decodedTx) {
        const sender = decodedTx.address;
        this._inputs = [];
        this._outputs = [];
        const txMethod = decodedTx.method.args;
        if (decodedTx.method.pallet === iface_1.SectionNames.Staking) {
            let bondValue = '0';
            if (decodedTx.method.name === iface_1.MethodNames.Bond && utils_1.default.isBond(txMethod)) {
                bondValue = txMethod.value;
            }
            else if (decodedTx.method.name === iface_1.MethodNames.BondExtra && utils_1.default.isBondExtra(txMethod)) {
                bondValue = txMethod.maxAdditional;
            }
            else {
                throw new sdk_core_1.ParseTransactionError(`Loading inputs of unknown StakingActivate type parameters`);
            }
            this._inputs.push({
                address: sender,
                value: bondValue,
                coin: this._coinConfig.name,
            });
            this._outputs.push({
                address: exports.STAKING_DESTINATION,
                value: bondValue,
                coin: this._coinConfig.name,
            });
        }
    }
    decodeInputsAndOutputsForUnbond(decodedTx) {
        this._inputs = [];
        this._outputs = [];
    }
    decodeInputsAndOutputsForWithdrawUnbond(decodedTx) {
        this._inputs = [];
        this._outputs = [];
    }
    /**
     * Constructs a signed payload using construct.signTx
     * This method will be called during the build step if a TSS signature
     * is added and will set the signTransaction which is the txHex that will be broadcasted
     * As well as add the signature used to sign to the signature array in hex format
     *
     * @param {Buffer} signature The signature to be added to a dot transaction
     */
    constructSignedPayload(signature) {
        // 0x00 means its an ED25519 signature
        const edSignature = `0x00${signature.toString('hex')}`;
        try {
            this._signedTransaction = txwrapper_polkadot_1.construct.signedTx(this._dotTransaction, edSignature, {
                registry: this._registry,
                metadataRpc: this._dotTransaction.metadataRpc,
            });
        }
        catch (e) {
            throw new sdk_core_1.SigningError(`Unable to sign dot transaction with signature ${edSignature} ` + e);
        }
        this._signatures = [signature.toString('hex')];
    }
    setTransaction(tx) {
        this._dotTransaction = tx;
    }
    /** @inheritdoc **/
    get signablePayload() {
        const extrinsicPayload = this._registry.createType('ExtrinsicPayload', this._dotTransaction, {
            version: this._dotTransaction.version,
        });
        return util_1.u8aToBuffer(extrinsicPayload.toU8a({ method: true }));
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    transactionType(transactionType) {
        this._type = transactionType;
    }
}
exports.Transaction = Transaction;
Transaction.FAKE_SIGNATURE = `0x${Buffer.from(new Uint8Array(256).fill(1)).toString('hex')}`;
//# sourceMappingURL=data:application/json;base64,