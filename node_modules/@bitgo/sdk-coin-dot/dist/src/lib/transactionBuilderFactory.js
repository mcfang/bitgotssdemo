"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const addressInitializationBuilder_1 = require("./addressInitializationBuilder");
const iface_1 = require("./iface");
const proxyBuilder_1 = require("./proxyBuilder");
const singletonRegistry_1 = require("./singletonRegistry");
const stakingBuilder_1 = require("./stakingBuilder");
const transferBuilder_1 = require("./transferBuilder");
const unnominateBuilder_1 = require("./unnominateBuilder");
const utils_1 = __importDefault(require("./utils"));
const _1 = require(".");
class TransactionBuilderFactory extends sdk_core_1.BaseTransactionBuilderFactory {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._material = utils_1.default.getMaterial(_coinConfig);
    }
    getTransferBuilder() {
        return new transferBuilder_1.TransferBuilder(this._coinConfig).material(this._material);
    }
    getStakingBuilder() {
        return new stakingBuilder_1.StakingBuilder(this._coinConfig).material(this._material);
    }
    getAddressInitializationBuilder() {
        return new addressInitializationBuilder_1.AddressInitializationBuilder(this._coinConfig).material(this._material);
    }
    getRemoveProxyBuilder() {
        return new proxyBuilder_1.RemoveProxyBuilder(this._coinConfig).material(this._material);
    }
    getBatchTransactionBuilder() {
        return new _1.BatchTransactionBuilder(this._coinConfig).material(this._material);
    }
    getWalletInitializationBuilder() {
        throw new sdk_core_1.NotImplementedError(`walletInitialization for ${this._coinConfig.name} not implemented`);
    }
    getUnstakeBuilder() {
        return new _1.UnstakeBuilder(this._coinConfig).material(this._material);
    }
    getWithdrawUnstakedBuilder() {
        return new _1.WithdrawUnstakedBuilder(this._coinConfig).material(this._material);
    }
    getClaimBuilder() {
        return new _1.ClaimBuilder(this._coinConfig).material(this._material);
    }
    getUnnominateBuilder() {
        return new unnominateBuilder_1.UnnominateBuilder(this._coinConfig);
    }
    from(rawTxn) {
        const builder = this.getBuilder(rawTxn);
        builder.from(rawTxn);
        return builder;
    }
    material(material) {
        this._material = material;
        return this;
    }
    getBuilder(rawTxn) {
        var _a;
        const registry = singletonRegistry_1.SingletonRegistry.getInstance(this._material);
        const decodedTxn = txwrapper_polkadot_1.decode(rawTxn, {
            metadataRpc: this._material.metadata,
            registry: registry,
        });
        const methodName = (_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name;
        if (methodName === iface_1.MethodNames.TransferKeepAlive ||
            methodName === iface_1.MethodNames.TransferAll ||
            methodName === iface_1.MethodNames.Proxy) {
            return this.getTransferBuilder();
        }
        else if (methodName === iface_1.MethodNames.Bond || methodName === iface_1.MethodNames.BondExtra) {
            return this.getStakingBuilder();
        }
        else if (methodName === iface_1.MethodNames.AddProxy) {
            return this.getAddressInitializationBuilder();
        }
        else if (methodName === iface_1.MethodNames.RemoveProxy) {
            return this.getRemoveProxyBuilder();
        }
        else if (methodName === iface_1.MethodNames.Unbond) {
            return this.getUnstakeBuilder();
        }
        else if (methodName === iface_1.MethodNames.Chill) {
            return this.getUnnominateBuilder();
        }
        else if (methodName === iface_1.MethodNames.WithdrawUnbonded) {
            return this.getWithdrawUnstakedBuilder();
        }
        else if (methodName === iface_1.MethodNames.PayoutStakers) {
            return this.getClaimBuilder();
        }
        else if (methodName === iface_1.MethodNames.Batch || methodName === iface_1.MethodNames.BatchAll) {
            return this.getBatchTransactionBuilder();
        }
        else {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
    }
}
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4Q0FBbUc7QUFFbkcsc0VBQXVEO0FBQ3ZELGlGQUE4RTtBQUM5RSxtQ0FBZ0Q7QUFDaEQsaURBQW9EO0FBQ3BELDJEQUF3RDtBQUN4RCxxREFBa0Q7QUFDbEQsdURBQW9EO0FBRXBELDJEQUF3RDtBQUN4RCxvREFBNEI7QUFDNUIsd0JBQW1HO0FBRW5HLE1BQWEseUJBQTBCLFNBQVEsd0NBQTZCO0lBRzFFLFlBQVksV0FBaUM7UUFDM0MsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsZUFBSyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxpQ0FBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxpQkFBaUI7UUFDZixPQUFPLElBQUksK0JBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsK0JBQStCO1FBQzdCLE9BQU8sSUFBSSwyREFBNEIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQscUJBQXFCO1FBQ25CLE9BQU8sSUFBSSxpQ0FBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsMEJBQTBC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QUFNLElBQUksVUFBVSxLQUFLLG1CQUFXLENBQUMsYUFBYSxFQUFFO1lBQ25ELE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQy9CO2FBQU0sSUFBSSxVQUFVLEtBQUssbUJBQVcsQ0FBQyxLQUFLLElBQUksVUFBVSxLQUFLLG1CQUFXLENBQUMsUUFBUSxFQUFFO1lBQ2xGLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7U0FDMUM7YUFBTTtZQUNMLE1BQU0sSUFBSSx1QkFBWSxDQUFDLHFFQUFxRSxDQUFDLENBQUM7U0FDL0Y7SUFDSCxDQUFDO0NBQ0Y7QUE3RkQsOERBNkZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnksIE5vdEltcGxlbWVudGVkRXJyb3IsIE5vdFN1cHBvcnRlZCB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgeyBCYXNlQ29pbiBhcyBDb2luQ29uZmlnIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgZGVjb2RlIH0gZnJvbSAnQHN1YnN0cmF0ZS90eHdyYXBwZXItcG9sa2Fkb3QnO1xuaW1wb3J0IHsgQWRkcmVzc0luaXRpYWxpemF0aW9uQnVpbGRlciB9IGZyb20gJy4vYWRkcmVzc0luaXRpYWxpemF0aW9uQnVpbGRlcic7XG5pbXBvcnQgeyBNYXRlcmlhbCwgTWV0aG9kTmFtZXMgfSBmcm9tICcuL2lmYWNlJztcbmltcG9ydCB7IFJlbW92ZVByb3h5QnVpbGRlciB9IGZyb20gJy4vcHJveHlCdWlsZGVyJztcbmltcG9ydCB7IFNpbmdsZXRvblJlZ2lzdHJ5IH0gZnJvbSAnLi9zaW5nbGV0b25SZWdpc3RyeSc7XG5pbXBvcnQgeyBTdGFraW5nQnVpbGRlciB9IGZyb20gJy4vc3Rha2luZ0J1aWxkZXInO1xuaW1wb3J0IHsgVHJhbnNmZXJCdWlsZGVyIH0gZnJvbSAnLi90cmFuc2ZlckJ1aWxkZXInO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25CdWlsZGVyIH0gZnJvbSAnLi90cmFuc2FjdGlvbkJ1aWxkZXInO1xuaW1wb3J0IHsgVW5ub21pbmF0ZUJ1aWxkZXIgfSBmcm9tICcuL3Vubm9taW5hdGVCdWlsZGVyJztcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEJhdGNoVHJhbnNhY3Rpb25CdWlsZGVyLCBDbGFpbUJ1aWxkZXIsIFVuc3Rha2VCdWlsZGVyLCBXaXRoZHJhd1Vuc3Rha2VkQnVpbGRlciB9IGZyb20gJy4nO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeSBleHRlbmRzIEJhc2VUcmFuc2FjdGlvbkJ1aWxkZXJGYWN0b3J5IHtcbiAgcHJvdGVjdGVkIF9tYXRlcmlhbDogTWF0ZXJpYWw7XG5cbiAgY29uc3RydWN0b3IoX2NvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+KSB7XG4gICAgc3VwZXIoX2NvaW5Db25maWcpO1xuICAgIHRoaXMuX21hdGVyaWFsID0gdXRpbHMuZ2V0TWF0ZXJpYWwoX2NvaW5Db25maWcpO1xuICB9XG5cbiAgZ2V0VHJhbnNmZXJCdWlsZGVyKCk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2ZlckJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0U3Rha2luZ0J1aWxkZXIoKTogU3Rha2luZ0J1aWxkZXIge1xuICAgIHJldHVybiBuZXcgU3Rha2luZ0J1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0QWRkcmVzc0luaXRpYWxpemF0aW9uQnVpbGRlcigpOiBBZGRyZXNzSW5pdGlhbGl6YXRpb25CdWlsZGVyIHtcbiAgICByZXR1cm4gbmV3IEFkZHJlc3NJbml0aWFsaXphdGlvbkJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0UmVtb3ZlUHJveHlCdWlsZGVyKCk6IFJlbW92ZVByb3h5QnVpbGRlciB7XG4gICAgcmV0dXJuIG5ldyBSZW1vdmVQcm94eUJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0QmF0Y2hUcmFuc2FjdGlvbkJ1aWxkZXIoKTogQmF0Y2hUcmFuc2FjdGlvbkJ1aWxkZXIge1xuICAgIHJldHVybiBuZXcgQmF0Y2hUcmFuc2FjdGlvbkJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0V2FsbGV0SW5pdGlhbGl6YXRpb25CdWlsZGVyKCk6IHZvaWQge1xuICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKGB3YWxsZXRJbml0aWFsaXphdGlvbiBmb3IgJHt0aGlzLl9jb2luQ29uZmlnLm5hbWV9IG5vdCBpbXBsZW1lbnRlZGApO1xuICB9XG5cbiAgZ2V0VW5zdGFrZUJ1aWxkZXIoKTogVW5zdGFrZUJ1aWxkZXIge1xuICAgIHJldHVybiBuZXcgVW5zdGFrZUJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0V2l0aGRyYXdVbnN0YWtlZEJ1aWxkZXIoKTogV2l0aGRyYXdVbnN0YWtlZEJ1aWxkZXIge1xuICAgIHJldHVybiBuZXcgV2l0aGRyYXdVbnN0YWtlZEJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0Q2xhaW1CdWlsZGVyKCk6IENsYWltQnVpbGRlciB7XG4gICAgcmV0dXJuIG5ldyBDbGFpbUJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZykubWF0ZXJpYWwodGhpcy5fbWF0ZXJpYWwpO1xuICB9XG5cbiAgZ2V0VW5ub21pbmF0ZUJ1aWxkZXIoKTogVW5ub21pbmF0ZUJ1aWxkZXIge1xuICAgIHJldHVybiBuZXcgVW5ub21pbmF0ZUJ1aWxkZXIodGhpcy5fY29pbkNvbmZpZyk7XG4gIH1cblxuICBmcm9tKHJhd1R4bjogc3RyaW5nKTogVHJhbnNhY3Rpb25CdWlsZGVyIHtcbiAgICBjb25zdCBidWlsZGVyID0gdGhpcy5nZXRCdWlsZGVyKHJhd1R4bik7XG4gICAgYnVpbGRlci5mcm9tKHJhd1R4bik7XG4gICAgcmV0dXJuIGJ1aWxkZXI7XG4gIH1cblxuICBtYXRlcmlhbChtYXRlcmlhbDogTWF0ZXJpYWwpOiB0aGlzIHtcbiAgICB0aGlzLl9tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRCdWlsZGVyKHJhd1R4bjogc3RyaW5nKTogVHJhbnNhY3Rpb25CdWlsZGVyIHtcbiAgICBjb25zdCByZWdpc3RyeSA9IFNpbmdsZXRvblJlZ2lzdHJ5LmdldEluc3RhbmNlKHRoaXMuX21hdGVyaWFsKTtcbiAgICBjb25zdCBkZWNvZGVkVHhuID0gZGVjb2RlKHJhd1R4biwge1xuICAgICAgbWV0YWRhdGFScGM6IHRoaXMuX21hdGVyaWFsLm1ldGFkYXRhLFxuICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgIH0pO1xuXG4gICAgY29uc3QgbWV0aG9kTmFtZSA9IGRlY29kZWRUeG4ubWV0aG9kPy5uYW1lO1xuICAgIGlmIChcbiAgICAgIG1ldGhvZE5hbWUgPT09IE1ldGhvZE5hbWVzLlRyYW5zZmVyS2VlcEFsaXZlIHx8XG4gICAgICBtZXRob2ROYW1lID09PSBNZXRob2ROYW1lcy5UcmFuc2ZlckFsbCB8fFxuICAgICAgbWV0aG9kTmFtZSA9PT0gTWV0aG9kTmFtZXMuUHJveHlcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRyYW5zZmVyQnVpbGRlcigpO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kTmFtZSA9PT0gTWV0aG9kTmFtZXMuQm9uZCB8fCBtZXRob2ROYW1lID09PSBNZXRob2ROYW1lcy5Cb25kRXh0cmEpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFN0YWtpbmdCdWlsZGVyKCk7XG4gICAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSBNZXRob2ROYW1lcy5BZGRQcm94eSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QWRkcmVzc0luaXRpYWxpemF0aW9uQnVpbGRlcigpO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kTmFtZSA9PT0gTWV0aG9kTmFtZXMuUmVtb3ZlUHJveHkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFJlbW92ZVByb3h5QnVpbGRlcigpO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kTmFtZSA9PT0gTWV0aG9kTmFtZXMuVW5ib25kKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRVbnN0YWtlQnVpbGRlcigpO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kTmFtZSA9PT0gTWV0aG9kTmFtZXMuQ2hpbGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFVubm9taW5hdGVCdWlsZGVyKCk7XG4gICAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSBNZXRob2ROYW1lcy5XaXRoZHJhd1VuYm9uZGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRXaXRoZHJhd1Vuc3Rha2VkQnVpbGRlcigpO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kTmFtZSA9PT0gTWV0aG9kTmFtZXMuUGF5b3V0U3Rha2Vycykge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2xhaW1CdWlsZGVyKCk7XG4gICAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSBNZXRob2ROYW1lcy5CYXRjaCB8fCBtZXRob2ROYW1lID09PSBNZXRob2ROYW1lcy5CYXRjaEFsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QmF0Y2hUcmFuc2FjdGlvbkJ1aWxkZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZCgnVHJhbnNhY3Rpb24gY2Fubm90IGJlIHBhcnNlZCBvciBoYXMgYW4gdW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZScpO1xuICAgIH1cbiAgfVxufVxuIl19