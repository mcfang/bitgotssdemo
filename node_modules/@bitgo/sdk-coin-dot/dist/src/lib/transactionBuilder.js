"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const _ = __importStar(require("lodash"));
const errors_1 = require("./errors");
const keyPair_1 = require("./keyPair");
const singletonRegistry_1 = require("./singletonRegistry");
const transaction_1 = require("./transaction");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        // signatures that will be used to sign a transaction when building
        // not the same as the _signatures in transaction which is the signature in
        // string hex format used for validation after we call .build()
        this._signatures = []; // only support single sig for now
        this._transaction = new transaction_1.Transaction(_coinConfig);
    }
    /**
     * Sets the address of sending account.
     *
     * @param {BaseAddress} address The SS58-encoded address.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    sender({ address }) {
        this.validateAddress({ address });
        this._sender = address;
        this._transaction.sender(address);
        return this;
    }
    /**
     * The nonce for this transaction.
     *
     * @param {number} nonce
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    sequenceId(nonce) {
        const value = new bignumber_js_1.default(nonce.value);
        this.validateValue(value);
        this._nonce = value.toNumber();
        return this;
    }
    /**
     * The tip to increase transaction priority.
     *
     * @param {number | undefined} [fee.type] options for building fee tx
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    fee(fee) {
        if (fee.type !== 'tip') {
            throw new errors_1.InvalidFeeError(fee.type, 'tip');
        }
        const tipBN = new bignumber_js_1.default(fee.amount);
        this.validateValue(tipBN);
        this._tip = tipBN.toNumber();
        return this;
    }
    /**
     * The number of the checkpoint block after which the transaction is valid
     *
     * @param {ValidityWindow} firstValid block checkpoint where transaction is first valid
     * @param {ValidityWindow} maxDuration number of blocks after checkpoint for which transaction is valid
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    validity({ firstValid, maxDuration }) {
        if (!_.isUndefined(firstValid)) {
            this.validateValue(new bignumber_js_1.default(firstValid));
            this._blockNumber = firstValid;
        }
        if (!_.isUndefined(maxDuration)) {
            this.validateValue(new bignumber_js_1.default(maxDuration));
            this._eraPeriod = maxDuration;
        }
        return this;
    }
    /**
     * The hash of the checkpoint block.
     *
     * @param {number} referenceBlock block hash checkpoint from where the transaction is valid
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     * @see https://wiki.polkadot.network/docs/build-protocol-info#transaction-mortality
     */
    referenceBlock(referenceBlock) {
        this._referenceBlock = referenceBlock;
        return this;
    }
    /**
     * The current version for transaction format.
     *
     * @param {number} transactionVersion
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     * @deprecated This field was added in material data.
     */
    version(transactionVersion) {
        // this._transactionVersion = transactionVersion;
        return this;
    }
    method(method) {
        this._method = method;
        return this;
    }
    /**
     * The material data for the block.
     *
     * @param {Material} material
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://wiki.polkadot.network/docs/build-transaction-construction
     */
    material(material) {
        this.__material = material;
        this._registry = singletonRegistry_1.SingletonRegistry.getInstance(material);
        return this;
    }
    get _material() {
        if (!this.__material) {
            const m = utils_1.default.getMaterial(this._coinConfig);
            this.material(m);
            return m;
        }
        return this.__material;
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const decodedTxn = txwrapper_polkadot_1.decode(rawTransaction, {
            metadataRpc: this._material.metadata,
            registry: this._registry,
        });
        if (utils_1.default.isSigningPayload(decodedTxn)) {
            this.referenceBlock(decodedTxn.blockHash);
        }
        else {
            const keypair = utils_1.default.decodeDotAddressToKeyPair(decodedTxn.address);
            this.sender({ address: keypair.getAddress(utils_1.default.getAddressFormat(this._coinConfig.name)) });
            const edSignature = utils_1.default.recoverSignatureFromRawTx(rawTransaction, { registry: this._registry });
            this.addSignature(keypair.getKeys(), Buffer.from(edSignature, 'hex'));
        }
        this.validity({ maxDuration: decodedTxn.eraPeriod });
        this.sequenceId({
            name: 'Nonce',
            keyword: 'nonce',
            value: decodedTxn.nonce,
        });
        if (decodedTxn.tip) {
            this.fee({ amount: `${decodedTxn.tip}`, type: 'tip' });
        }
        this.method(decodedTxn.method);
        return this._transaction;
    }
    getMethodAndArguments() {
        this.validateTransaction(this.transaction);
        const unsignedTransaction = this.buildTransaction();
        return unsignedTransaction.method;
    }
    /** @inheritdoc */
    async buildImplementation() {
        var _a;
        this.transaction.setTransaction(this.buildTransaction());
        this.transaction.transactionType(this.transactionType);
        this.transaction.registry(this._registry);
        this.transaction.chainName(this._material.chainName);
        if (this._keyPair) {
            this.transaction.sign(this._keyPair);
        }
        if (((_a = this._signatures) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            // if we have a signature, apply that and update this._signedTransaction
            this.transaction.constructSignedPayload(this._signatures[0].signature);
        }
        this._transaction.loadInputsAndOutputs();
        return this._transaction;
    }
    createBaseTxInfo() {
        return {
            baseTxInfo: {
                address: this._sender,
                blockHash: this._referenceBlock,
                blockNumber: this._registry.createType('BlockNumber', this._blockNumber).toNumber(),
                eraPeriod: this._eraPeriod,
                genesisHash: this._material.genesisHash,
                metadataRpc: this._material.metadata,
                specVersion: this._material.specVersion,
                transactionVersion: this._material.txVersion,
                nonce: this._nonce,
                tip: this._tip,
            },
            options: {
                metadataRpc: this._material.metadata,
                registry: this._registry,
                isImmortalEra: this._eraPeriod === 0,
            },
        };
    }
    // region Validators
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new errors_1.AddressValidationError(address.address);
        }
    }
    /** @inheritdoc */
    validateKey({ key }) {
        let isValidPrivateKeyFromBytes;
        const isValidPrivateKeyFromHex = sdk_core_1.isValidEd25519Seed(key);
        const isValidPrivateKeyFromBase64 = sdk_core_1.isValidEd25519Seed(Buffer.from(key, 'base64').toString('hex'));
        try {
            const decodedSeed = utils_1.default.decodeSeed(key);
            isValidPrivateKeyFromBytes = sdk_core_1.isValidEd25519Seed(Buffer.from(decodedSeed.seed).toString('hex'));
        }
        catch (err) {
            isValidPrivateKeyFromBytes = false;
        }
        if (!isValidPrivateKeyFromBytes && !isValidPrivateKeyFromHex && !isValidPrivateKeyFromBase64) {
            throw new sdk_core_1.BuildTransactionError(`Key validation failed`);
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        const decodedTxn = txwrapper_polkadot_1.decode(rawTransaction, {
            metadataRpc: this._material.metadata,
            registry: this._registry,
        });
        const eraPeriod = decodedTxn.eraPeriod;
        const nonce = decodedTxn.nonce;
        const tip = decodedTxn.tip;
        if (utils_1.default.isSigningPayload(decodedTxn)) {
            const blockHash = decodedTxn.blockHash;
            const validationResult = txnSchema_1.SigningPayloadTransactionSchema.validate({
                eraPeriod,
                blockHash,
                nonce,
                tip,
            });
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
            }
        }
        else {
            const sender = decodedTxn.address;
            const validationResult = txnSchema_1.SignedTransactionSchema.validate({
                sender,
                nonce,
                eraPeriod,
                tip,
            });
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
            }
        }
        this.validateDecodedTransaction(decodedTxn, rawTransaction);
    }
    /** @inheritdoc */
    validateTransaction(_) {
        this.validateBaseFields(this._sender, this._blockNumber, this._referenceBlock, this._material.genesisHash, this._material.chainName, this._nonce, this._material.specVersion, this._material.specName, this._material.txVersion, this._eraPeriod, this._tip);
    }
    validateBaseFields(sender, blockNumber, blockHash, genesisHash, chainName, nonce, specVersion, specName, transactionVersion, eraPeriod, tip) {
        const validationResult = txnSchema_1.BaseTransactionSchema.validate({
            sender,
            blockNumber,
            blockHash,
            genesisHash,
            chainName,
            nonce,
            specVersion,
            specName,
            transactionVersion,
            eraPeriod,
            tip,
        });
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    // endregion
    /** @inheritdoc */
    addSignature(publicKey, signature) {
        this._signatures.push({ publicKey, signature });
    }
    /** @inheritdoc */
    signImplementation({ key }) {
        this._keyPair = new keyPair_1.KeyPair({ prv: key });
        return this._transaction;
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,