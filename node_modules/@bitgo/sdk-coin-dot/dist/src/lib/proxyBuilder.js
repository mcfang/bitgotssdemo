"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveProxyBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const txwrapper_polkadot_1 = require("@substrate/txwrapper-polkadot");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const iface_1 = require("./iface");
const iface_utils_1 = require("./iface_utils");
const transactionBuilder_1 = require("./transactionBuilder");
const txnSchema_1 = require("./txnSchema");
class RemoveProxyBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritDoc */
    buildTransaction() {
        const baseTxInfo = this.createBaseTxInfo();
        return txwrapper_polkadot_1.methods.proxy.removeProxy({
            delegate: this._delegate,
            proxyType: this._proxyType,
            delay: this._delay,
        }, baseTxInfo.baseTxInfo, baseTxInfo.options);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.AddressInitialization;
    }
    /**
     * The proxy account to remove.
     *
     * @param {BaseAddress} owner
     * @returns {AddressInitializationBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#why-use-a-proxy
     */
    owner(owner) {
        this.validateAddress({ address: owner.address });
        this._delegate = owner.address;
        return this;
    }
    /**
     * The proxy type to remove.
     *
     * @param {proxyType} proxyType
     * @returns {AddressInitializationBuilder} This builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#proxy-types
     */
    type(proxyType) {
        this._proxyType = proxyType;
        return this;
    }
    /**
     * The number of blocks that an announcement must be in place for.
     * before the corresponding call may be dispatched.
     * If zero, then no announcement is needed.
     * TODO: move to the validity window method once it has been standardized
     *
     * @param {string} delay
     * @returns {AddressInitializationBuilder} This transfer builder.
     *
     * @see https://wiki.polkadot.network/docs/learn-proxies#time-delayed-proxies
     */
    delay(delay) {
        this.validateValue(new bignumber_js_1.default(parseInt(delay, 10)));
        this._delay = delay;
        return this;
    }
    /** @inheritdoc */
    validateDecodedTransaction(decodedTxn) {
        var _a;
        let validationResult;
        if (((_a = decodedTxn.method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.RemoveProxy) {
            const txMethod = decodedTxn.method.args;
            validationResult = this.validateRemoveProxyFields(iface_utils_1.getDelegateAddress(txMethod), txMethod.proxyType, txMethod.delay);
            if (validationResult.error) {
                throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
            }
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        var _a, _b;
        const tx = super.fromImplementation(rawTransaction);
        if (((_a = this._method) === null || _a === void 0 ? void 0 : _a.name) === iface_1.MethodNames.RemoveProxy) {
            const txMethod = this._method.args;
            this.owner({ address: iface_utils_1.getDelegateAddress(txMethod) });
            this.type(txMethod.proxyType);
            this.delay(new bignumber_js_1.default(txMethod.delay).toString());
        }
        else {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${(_b = this._method) === null || _b === void 0 ? void 0 : _b.name}. Expected ${iface_1.MethodNames.RemoveProxy}`);
        }
        return tx;
    }
    /** @inheritdoc */
    validateTransaction(_) {
        super.validateTransaction(_);
        this.validateFields();
    }
    validateFields() {
        const validationResult = this.validateRemoveProxyFields(this._delegate, this._proxyType, this._delay);
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`RemoveProxy Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    validateRemoveProxyFields(delegate, proxyType, delay) {
        return txnSchema_1.AddressInitializationSchema.validate({
            delegate,
            proxyType,
            delay,
        });
    }
}
exports.RemoveProxyBuilder = RemoveProxyBuilder;
//# sourceMappingURL=data:application/json;base64,