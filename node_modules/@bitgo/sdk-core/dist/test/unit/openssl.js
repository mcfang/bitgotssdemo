"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("should");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const bigint_crypto_utils_1 = require("bigint-crypto-utils");
const node_utils_1 = require("../node.utils");
describe('openssl', function () {
    it('should throw an error if module is not initialized', async function () {
        const openssl = new sdk_lib_mpc_1.OpenSSL();
        await openssl
            .generateSafePrime(sdk_lib_mpc_1.minModulusBitLength)
            .should.be.rejectedWith('The OpenSSl class is not initialized! Please call OpenSSL.init().');
    });
    // node 14 requires --experimental-wasm-bigint node flag
    if (node_utils_1.NODE_MAJOR_VERSION > 14) {
        it('should generate a safe prime number of a certain bitLength', async function () {
            const openssl = new sdk_lib_mpc_1.OpenSSL();
            await openssl.init();
            const safePrime = await openssl.generateSafePrime(512);
            bigint_crypto_utils_1.bitLength(safePrime).should.equal(512);
        });
        it('should generate a safe prime number', async function () {
            const openssl = new sdk_lib_mpc_1.OpenSSL();
            await openssl.init();
            const safePrime = await openssl.generateSafePrime(512);
            let isPrime = await bigint_crypto_utils_1.isProbablyPrime(safePrime);
            isPrime.should.be.true();
            isPrime = await bigint_crypto_utils_1.isProbablyPrime((safePrime - BigInt(1)) / BigInt(2));
            isPrime.should.be.true();
        });
        it('should be able to generate multiple safe primes with the same openssl instance', async function () {
            const openssl = new sdk_lib_mpc_1.OpenSSL();
            await openssl.init();
            const safePrimes = await Promise.all([openssl.generateSafePrime(512), openssl.generateSafePrime(512)]);
            safePrimes.length.should.equal(2);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbnNzbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvdW5pdC9vcGVuc3NsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWdCO0FBQ2hCLG9EQUFrRTtBQUNsRSw2REFBaUU7QUFDakUsOENBQW1EO0FBRW5ELFFBQVEsQ0FBQyxTQUFTLEVBQUU7SUFDbEIsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLEtBQUs7UUFDNUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxxQkFBTyxFQUFFLENBQUM7UUFDOUIsTUFBTSxPQUFPO2FBQ1YsaUJBQWlCLENBQUMsaUNBQW1CLENBQUM7YUFDdEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsbUVBQW1FLENBQUMsQ0FBQztJQUNqRyxDQUFDLENBQUMsQ0FBQztJQUVILHdEQUF3RDtJQUN4RCxJQUFJLCtCQUFrQixHQUFHLEVBQUUsRUFBRTtRQUMzQixFQUFFLENBQUMsNERBQTRELEVBQUUsS0FBSztZQUNwRSxNQUFNLE9BQU8sR0FBRyxJQUFJLHFCQUFPLEVBQUUsQ0FBQztZQUM5QixNQUFNLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2RCwrQkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSztZQUM3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLHFCQUFPLEVBQUUsQ0FBQztZQUM5QixNQUFNLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2RCxJQUFJLE9BQU8sR0FBRyxNQUFNLHFDQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekIsT0FBTyxHQUFHLE1BQU0scUNBQWUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnRkFBZ0YsRUFBRSxLQUFLO1lBQ3hGLE1BQU0sT0FBTyxHQUFHLElBQUkscUJBQU8sRUFBRSxDQUFDO1lBQzlCLE1BQU0sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3JCLE1BQU0sVUFBVSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZHLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3Nob3VsZCc7XG5pbXBvcnQgeyBPcGVuU1NMLCBtaW5Nb2R1bHVzQml0TGVuZ3RoIH0gZnJvbSAnQGJpdGdvL3Nkay1saWItbXBjJztcbmltcG9ydCB7IGJpdExlbmd0aCwgaXNQcm9iYWJseVByaW1lIH0gZnJvbSAnYmlnaW50LWNyeXB0by11dGlscyc7XG5pbXBvcnQgeyBOT0RFX01BSk9SX1ZFUlNJT04gfSBmcm9tICcuLi9ub2RlLnV0aWxzJztcblxuZGVzY3JpYmUoJ29wZW5zc2wnLCBmdW5jdGlvbiAoKSB7XG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgbW9kdWxlIGlzIG5vdCBpbml0aWFsaXplZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBvcGVuc3NsID0gbmV3IE9wZW5TU0woKTtcbiAgICBhd2FpdCBvcGVuc3NsXG4gICAgICAuZ2VuZXJhdGVTYWZlUHJpbWUobWluTW9kdWx1c0JpdExlbmd0aClcbiAgICAgIC5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKCdUaGUgT3BlblNTbCBjbGFzcyBpcyBub3QgaW5pdGlhbGl6ZWQhIFBsZWFzZSBjYWxsIE9wZW5TU0wuaW5pdCgpLicpO1xuICB9KTtcblxuICAvLyBub2RlIDE0IHJlcXVpcmVzIC0tZXhwZXJpbWVudGFsLXdhc20tYmlnaW50IG5vZGUgZmxhZ1xuICBpZiAoTk9ERV9NQUpPUl9WRVJTSU9OID4gMTQpIHtcbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIGEgc2FmZSBwcmltZSBudW1iZXIgb2YgYSBjZXJ0YWluIGJpdExlbmd0aCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IG9wZW5zc2wgPSBuZXcgT3BlblNTTCgpO1xuICAgICAgYXdhaXQgb3BlbnNzbC5pbml0KCk7XG4gICAgICBjb25zdCBzYWZlUHJpbWUgPSBhd2FpdCBvcGVuc3NsLmdlbmVyYXRlU2FmZVByaW1lKDUxMik7XG4gICAgICBiaXRMZW5ndGgoc2FmZVByaW1lKS5zaG91bGQuZXF1YWwoNTEyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgYSBzYWZlIHByaW1lIG51bWJlcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IG9wZW5zc2wgPSBuZXcgT3BlblNTTCgpO1xuICAgICAgYXdhaXQgb3BlbnNzbC5pbml0KCk7XG4gICAgICBjb25zdCBzYWZlUHJpbWUgPSBhd2FpdCBvcGVuc3NsLmdlbmVyYXRlU2FmZVByaW1lKDUxMik7XG4gICAgICBsZXQgaXNQcmltZSA9IGF3YWl0IGlzUHJvYmFibHlQcmltZShzYWZlUHJpbWUpO1xuICAgICAgaXNQcmltZS5zaG91bGQuYmUudHJ1ZSgpO1xuICAgICAgaXNQcmltZSA9IGF3YWl0IGlzUHJvYmFibHlQcmltZSgoc2FmZVByaW1lIC0gQmlnSW50KDEpKSAvIEJpZ0ludCgyKSk7XG4gICAgICBpc1ByaW1lLnNob3VsZC5iZS50cnVlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2VuZXJhdGUgbXVsdGlwbGUgc2FmZSBwcmltZXMgd2l0aCB0aGUgc2FtZSBvcGVuc3NsIGluc3RhbmNlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3Qgb3BlbnNzbCA9IG5ldyBPcGVuU1NMKCk7XG4gICAgICBhd2FpdCBvcGVuc3NsLmluaXQoKTtcbiAgICAgIGNvbnN0IHNhZmVQcmltZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbb3BlbnNzbC5nZW5lcmF0ZVNhZmVQcmltZSg1MTIpLCBvcGVuc3NsLmdlbmVyYXRlU2FmZVByaW1lKDUxMildKTtcbiAgICAgIHNhZmVQcmltZXMubGVuZ3RoLnNob3VsZC5lcXVhbCgyKTtcbiAgICB9KTtcbiAgfVxufSk7XG4iXX0=