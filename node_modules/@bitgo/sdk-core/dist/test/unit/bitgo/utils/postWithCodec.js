"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const t = __importStar(require("io-ts"));
const superagent_1 = require("superagent");
const postWithCodec_1 = require("../../../../src/bitgo/utils/postWithCodec");
describe('postWithCodec', function () {
    function getRequest(codec, body, { useEncodedBody = true } = {}) {
        const request = postWithCodec_1.postWithCodec(superagent_1.agent(), 'http://example.com', codec, body, {
            useEncodedBody,
        });
        return {
            headers: request.header,
            body: request._data,
        };
    }
    function assertRequestContains(request, body, headers) {
        assert_1.default.deepStrictEqual(request.body, body);
        for (const [key, value] of Object.entries(headers)) {
            assert_1.default.deepStrictEqual(request.headers[key], value, `header ${key} does not match`);
        }
    }
    const codec = t.exact(t.intersection([t.type({ foo: t.string }), t.partial({ bar: t.unknown })]));
    it('has expected values with value matching codec', function () {
        assertRequestContains(getRequest(codec, { foo: 'bar' }), { foo: 'bar' }, {
            'io-ts-codec-encode-error': 'false',
            'io-ts-codec-decode-error': '',
            'io-ts-unknown-properties': '',
        });
        assertRequestContains(getRequest(codec, { foo: 'bar', bar: null }), { foo: 'bar', bar: null }, {
            'io-ts-codec-encode-error': 'false',
            'io-ts-codec-decode-error': '',
            'io-ts-unknown-properties': '',
        });
    });
    it('has expected values with value not matching codec', function () {
        // invalid value
        assertRequestContains(getRequest(codec, { foo: null }), { foo: null }, {
            'io-ts-codec-encode-error': 'false',
            'io-ts-codec-decode-error': '0.foo',
            'io-ts-unknown-properties': '',
        });
        // non-exact value
        assertRequestContains(getRequest(codec, { foo: 'bar', boo: 1 }), { foo: 'bar' }, {
            'io-ts-codec-encode-error': 'false',
            'io-ts-codec-decode-error': '',
            'io-ts-unknown-properties': 'boo',
        });
        // non-exact value, useEncodedBody=false
        assertRequestContains(getRequest(codec, { foo: 'bar', boo: 1 }, { useEncodedBody: false }), { foo: 'bar', boo: 1 }, {
            'io-ts-codec-encode-error': 'false',
            'io-ts-codec-decode-error': '',
            'io-ts-unknown-properties': 'boo',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdFdpdGhDb2RlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9iaXRnby91dGlscy9wb3N0V2l0aENvZGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9EQUE0QjtBQUM1Qix5Q0FBMkI7QUFDM0IsMkNBQXNEO0FBRXRELDZFQUEwRTtBQUUxRSxRQUFRLENBQUMsZUFBZSxFQUFFO0lBRXhCLFNBQVMsVUFBVSxDQUNqQixLQUFtQixFQUNuQixJQUFPLEVBQ1AsRUFBRSxjQUFjLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRTtRQUs5QixNQUFNLE9BQU8sR0FBRyw2QkFBYSxDQUFDLGtCQUFLLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ3hFLGNBQWM7U0FDZixDQU9BLENBQUM7UUFDRixPQUFPO1lBQ0wsT0FBTyxFQUFFLE9BQU8sQ0FBQyxNQUFNO1lBQ3ZCLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSztTQUNwQixDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMscUJBQXFCLENBQzVCLE9BR0MsRUFDRCxJQUFhLEVBQ2IsT0FBZ0I7UUFFaEIsZ0JBQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzQyxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNsRCxnQkFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztTQUNyRjtJQUNILENBQUM7SUFFRCxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbEcsRUFBRSxDQUFDLCtDQUErQyxFQUFFO1FBQ2xELHFCQUFxQixDQUNuQixVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQ2pDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUNkO1lBQ0UsMEJBQTBCLEVBQUUsT0FBTztZQUNuQywwQkFBMEIsRUFBRSxFQUFFO1lBQzlCLDBCQUEwQixFQUFFLEVBQUU7U0FDL0IsQ0FDRixDQUFDO1FBRUYscUJBQXFCLENBQ25CLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUM1QyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUN6QjtZQUNFLDBCQUEwQixFQUFFLE9BQU87WUFDbkMsMEJBQTBCLEVBQUUsRUFBRTtZQUM5QiwwQkFBMEIsRUFBRSxFQUFFO1NBQy9CLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1FBQ3RELGdCQUFnQjtRQUNoQixxQkFBcUIsQ0FDbkIsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQVMsQ0FBQyxFQUN2QyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFDYjtZQUNFLDBCQUEwQixFQUFFLE9BQU87WUFDbkMsMEJBQTBCLEVBQUUsT0FBTztZQUNuQywwQkFBMEIsRUFBRSxFQUFFO1NBQy9CLENBQ0YsQ0FBQztRQUVGLGtCQUFrQjtRQUNsQixxQkFBcUIsQ0FDbkIsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBUyxDQUFDLEVBQ2hELEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUNkO1lBQ0UsMEJBQTBCLEVBQUUsT0FBTztZQUNuQywwQkFBMEIsRUFBRSxFQUFFO1lBQzlCLDBCQUEwQixFQUFFLEtBQUs7U0FDbEMsQ0FDRixDQUFDO1FBRUYsd0NBQXdDO1FBQ3hDLHFCQUFxQixDQUNuQixVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFTLEVBQUUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFDM0UsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFDdEI7WUFDRSwwQkFBMEIsRUFBRSxPQUFPO1lBQ25DLDBCQUEwQixFQUFFLEVBQUU7WUFDOUIsMEJBQTBCLEVBQUUsS0FBSztTQUNsQyxDQUNGLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0ICogYXMgdCBmcm9tICdpby10cyc7XG5pbXBvcnQgeyBhZ2VudCwgU3VwZXJBZ2VudFJlcXVlc3QgfSBmcm9tICdzdXBlcmFnZW50JztcblxuaW1wb3J0IHsgcG9zdFdpdGhDb2RlYyB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9iaXRnby91dGlscy9wb3N0V2l0aENvZGVjJztcblxuZGVzY3JpYmUoJ3Bvc3RXaXRoQ29kZWMnLCBmdW5jdGlvbiAoKSB7XG4gIHR5cGUgSGVhZGVycyA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBmdW5jdGlvbiBnZXRSZXF1ZXN0PEEgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgTyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+PihcbiAgICBjb2RlYzogdC5UeXBlPEEsIE8+LFxuICAgIGJvZHk6IEEsXG4gICAgeyB1c2VFbmNvZGVkQm9keSA9IHRydWUgfSA9IHt9XG4gICk6IHtcbiAgICBib2R5OiB1bmtub3duO1xuICAgIGhlYWRlcnM6IEhlYWRlcnM7XG4gIH0ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBwb3N0V2l0aENvZGVjKGFnZW50KCksICdodHRwOi8vZXhhbXBsZS5jb20nLCBjb2RlYywgYm9keSwge1xuICAgICAgdXNlRW5jb2RlZEJvZHksXG4gICAgfSkgYXMgU3VwZXJBZ2VudFJlcXVlc3QgJiB7XG4gICAgICAvKlxuICAgICAgU29tZSBwcml2YXRlIHByb3BlcnRpZXMuIEEgYml0IHVnbHksIGJ1dCB0aGUgYWx0ZXJuYXRpdmUgaXMgdG8gbWFrZSBhbiBhY3R1YWwgcmVxdWVzdCBhZ2FpbnN0XG4gICAgICBhIG5vY2ssIGFuZCB0ZWFzZSBvdXQgdGhlIGhlYWRlcnMgZnJvbSB0aGVyZS4gTm90IHByZXR0eSBlaXRoZXIuXG4gICAgICAqL1xuICAgICAgX2RhdGE6IHVua25vd247XG4gICAgICBoZWFkZXI6IEhlYWRlcnM7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXIsXG4gICAgICBib2R5OiByZXF1ZXN0Ll9kYXRhLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRSZXF1ZXN0Q29udGFpbnMoXG4gICAgcmVxdWVzdDoge1xuICAgICAgYm9keTogdW5rbm93bjtcbiAgICAgIGhlYWRlcnM6IEhlYWRlcnM7XG4gICAgfSxcbiAgICBib2R5OiB1bmtub3duLFxuICAgIGhlYWRlcnM6IEhlYWRlcnNcbiAgKSB7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChyZXF1ZXN0LmJvZHksIGJvZHkpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSB7XG4gICAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHJlcXVlc3QuaGVhZGVyc1trZXldLCB2YWx1ZSwgYGhlYWRlciAke2tleX0gZG9lcyBub3QgbWF0Y2hgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb2RlYyA9IHQuZXhhY3QodC5pbnRlcnNlY3Rpb24oW3QudHlwZSh7IGZvbzogdC5zdHJpbmcgfSksIHQucGFydGlhbCh7IGJhcjogdC51bmtub3duIH0pXSkpO1xuXG4gIGl0KCdoYXMgZXhwZWN0ZWQgdmFsdWVzIHdpdGggdmFsdWUgbWF0Y2hpbmcgY29kZWMnLCBmdW5jdGlvbiAoKSB7XG4gICAgYXNzZXJ0UmVxdWVzdENvbnRhaW5zKFxuICAgICAgZ2V0UmVxdWVzdChjb2RlYywgeyBmb286ICdiYXInIH0pLFxuICAgICAgeyBmb286ICdiYXInIH0sXG4gICAgICB7XG4gICAgICAgICdpby10cy1jb2RlYy1lbmNvZGUtZXJyb3InOiAnZmFsc2UnLFxuICAgICAgICAnaW8tdHMtY29kZWMtZGVjb2RlLWVycm9yJzogJycsXG4gICAgICAgICdpby10cy11bmtub3duLXByb3BlcnRpZXMnOiAnJyxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgYXNzZXJ0UmVxdWVzdENvbnRhaW5zKFxuICAgICAgZ2V0UmVxdWVzdChjb2RlYywgeyBmb286ICdiYXInLCBiYXI6IG51bGwgfSksXG4gICAgICB7IGZvbzogJ2JhcicsIGJhcjogbnVsbCB9LFxuICAgICAge1xuICAgICAgICAnaW8tdHMtY29kZWMtZW5jb2RlLWVycm9yJzogJ2ZhbHNlJyxcbiAgICAgICAgJ2lvLXRzLWNvZGVjLWRlY29kZS1lcnJvcic6ICcnLFxuICAgICAgICAnaW8tdHMtdW5rbm93bi1wcm9wZXJ0aWVzJzogJycsXG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ2hhcyBleHBlY3RlZCB2YWx1ZXMgd2l0aCB2YWx1ZSBub3QgbWF0Y2hpbmcgY29kZWMnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaW52YWxpZCB2YWx1ZVxuICAgIGFzc2VydFJlcXVlc3RDb250YWlucyhcbiAgICAgIGdldFJlcXVlc3QoY29kZWMsIHsgZm9vOiBudWxsIH0gYXMgYW55KSxcbiAgICAgIHsgZm9vOiBudWxsIH0sXG4gICAgICB7XG4gICAgICAgICdpby10cy1jb2RlYy1lbmNvZGUtZXJyb3InOiAnZmFsc2UnLFxuICAgICAgICAnaW8tdHMtY29kZWMtZGVjb2RlLWVycm9yJzogJzAuZm9vJyxcbiAgICAgICAgJ2lvLXRzLXVua25vd24tcHJvcGVydGllcyc6ICcnLFxuICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBub24tZXhhY3QgdmFsdWVcbiAgICBhc3NlcnRSZXF1ZXN0Q29udGFpbnMoXG4gICAgICBnZXRSZXF1ZXN0KGNvZGVjLCB7IGZvbzogJ2JhcicsIGJvbzogMSB9IGFzIGFueSksXG4gICAgICB7IGZvbzogJ2JhcicgfSxcbiAgICAgIHtcbiAgICAgICAgJ2lvLXRzLWNvZGVjLWVuY29kZS1lcnJvcic6ICdmYWxzZScsXG4gICAgICAgICdpby10cy1jb2RlYy1kZWNvZGUtZXJyb3InOiAnJyxcbiAgICAgICAgJ2lvLXRzLXVua25vd24tcHJvcGVydGllcyc6ICdib28nLFxuICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBub24tZXhhY3QgdmFsdWUsIHVzZUVuY29kZWRCb2R5PWZhbHNlXG4gICAgYXNzZXJ0UmVxdWVzdENvbnRhaW5zKFxuICAgICAgZ2V0UmVxdWVzdChjb2RlYywgeyBmb286ICdiYXInLCBib286IDEgfSBhcyBhbnksIHsgdXNlRW5jb2RlZEJvZHk6IGZhbHNlIH0pLFxuICAgICAgeyBmb286ICdiYXInLCBib286IDEgfSxcbiAgICAgIHtcbiAgICAgICAgJ2lvLXRzLWNvZGVjLWVuY29kZS1lcnJvcic6ICdmYWxzZScsXG4gICAgICAgICdpby10cy1jb2RlYy1kZWNvZGUtZXJyb3InOiAnJyxcbiAgICAgICAgJ2lvLXRzLXVua25vd24tcHJvcGVydGllcyc6ICdib28nLFxuICAgICAgfVxuICAgICk7XG4gIH0pO1xufSk7XG4iXX0=