"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = __importStar(require("assert"));
const SendTransactionRequest_1 = require("../../../../src/bitgo/wallet/SendTransactionRequest");
const BuildParams_1 = require("../../../../src/bitgo/wallet/BuildParams");
const codecProps_1 = require("../../../../src/bitgo/utils/codecProps");
describe('SendTransactionRequest', function () {
    it('has expected property count', function () {
        assert.strictEqual(codecProps_1.getCodecProperties(BuildParams_1.BuildParams).length, 74);
    });
    it('enforces codec', function () {
        assert.deepStrictEqual(BuildParams_1.BuildParams.encode({
            addressType: 'p2sh',
            txFormat: 'psbt',
            comment: 'foo',
            unknown: 'bar',
        }), {
            addressType: 'p2sh',
            txFormat: 'psbt',
            comment: 'foo',
            // drops unknown properties
        });
        assert.deepStrictEqual(SendTransactionRequest_1.SendTransactionRequest.encode({ txHex: '00' }), { txHex: '00' });
        assert.deepStrictEqual(SendTransactionRequest_1.SendTransactionRequest.encode({ txHex: '00', addressType: 'p2sh', bar: 'omit' }), {
            txHex: '00',
            addressType: 'p2sh',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VuZFRyYW5zYWN0aW9uUmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9iaXRnby93YWxsZXQvU2VuZFRyYW5zYWN0aW9uUmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQ0FBaUM7QUFDakMsZ0dBQTZGO0FBQzdGLDBFQUF1RTtBQUN2RSx1RUFBNEU7QUFFNUUsUUFBUSxDQUFDLHdCQUF3QixFQUFFO0lBQ2pDLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRTtRQUNoQyxNQUFNLENBQUMsV0FBVyxDQUFDLCtCQUFrQixDQUFDLHlCQUFXLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7UUFDbkIsTUFBTSxDQUFDLGVBQWUsQ0FDcEIseUJBQVcsQ0FBQyxNQUFNLENBQUM7WUFDakIsV0FBVyxFQUFFLE1BQU07WUFDbkIsUUFBUSxFQUFFLE1BQU07WUFDaEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxPQUFPLEVBQUUsS0FBSztTQUNSLENBQUMsRUFDVDtZQUNFLFdBQVcsRUFBRSxNQUFNO1lBQ25CLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsMkJBQTJCO1NBQzVCLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxlQUFlLENBQUMsK0NBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4RixNQUFNLENBQUMsZUFBZSxDQUFDLCtDQUFzQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFTLENBQUMsRUFBRTtZQUM5RyxLQUFLLEVBQUUsSUFBSTtZQUNYLFdBQVcsRUFBRSxNQUFNO1NBQ3BCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCB7IFNlbmRUcmFuc2FjdGlvblJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvYml0Z28vd2FsbGV0L1NlbmRUcmFuc2FjdGlvblJlcXVlc3QnO1xuaW1wb3J0IHsgQnVpbGRQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvYml0Z28vd2FsbGV0L0J1aWxkUGFyYW1zJztcbmltcG9ydCB7IGdldENvZGVjUHJvcGVydGllcyB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9iaXRnby91dGlscy9jb2RlY1Byb3BzJztcblxuZGVzY3JpYmUoJ1NlbmRUcmFuc2FjdGlvblJlcXVlc3QnLCBmdW5jdGlvbiAoKSB7XG4gIGl0KCdoYXMgZXhwZWN0ZWQgcHJvcGVydHkgY291bnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGdldENvZGVjUHJvcGVydGllcyhCdWlsZFBhcmFtcykubGVuZ3RoLCA3NCk7XG4gIH0pO1xuXG4gIGl0KCdlbmZvcmNlcyBjb2RlYycsIGZ1bmN0aW9uICgpIHtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICAgICAgQnVpbGRQYXJhbXMuZW5jb2RlKHtcbiAgICAgICAgYWRkcmVzc1R5cGU6ICdwMnNoJyxcbiAgICAgICAgdHhGb3JtYXQ6ICdwc2J0JyxcbiAgICAgICAgY29tbWVudDogJ2ZvbycsXG4gICAgICAgIHVua25vd246ICdiYXInLFxuICAgICAgfSBhcyBhbnkpLFxuICAgICAge1xuICAgICAgICBhZGRyZXNzVHlwZTogJ3Ayc2gnLFxuICAgICAgICB0eEZvcm1hdDogJ3BzYnQnLFxuICAgICAgICBjb21tZW50OiAnZm9vJyxcbiAgICAgICAgLy8gZHJvcHMgdW5rbm93biBwcm9wZXJ0aWVzXG4gICAgICB9XG4gICAgKTtcblxuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoU2VuZFRyYW5zYWN0aW9uUmVxdWVzdC5lbmNvZGUoeyB0eEhleDogJzAwJyB9KSwgeyB0eEhleDogJzAwJyB9KTtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFNlbmRUcmFuc2FjdGlvblJlcXVlc3QuZW5jb2RlKHsgdHhIZXg6ICcwMCcsIGFkZHJlc3NUeXBlOiAncDJzaCcsIGJhcjogJ29taXQnIH0gYXMgYW55KSwge1xuICAgICAgdHhIZXg6ICcwMCcsXG4gICAgICBhZGRyZXNzVHlwZTogJ3Ayc2gnLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19