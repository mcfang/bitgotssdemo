"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toUint8Array = exports.isBase58 = exports.toHex = exports.isValidBLSPublicKey = exports.isValidBLSPrivateKey = exports.isValidEd25519PublicKey = exports.isValidEd25519SecretKey = exports.isValidEd25519Seed = exports.isValidPrv = exports.isValidPub = exports.isValidXprv = exports.isValidXpub = exports.rawPrvToExtendedKeys = exports.xprvToRawPrv = exports.xpubToCompressedPub = exports.xpubToUncompressedPub = exports.bigIntToHex = exports.hexToBigInt = exports.convertBigIntArrToHexArr = exports.convertHexArrToBigIntArr = void 0;
const utxo_lib_1 = require("@bitgo/utxo-lib");
const nacl = __importStar(require("tweetnacl"));
const hex = __importStar(require("@stablelib/hex"));
const bls = __importStar(require("noble-bls12-381"));
const strip_hex_prefix_1 = __importDefault(require("strip-hex-prefix"));
const bs58_1 = __importDefault(require("bs58"));
/**
 * @deprecated - use @bitgo/sdk-lib-mpc instead
 */
var sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
Object.defineProperty(exports, "convertHexArrToBigIntArr", { enumerable: true, get: function () { return sdk_lib_mpc_1.convertHexArrToBigIntArr; } });
Object.defineProperty(exports, "convertBigIntArrToHexArr", { enumerable: true, get: function () { return sdk_lib_mpc_1.convertBigIntArrToHexArr; } });
Object.defineProperty(exports, "hexToBigInt", { enumerable: true, get: function () { return sdk_lib_mpc_1.hexToBigInt; } });
Object.defineProperty(exports, "bigIntToHex", { enumerable: true, get: function () { return sdk_lib_mpc_1.bigIntToHex; } });
/**
 * @param xpub - a base-58 encoded extended public key (BIP32)
 * @param compressed flag to determine if return key should be compressed/uncompressed
 * @return a compressed or an uncompresseed public key in hexadecimal
 */
function xPubToPub(xpub, compressed) {
    if (!isValidXpub(xpub)) {
        throw new Error('invalid xpub');
    }
    return utxo_lib_1.ECPair.fromPublicKey(utxo_lib_1.bip32.fromBase58(xpub, utxo_lib_1.networks.bitcoin).publicKey, {
        compressed,
    }).publicKey.toString('hex');
}
/**
 * @param {string} xpub - a base-58 encoded extended public key (BIP32)
 * @returns {string} the uncompressed public key in hexadecimal
 */
function xpubToUncompressedPub(xpub) {
    return xPubToPub(xpub, false);
}
exports.xpubToUncompressedPub = xpubToUncompressedPub;
/**
 * @param {string} xpub - a base-58 encoded extended public key (BIP32)
 * @returns {string} the uncompressed public key in hexadecimal
 */
function xpubToCompressedPub(xpub) {
    return xPubToPub(xpub, true);
}
exports.xpubToCompressedPub = xpubToCompressedPub;
/**
 * @param {string} xprv - base58-encoded extended private key (BIP32)
 * @returns {string} the hex-encoded raw private key
 */
function xprvToRawPrv(xprv) {
    if (!isValidXprv(xprv)) {
        throw new Error('invalid xprv');
    }
    const { privateKey } = utxo_lib_1.bip32.fromBase58(xprv, utxo_lib_1.networks.bitcoin);
    if (!privateKey) {
        throw new Error('invalid xprv');
    }
    return privateKey.toString('hex');
}
exports.xprvToRawPrv = xprvToRawPrv;
/**
 * @param {string} prv - Private key in hex format to get the extended keys for
 * @returns {ExtendedKeys} xprv and xpub in string format
 */
function rawPrvToExtendedKeys(prv) {
    const hd = utxo_lib_1.bip32.fromPrivateKey(Buffer.from(prv, 'hex'), Buffer.alloc(32));
    return {
        xprv: hd.toBase58(),
        xpub: hd.neutered().toBase58(),
    };
}
exports.rawPrvToExtendedKeys = rawPrvToExtendedKeys;
/**
 * Whether the input is a valid BIP32 xpub or not
 *
 * @param xpub
 */
function isValidXpub(xpub) {
    if (xpub.substr(0, 4) !== 'xpub') {
        // check for xpub formats we don't support, such as tpub
        return false;
    }
    try {
        utxo_lib_1.bip32.fromBase58(xpub, utxo_lib_1.networks.bitcoin);
    }
    catch (err) {
        return false;
    }
    // if HD generation didn't throw, it is a valid xpub
    return true;
}
exports.isValidXpub = isValidXpub;
/**
 * Whether the input is a valid BIP32 xprv or not
 *
 * @param xprv
 */
function isValidXprv(xprv) {
    if (xprv.substr(0, 4) !== 'xprv') {
        // check for xprv formats we don't support
        return false;
    }
    try {
        utxo_lib_1.bip32.fromBase58(xprv, utxo_lib_1.networks.bitcoin);
    }
    catch (err) {
        return false;
    }
    // if HD generation didn't throw, it is a valid xprv
    return true;
}
exports.isValidXprv = isValidXprv;
/**
 * Whether the input is a valid secp256k1 public key
 *
 * @param pub
 */
function isValidPub(pub) {
    try {
        utxo_lib_1.ECPair.fromPublicKey(Buffer.from(pub, 'hex'));
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidPub = isValidPub;
/**
 * Whether the input is a valid secp256k1 private key
 *
 * @param prv
 */
function isValidPrv(prv) {
    try {
        utxo_lib_1.ECPair.fromPrivateKey(Buffer.from(prv, 'hex'));
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidPrv = isValidPrv;
/**
 * Whether the input is a valid ed25519 private key
 *
 * @param {string} prv A hexadecimal private key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519Seed(prv) {
    try {
        const decodedPrv = toUint8Array(prv);
        return decodedPrv.length === nacl.sign.seedLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519Seed = isValidEd25519Seed;
/**
 * Whether the input is a valid ed25519 private key
 *
 * @param {string} prv A hexadecimal private key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519SecretKey(prv) {
    try {
        const decodedPrv = toUint8Array(prv);
        return decodedPrv.length === nacl.sign.secretKeyLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519SecretKey = isValidEd25519SecretKey;
/**
 * Whether the input is a valid ed25519 public key
 *
 * @param {string} pub A hexadecimal public key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519PublicKey(pub) {
    try {
        const decodedPub = new Uint8Array(Buffer.from(pub, 'hex'));
        return decodedPub.length === nacl.sign.publicKeyLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519PublicKey = isValidEd25519PublicKey;
/**
 * Whether the input is a valid BLS private key
 *
 * @param {string} prv a private key to validate
 * @returns {boolean} Whether the input is a valid private key or not
 */
function isValidBLSPrivateKey(prv) {
    try {
        return bls.Fr.isValid(BigInt('0x' + prv));
    }
    catch (e) {
        return false;
    }
}
exports.isValidBLSPrivateKey = isValidBLSPrivateKey;
/**
 * Whether input is a valid BLS public key
 *
 * @param {string} pub the public key to validate
 * @returns {boolean} Whether input is a valid public key or not
 */
function isValidBLSPublicKey(pub) {
    try {
        bls.PointG1.fromCompressedHex(strip_hex_prefix_1.default(pub)).assertValidity();
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.isValidBLSPublicKey = isValidBLSPublicKey;
/**
 * Returns an hex string of the given buffer
 *
 * @param {Buffer | Uint8Array} buffer - the buffer to be converted to hex
 * @returns {string} - the hex value
 */
function toHex(buffer) {
    return hex.encode(buffer, true);
}
exports.toHex = toHex;
/**
 * Check if base58 decoded string is equale to length
 *
 * @param {string} value - string to be checked
 * @param {number} length - expected decoded length
 * @return {boolean} if the string can decoded as base58 and match the expected length
 */
function isBase58(value, length) {
    try {
        return !!value && bs58_1.default.decode(value).length === length;
    }
    catch (e) {
        return false;
    }
}
exports.isBase58 = isBase58;
/**
 * Returns a Uint8Array of the given hex string
 *
 * @param {string} str - the hex string to be converted
 * @returns {string} - the Uint8Array value
 */
function toUint8Array(str) {
    return hex.decode(str);
}
exports.toUint8Array = toUint8Array;
//# sourceMappingURL=data:application/json;base64,