"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlsKeyPair = void 0;
const assert_1 = __importDefault(require("assert"));
const crypto_1 = require("crypto");
const BLS = __importStar(require("@bitgo/bls-dkg"));
const errors_1 = require("./errors");
const iface_1 = require("./iface");
const crypto_2 = require("../util/crypto");
const DEFAULT_SIGNATURE_THRESHOLD = 2;
const DEFAULT_SIGNATURE_PARTICIPANTS = 3;
/**
 * Base class for BLS keypairs.
 */
class BlsKeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random polynomial.
     *
     * @param {KeyPairOptions} source Either a dkg options, a public and secret shares, or a private key
     */
    constructor(source) {
        if (!source) {
            this.createShares(DEFAULT_SIGNATURE_THRESHOLD, DEFAULT_SIGNATURE_PARTICIPANTS);
        }
        else if (iface_1.isDkg(source)) {
            this.createShares(source.threshold, source.participants);
        }
        else if (iface_1.isBlsKey(source)) {
            assert_1.default(source.secretShares.every(crypto_2.isValidBLSPrivateKey), 'Invalid private keys');
            assert_1.default(crypto_2.isValidBLSPublicKey(source.publicShare), 'Invalid public key');
            this.keyPair = source;
        }
        else if (iface_1.isPrivateKey(source)) {
            this.keyPair = {
                prv: source.prv,
                publicShare: '',
                secretShares: [],
                seed: '',
                chaincode: '',
            };
        }
        else {
            throw new Error('Invalid key pair options');
        }
    }
    createShares(threshold, participants) {
        if (participants < threshold) {
            throw new Error('Participants should be greater than threshold');
        }
        const polynomial = BLS.generatePolynomial(threshold);
        const keySecretShares = BLS.secretShares(polynomial, participants);
        const keyPublicShare = BLS.publicShare(polynomial);
        this.keyPair = {
            seed: crypto_2.bigIntToHex(polynomial[0], 64),
            chaincode: crypto_1.randomBytes(32).toString('hex'),
            secretShares: keySecretShares.map((secretShare) => crypto_2.bigIntToHex(secretShare, 64)),
            publicShare: crypto_2.bigIntToHex(keyPublicShare),
        };
    }
    /**
     * Note - this is not possible using BLS. BLS does not support prvkey derived key gen
     *
     * @param {string[]} prv a hexadecimal private key
     */
    recordKeysFromPrivateKey(prv) {
        throw new errors_1.NotImplementedError('Private key derivation is not supported in bls');
    }
    /**
     * Note - this is not possible using BLS. BLS does not support pubkey derived key gen
     *
     * @param {string} pub - An extended, compressed, or uncompressed public key
     */
    recordKeysFromPublicKey(pub) {
        throw new errors_1.NotImplementedError('Public key derivation is not supported in bls');
    }
    getAddress(format) {
        throw new errors_1.NotImplementedError('getAddress not implemented');
    }
    getKeys() {
        throw new errors_1.NotImplementedError('getKeys not implemented');
    }
    /**
     * Signs bytes using the key pair
     *
     * @param msg The message bytes to sign
     * @return signature of the bytes using this keypair
     */
    async sign(msg) {
        if (this.keyPair.prv) {
            const signedMessage = await BLS.sign(msg, BigInt('0x' + this.keyPair.prv));
            return '0x' + crypto_2.bigIntToHex(signedMessage);
        }
        throw new Error('Missing private key');
    }
    static keyDerive(seed, pk, chaincode, path) {
        const seedBI = BigInt('0x' + seed);
        const pkBI = BigInt('0x' + pk);
        const chaincodeBI = BigInt('0x' + chaincode);
        const childKey = BLS.privateDerive(seedBI, pkBI, chaincodeBI, path);
        const childChaincode = crypto_2.bigIntToHex(childKey.chaincode);
        const entropy = BigInt('0x' + crypto_1.randomBytes(32).toString('hex'));
        const secretShares = BLS.secretShares([childKey.sk, entropy], DEFAULT_SIGNATURE_PARTICIPANTS);
        const publicShare = BLS.publicShare([childKey.sk]);
        return {
            seed,
            chaincode: childChaincode,
            secretShares: secretShares.map((secretShare) => crypto_2.bigIntToHex(secretShare)),
            publicShare: crypto_2.bigIntToHex(publicShare),
        };
    }
    /**
     * Aggregates the secret shares of different key pairs into one private key
     *
     * @param prvKeys an array of secret shares
     * @returns a private key
     */
    static aggregatePrvkeys(prvKeys) {
        assert_1.default(prvKeys.every(crypto_2.isValidBLSPrivateKey), 'Invalid private keys');
        try {
            const secretShares = prvKeys.map((secretShare) => BigInt('0x' + secretShare));
            const prv = BLS.mergeSecretShares(secretShares);
            return crypto_2.bigIntToHex(prv);
        }
        catch (e) {
            throw new Error('Error aggregating prvkeys: ' + e);
        }
    }
    /**
     * Aggregates the public shares of different key pairs into a common public key
     *
     * @param pubKeys an array of public shares
     * @returns a common public key
     */
    static aggregatePubkeys(pubKeys) {
        try {
            const publicShares = pubKeys.map((publicShare) => BigInt('0x' + publicShare));
            const commonPubKey = BLS.mergePublicShares(publicShares);
            return crypto_2.bigIntToHex(commonPubKey);
        }
        catch (e) {
            throw new Error('Error aggregating pubkeys: ' + e);
        }
    }
    static aggregateChaincodes(chaincodeContributions) {
        try {
            const chaincodes = chaincodeContributions.map((chaincode) => BigInt('0x' + chaincode));
            const commonChaincode = BLS.mergeChaincodes(chaincodes);
            return crypto_2.bigIntToHex(commonChaincode, 64);
        }
        catch (e) {
            throw new Error('Error aggregating chaincodes: ' + e);
        }
    }
    /**
     * Aggregates the message signed by different key pairs into one sign
     *
     * @param signatures the message signed by different key pairs. The signer id is relevant to ensure a valid signature.
     * @example <caption> E.g., the message is signed by user and wallet, then signatures would be:</caption>
     * {
     *   1: BigInt(messageSignedWithUserPrv),
     *   3: BigInt(messageSignedWithWalletPrv),
     * }
     * @returns a signature combining all the provided signed messages
     */
    static aggregateSignatures(signatures) {
        try {
            const signature = BLS.mergeSignatures(signatures);
            return '0x' + crypto_2.bigIntToHex(signature);
        }
        catch (e) {
            throw new Error('Error aggregating signatures: ' + e);
        }
    }
    /**
     * Verifies the signature for this key pair
     * @param pub The public key with which to verify the signature
     * @param msg The message to verify the signature with
     * @param signature the signature to verify
     * @return true if the signature is valid, else false
     */
    static async verifySignature(pub, msg, signature) {
        assert_1.default(crypto_2.isValidBLSPublicKey(pub), `Invalid public key: ${pub}`);
        return await BLS.verify(BigInt(signature), msg, BigInt('0x' + pub));
    }
}
exports.BlsKeyPair = BlsKeyPair;
//# sourceMappingURL=data:application/json;base64,