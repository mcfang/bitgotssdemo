"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Module provides functions for MPC using threshold signature scheme (TSS). It contains
 * functions for key generation and message signing with EdDSA.
 *
 *
 * ======================
 * EdDSA Key Generation
 * ======================
 * 1. Each signer generates their own key share, which involves a private u-share and a public y-share.
 * 2. Signers distribute their y-share to other signers.
 * 3. After exchanging y-shares the next phase is to combine key shares. Each signer combines their u-share
 *    with the y-shares received from other signers in order to generate a p-share for themselves. We
 *    also save j-shares for other signers.
 * 4. At this point the players do not distribute any shares and the first phase of the
 *    signing protocol is complete.
 *
 * ======================
 * EdDSA Signing
 * ======================
 * 1. The parties from key generation decide they want to sign something. They begin the signing protocol
 *    by generating shares of an ephemeral key.
 *
 *    a) Each signer uses his p-share and the j-shares stored for other players to generate his signing share.
 *    b) This results in each signer having a private x-share and public r-shares.
 *
 * 2. Signers distribute their r-shares to other signers.
 * 3. After exchanging r-shares, each signer signs their share of the ephemeral key using their private
 *    x-share with the r-shares from other signers.
 * 4. This results in each signer having a public g-share which they send to the other signers.
 * 5. After the signers broadcast their g-shares, the final signature can be re-constructed independently.
 */
const crypto_1 = require("crypto");
const curves_1 = require("../../curves");
const shamir_1 = __importDefault(require("../../shamir"));
const util_1 = require("../../util");
const assert_1 = __importDefault(require("assert"));
// 2^256
const base = BigInt('0x010000000000000000000000000000000000000000000000000000000000000000');
class Eddsa {
    constructor(hdTree) {
        this.hdTree = hdTree;
    }
    static async initialize(hdTree) {
        if (!Eddsa.initialized) {
            await curves_1.Ed25519Curve.initialize();
            Eddsa.initialized = true;
        }
        return new Eddsa(hdTree);
    }
    keyShare(index, threshold, numShares, seed) {
        if (!(index > 0 && index <= numShares)) {
            throw new Error('Invalid KeyShare config');
        }
        if (seed && seed.length !== 64) {
            throw new Error('Seed must have length 64');
        }
        const seedchain = seed !== null && seed !== void 0 ? seed : crypto_1.randomBytes(64);
        const actualSeed = seedchain.slice(0, 32);
        const chaincode = seedchain.slice(32);
        const h = crypto_1.createHash('sha512').update(actualSeed).digest();
        const u = util_1.clamp(util_1.bigIntFromBufferLE(h.slice(0, 32)));
        const y = Eddsa.curve.basePointMult(u);
        const { shares: split_u, v } = Eddsa.shamir.split(u, threshold, numShares);
        const P_i = {
            i: index,
            t: threshold,
            n: numShares,
            y: util_1.bigIntToBufferLE(y, 32).toString('hex'),
            seed: actualSeed.toString('hex'),
            chaincode: chaincode.toString('hex'),
        };
        const shares = {
            uShare: P_i,
            yShares: {},
        };
        for (const ind in split_u) {
            const i = parseInt(ind, 10);
            if (i === index) {
                continue;
            }
            shares.yShares[i] = {
                i,
                j: P_i.i,
                y: util_1.bigIntToBufferLE(y, 32).toString('hex'),
                v: util_1.bigIntToBufferLE(v[0], 32).toString('hex'),
                u: util_1.bigIntToBufferLE(split_u[ind], 32).toString('hex'),
                chaincode: chaincode.toString('hex'),
            };
        }
        return shares;
    }
    keyCombine(uShare, yShares) {
        const h = crypto_1.createHash('sha512').update(Buffer.from(uShare.seed, 'hex')).digest();
        const u = util_1.clamp(util_1.bigIntFromBufferLE(h.slice(0, 32)));
        const yValues = [uShare, ...yShares].map((share) => util_1.bigIntFromBufferLE(Buffer.from(share.y, 'hex')));
        const y = yValues.reduce((partial, share) => Eddsa.curve.pointAdd(partial, share));
        const chaincodes = [uShare, ...yShares].map(({ chaincode }) => util_1.bigIntFromBufferBE(Buffer.from(chaincode, 'hex')));
        const chaincode = chaincodes.reduce((acc, chaincode) => (acc + chaincode) % base);
        // Verify shares.
        for (const share of yShares) {
            if ('v' in share) {
                try {
                    Eddsa.shamir.verify(util_1.bigIntFromBufferLE(Buffer.from(share.u, 'hex')), [util_1.bigIntFromBufferLE(Buffer.from(share.y, 'hex')), util_1.bigIntFromBufferLE(Buffer.from(share.v, 'hex'))], uShare.i);
                }
                catch (err) {
                    // TODO(BG-61036): Fix Verification
                    // throw new Error(`Could not verify share from participant ${share.j}. Verification error: ${err}`);
                }
            }
        }
        const P_i = {
            i: uShare.i,
            t: uShare.t,
            n: uShare.n,
            y: util_1.bigIntToBufferLE(y, 32).toString('hex'),
            u: util_1.bigIntToBufferLE(u, 32).toString('hex'),
            prefix: h.slice(32).toString('hex'),
            chaincode: util_1.bigIntToBufferBE(chaincode, 32).toString('hex'),
        };
        const players = {
            pShare: P_i,
            jShares: {},
        };
        for (let ind = 0; ind < yShares.length; ind++) {
            const P_j = yShares[ind];
            players.jShares[P_j.j] = {
                i: P_j.j,
                j: P_i.i,
            };
        }
        return players;
    }
    /**
     * Derives a child common keychain from common keychain
     *
     * @param commonKeychain - common keychain as a hex string
     * @param path - bip32 path
     * @return {string} derived common keychain as a hex string
     */
    deriveUnhardened(commonKeychain, path) {
        if (this.hdTree === undefined) {
            throw new Error("Can't derive key without HDTree implementation");
        }
        const keychain = Buffer.from(commonKeychain, 'hex');
        const derivedPublicKeychain = this.hdTree.publicDerive({
            pk: util_1.bigIntFromBufferLE(keychain.slice(0, 32)),
            chaincode: util_1.bigIntFromBufferBE(keychain.slice(32)),
        }, path);
        const derivedPk = util_1.bigIntToBufferLE(derivedPublicKeychain.pk, 32).toString('hex');
        const derivedChaincode = util_1.bigIntToBufferBE(derivedPublicKeychain.chaincode, 32).toString('hex');
        return derivedPk + derivedChaincode;
    }
    keyDerive(uShare, yShares, path) {
        if (this.hdTree === undefined) {
            throw new Error("Can't derive key without HDTree implementation");
        }
        const h = crypto_1.createHash('sha512').update(Buffer.from(uShare.seed, 'hex')).digest();
        const yValues = [uShare, ...yShares].map((share) => util_1.bigIntFromBufferLE(Buffer.from(share.y, 'hex')));
        const y = yValues.reduce((partial, share) => Eddsa.curve.pointAdd(partial, share));
        const u = util_1.clamp(util_1.bigIntFromBufferLE(h.slice(0, 32)));
        const prefix = util_1.bigIntFromBufferBE(h.slice(32));
        let contribChaincode = util_1.bigIntFromBufferBE(Buffer.from(uShare.chaincode, 'hex'));
        const chaincodes = [
            contribChaincode,
            ...yShares.map(({ chaincode }) => util_1.bigIntFromBufferBE(Buffer.from(chaincode, 'hex'))),
        ];
        const chaincode = chaincodes.reduce((acc, chaincode) => (acc + chaincode) % base);
        // Derive subkey.
        const subkey = this.hdTree.privateDerive({ pk: y, sk: u, prefix, chaincode }, path);
        // Calculate new public key contribution.
        const contribY = Eddsa.curve.basePointMult(subkey.sk);
        // Calculate new chaincode contribution.
        const chaincodeDelta = (base + subkey.chaincode - chaincode) % base;
        contribChaincode = (contribChaincode + chaincodeDelta) % base;
        // Calculate new u values.
        const { shares: split_u, v } = Eddsa.shamir.split(subkey.sk, uShare.t, uShare.n);
        const P_i = {
            i: uShare.i,
            t: uShare.t,
            n: uShare.n,
            y: util_1.bigIntToBufferLE(subkey.pk, 32).toString('hex'),
            u: util_1.bigIntToBufferLE(subkey.sk, 32).toString('hex'),
            prefix: util_1.bigIntToBufferBE(subkey.prefix, 32).toString('hex'),
            chaincode: util_1.bigIntToBufferBE(subkey.chaincode, 32).toString('hex'),
        };
        const shares = {
            pShare: P_i,
            yShares: {},
        };
        for (let ind = 0; ind < yShares.length; ind++) {
            const P_j = yShares[ind];
            shares.yShares[P_j.j] = {
                i: P_j.j,
                j: P_i.i,
                y: util_1.bigIntToBufferLE(contribY, 32).toString('hex'),
                v: util_1.bigIntToBufferLE(v[0], 32).toString('hex'),
                u: util_1.bigIntToBufferLE(split_u[P_j.j], 32).toString('hex'),
                chaincode: util_1.bigIntToBufferBE(contribChaincode, 32).toString('hex'),
            };
        }
        return shares;
    }
    signShare(message, pShare, jShares, seed) {
        if (seed && seed.length !== 64) {
            throw new Error('Seed must have length 64');
        }
        const indices = [pShare, ...jShares].map(({ i }) => i);
        const { shares: split_u, v } = Eddsa.shamir.split(util_1.bigIntFromBufferLE(Buffer.from(pShare.u, 'hex')), pShare.t, pShare.n);
        // Generate nonce contribution.
        const prefix = Buffer.from(pShare.prefix, 'hex');
        const randomBuffer = seed !== null && seed !== void 0 ? seed : crypto_1.randomBytes(64);
        const digest = crypto_1.createHash('sha512')
            .update(Buffer.concat([prefix, message, randomBuffer]))
            .digest();
        const r = Eddsa.curve.scalarReduce(util_1.bigIntFromBufferLE(digest));
        const R = Eddsa.curve.basePointMult(r);
        const { shares: split_r } = Eddsa.shamir.split(r, indices.length, indices.length, indices);
        const P_i = {
            i: pShare.i,
            y: pShare.y,
            u: util_1.bigIntToBufferLE(split_u[pShare.i], 32).toString('hex'),
            r: util_1.bigIntToBufferLE(split_r[pShare.i], 32).toString('hex'),
            R: util_1.bigIntToBufferLE(R, 32).toString('hex'),
        };
        const resultShares = {
            xShare: P_i,
            rShares: {},
        };
        for (let ind = 0; ind < jShares.length; ind++) {
            const S_j = jShares[ind];
            resultShares.rShares[S_j.i] = {
                i: S_j.i,
                j: pShare.i,
                u: util_1.bigIntToBufferLE(split_u[S_j.i], 32).toString('hex'),
                v: util_1.bigIntToBufferLE(v[0], 32).toString('hex'),
                r: util_1.bigIntToBufferLE(split_r[S_j.i], 32).toString('hex'),
                R: util_1.bigIntToBufferLE(R, 32).toString('hex'),
                commitment: util_1.bigIntToBufferLE(Eddsa.curve.basePointMult(split_r[S_j.i]), 32).toString('hex'),
            };
        }
        return resultShares;
    }
    sign(message, playerShare, rShares, yShares = []) {
        for (const rShare of rShares) {
            if (rShare.commitment) {
                this.validateCommitment(rShare);
            }
        }
        const S_i = playerShare;
        const uValues = [playerShare, ...rShares, ...yShares].map(({ u }) => util_1.bigIntFromBufferLE(Buffer.from(u, 'hex')));
        const x = uValues.reduce((acc, u) => Eddsa.curve.scalarAdd(acc, u));
        const RValues = [playerShare, ...rShares].map(({ R }) => util_1.bigIntFromBufferLE(Buffer.from(R, 'hex')));
        const R = RValues.reduce((partial, share) => Eddsa.curve.pointAdd(partial, share));
        const rValues = [playerShare, ...rShares].map(({ r }) => util_1.bigIntFromBufferLE(Buffer.from(r, 'hex')));
        const r = rValues.reduce((partial, share) => Eddsa.curve.scalarAdd(partial, share));
        const combinedBuffer = Buffer.concat([util_1.bigIntToBufferLE(R, 32), Buffer.from(S_i.y, 'hex'), message]);
        const digest = crypto_1.createHash('sha512').update(combinedBuffer).digest();
        const k = Eddsa.curve.scalarReduce(util_1.bigIntFromBufferLE(digest));
        const gamma = Eddsa.curve.scalarAdd(r, Eddsa.curve.scalarMult(k, x));
        const result = {
            i: playerShare.i,
            y: playerShare.y,
            gamma: util_1.bigIntToBufferLE(gamma, 32).toString('hex'),
            R: util_1.bigIntToBufferLE(R, 32).toString('hex'),
        };
        return result;
    }
    signCombine(shares) {
        const y = shares[0].y;
        const R = shares[0].R;
        const resultShares = {};
        for (const ind in shares) {
            const S_i = shares[ind];
            resultShares[S_i.i] = util_1.bigIntFromBufferLE(Buffer.from(S_i.gamma, 'hex'));
        }
        const sigma = Eddsa.shamir.combine(resultShares);
        const result = {
            y,
            R,
            sigma: util_1.bigIntToBufferLE(sigma, 32).toString('hex'),
        };
        return result;
    }
    verify(message, signature) {
        const publicKey = util_1.bigIntFromBufferLE(Buffer.from(signature.y, 'hex'));
        const signedMessage = Buffer.concat([Buffer.from(signature.R, 'hex'), Buffer.from(signature.sigma, 'hex')]);
        return Eddsa.curve.verify(message, signedMessage, publicKey);
    }
    validateCommitment(RShare) {
        assert_1.default(RShare.commitment, 'Commitment is missing');
        const c = Eddsa.curve.basePointMult(util_1.bigIntFromBufferLE(Buffer.from(RShare.r, 'hex')));
        const otherPlayerCommitment = util_1.bigIntFromBufferLE(Buffer.from(RShare.commitment, 'hex'));
        if (c !== otherPlayerCommitment) {
            throw new Error('Could not verify other player share');
        }
    }
}
exports.default = Eddsa;
Eddsa.curve = new curves_1.Ed25519Curve();
Eddsa.shamir = new shamir_1.default(Eddsa.curve);
Eddsa.initialized = false;
//# sourceMappingURL=data:application/json;base64,