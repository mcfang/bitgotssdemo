"use strict";
/**
 * @prettier
 * @hidden
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFirstPendingTransaction = void 0;
/**
 */
const lodash_1 = require("lodash");
/**
 * Internal function to centralize this route for wallet-scoped and enterprise-scoped queries
 * Params must contain either walletId or enterpriseId
 * @param params Id to query for pending transaction
 * @param baseCoin The coin object
 * @param bitgo The BitGo object
 * @returns result of the query
 */
async function getFirstPendingTransaction(params, baseCoin, bitgo) {
    // These errors should never happen when this is called from wallet.js or enterprise.js
    if (lodash_1.isUndefined(baseCoin)) {
        throw new Error('Must provide baseCoin');
    }
    if (lodash_1.isUndefined(bitgo)) {
        throw new Error('Must provide BitGo object');
    }
    if (lodash_1.isUndefined(params.walletId) && lodash_1.isUndefined(params.enterpriseId)) {
        throw new Error('Must provide either walletId or enterpriseId');
    }
    return await bitgo.get(baseCoin.url('/tx/pending/first')).query(params).result();
}
exports.getFirstPendingTransaction = getFirstPendingTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vaW50ZXJuYWwvaW50ZXJuYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUg7R0FDRztBQUNILG1DQUFxQztBQUlyQzs7Ozs7OztHQU9HO0FBQ0ksS0FBSyxVQUFVLDBCQUEwQixDQUM5QyxNQUFvRCxFQUNwRCxRQUFtQixFQUNuQixLQUFnQjtJQUVoQix1RkFBdUY7SUFDdkYsSUFBSSxvQkFBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUMxQztJQUNELElBQUksb0JBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDOUM7SUFDRCxJQUFJLG9CQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLG9CQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQ3BFLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztLQUNqRTtJQUNELE9BQU8sTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNuRixDQUFDO0FBaEJELGdFQWdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKi9cbmltcG9ydCB7IGlzVW5kZWZpbmVkIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IElCYXNlQ29pbiB9IGZyb20gJy4uL2Jhc2VDb2luJztcbmltcG9ydCB7IEJpdEdvQmFzZSB9IGZyb20gJy4uL2JpdGdvQmFzZSc7XG5cbi8qKlxuICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gY2VudHJhbGl6ZSB0aGlzIHJvdXRlIGZvciB3YWxsZXQtc2NvcGVkIGFuZCBlbnRlcnByaXNlLXNjb3BlZCBxdWVyaWVzXG4gKiBQYXJhbXMgbXVzdCBjb250YWluIGVpdGhlciB3YWxsZXRJZCBvciBlbnRlcnByaXNlSWRcbiAqIEBwYXJhbSBwYXJhbXMgSWQgdG8gcXVlcnkgZm9yIHBlbmRpbmcgdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSBiYXNlQ29pbiBUaGUgY29pbiBvYmplY3RcbiAqIEBwYXJhbSBiaXRnbyBUaGUgQml0R28gb2JqZWN0XG4gKiBAcmV0dXJucyByZXN1bHQgb2YgdGhlIHF1ZXJ5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRGaXJzdFBlbmRpbmdUcmFuc2FjdGlvbihcbiAgcGFyYW1zOiB7IHdhbGxldElkPzogc3RyaW5nOyBlbnRlcnByaXNlSWQ/OiBzdHJpbmcgfSxcbiAgYmFzZUNvaW46IElCYXNlQ29pbixcbiAgYml0Z286IEJpdEdvQmFzZVxuKTogUHJvbWlzZTxhbnk+IHtcbiAgLy8gVGhlc2UgZXJyb3JzIHNob3VsZCBuZXZlciBoYXBwZW4gd2hlbiB0aGlzIGlzIGNhbGxlZCBmcm9tIHdhbGxldC5qcyBvciBlbnRlcnByaXNlLmpzXG4gIGlmIChpc1VuZGVmaW5lZChiYXNlQ29pbikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBiYXNlQ29pbicpO1xuICB9XG4gIGlmIChpc1VuZGVmaW5lZChiaXRnbykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBCaXRHbyBvYmplY3QnKTtcbiAgfVxuICBpZiAoaXNVbmRlZmluZWQocGFyYW1zLndhbGxldElkKSAmJiBpc1VuZGVmaW5lZChwYXJhbXMuZW50ZXJwcmlzZUlkKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGVpdGhlciB3YWxsZXRJZCBvciBlbnRlcnByaXNlSWQnKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgYml0Z28uZ2V0KGJhc2VDb2luLnVybCgnL3R4L3BlbmRpbmcvZmlyc3QnKSkucXVlcnkocGFyYW1zKS5yZXN1bHQoKTtcbn1cbiJdfQ==