"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradingPartners = void 0;
const trading_1 = require("../trading");
class TradingPartners {
    constructor(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * List all trading partners of your trading account. Your trading partners are the accounts you are allowed to settle with.
     */
    async list() {
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/tradingpartners`);
        const response = (await this.bitgo.get(url).result());
        return response.tradingPartners.map((partner) => new trading_1.TradingPartner(partner, this.bitgo, this.enterpriseId, this.account));
    }
    /**
     * Add trading partner given the unique referralCode provided by trading partner.
     * @param params
     * @param params.referralCode unique referral code provided by counterparty
     * @param params.type type of trading partnership
     * @param params.requesterSide side of the requester (primary or secondary) important for agency relationships
     */
    async addByCode(params) {
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/tradingpartners`);
        return await this.bitgo.post(url).send(params).result();
    }
}
exports.TradingPartners = TradingPartners;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ1BhcnRuZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JpdGdvL3RyYWRpbmcvdHJhZGluZ1BhcnRuZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLHdDQUFpSDtBQUVqSCxNQUFhLGVBQWU7SUFNMUIsWUFBWSxLQUFnQixFQUFFLFlBQW9CLEVBQUUsT0FBdUI7UUFDekUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLElBQUk7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNyQyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsa0JBQWtCLENBQzNGLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQVEsQ0FBQztRQUU3RCxPQUFPLFFBQVEsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUNqQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSx3QkFBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUN0RixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBeUM7UUFDdkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsNEJBQTRCLElBQUksQ0FBQyxZQUFZLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGtCQUFrQixDQUMzRixDQUFDO1FBQ0YsT0FBTyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0NBQ0Y7QUF2Q0QsMENBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgQml0R29CYXNlIH0gZnJvbSAnLi4vYml0Z29CYXNlJztcbmltcG9ydCB7IElUcmFkaW5nUGFydG5lcnMsIFRyYWRpbmdBY2NvdW50LCBUcmFkaW5nUGFydG5lciwgVHJhZGluZ1BhcnRuZXJBZGRCeUNvZGVQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vdHJhZGluZyc7XG5cbmV4cG9ydCBjbGFzcyBUcmFkaW5nUGFydG5lcnMgaW1wbGVtZW50cyBJVHJhZGluZ1BhcnRuZXJzIHtcbiAgcHJpdmF0ZSBiaXRnbzogQml0R29CYXNlO1xuXG4gIHByaXZhdGUgZW50ZXJwcmlzZUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgYWNjb3VudDogVHJhZGluZ0FjY291bnQ7XG5cbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvQmFzZSwgZW50ZXJwcmlzZUlkOiBzdHJpbmcsIGFjY291bnQ6IFRyYWRpbmdBY2NvdW50KSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuZW50ZXJwcmlzZUlkID0gZW50ZXJwcmlzZUlkO1xuICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBhbGwgdHJhZGluZyBwYXJ0bmVycyBvZiB5b3VyIHRyYWRpbmcgYWNjb3VudC4gWW91ciB0cmFkaW5nIHBhcnRuZXJzIGFyZSB0aGUgYWNjb3VudHMgeW91IGFyZSBhbGxvd2VkIHRvIHNldHRsZSB3aXRoLlxuICAgKi9cbiAgYXN5bmMgbGlzdCgpOiBQcm9taXNlPFRyYWRpbmdQYXJ0bmVyW10+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7dGhpcy5lbnRlcnByaXNlSWR9L2FjY291bnQvJHt0aGlzLmFjY291bnQuaWR9L3RyYWRpbmdwYXJ0bmVyc2BcbiAgICApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IHRoaXMuYml0Z28uZ2V0KHVybCkucmVzdWx0KCkpIGFzIGFueTtcblxuICAgIHJldHVybiByZXNwb25zZS50cmFkaW5nUGFydG5lcnMubWFwKFxuICAgICAgKHBhcnRuZXIpID0+IG5ldyBUcmFkaW5nUGFydG5lcihwYXJ0bmVyLCB0aGlzLmJpdGdvLCB0aGlzLmVudGVycHJpc2VJZCwgdGhpcy5hY2NvdW50KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIHRyYWRpbmcgcGFydG5lciBnaXZlbiB0aGUgdW5pcXVlIHJlZmVycmFsQ29kZSBwcm92aWRlZCBieSB0cmFkaW5nIHBhcnRuZXIuXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICogQHBhcmFtIHBhcmFtcy5yZWZlcnJhbENvZGUgdW5pcXVlIHJlZmVycmFsIGNvZGUgcHJvdmlkZWQgYnkgY291bnRlcnBhcnR5XG4gICAqIEBwYXJhbSBwYXJhbXMudHlwZSB0eXBlIG9mIHRyYWRpbmcgcGFydG5lcnNoaXBcbiAgICogQHBhcmFtIHBhcmFtcy5yZXF1ZXN0ZXJTaWRlIHNpZGUgb2YgdGhlIHJlcXVlc3RlciAocHJpbWFyeSBvciBzZWNvbmRhcnkpIGltcG9ydGFudCBmb3IgYWdlbmN5IHJlbGF0aW9uc2hpcHNcbiAgICovXG4gIGFzeW5jIGFkZEJ5Q29kZShwYXJhbXM6IFRyYWRpbmdQYXJ0bmVyQWRkQnlDb2RlUGFyYW1ldGVycyk6IFByb21pc2U8VHJhZGluZ1BhcnRuZXI+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7dGhpcy5lbnRlcnByaXNlSWR9L2FjY291bnQvJHt0aGlzLmFjY291bnQuaWR9L3RyYWRpbmdwYXJ0bmVyc2BcbiAgICApO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmJpdGdvLnBvc3QodXJsKS5zZW5kKHBhcmFtcykucmVzdWx0KCk7XG4gIH1cbn1cbiJdfQ==