"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradingPartner = void 0;
class TradingPartner {
    constructor(tradingPartnerData, bitgo, enterpriseId, currentAccount) {
        this.id = tradingPartnerData.id;
        this.primaryEnterpriseName = tradingPartnerData.primaryEnterpriseName;
        this.primaryAccountId = tradingPartnerData.primaryAccountId;
        this.secondaryEnterpriseName = tradingPartnerData.secondaryEnterpriseName;
        this.secondaryAccountId = tradingPartnerData.secondaryAccountId;
        this.requesterAccountId = tradingPartnerData.requesterAccountId;
        this.status = tradingPartnerData.status;
        this.type = tradingPartnerData.type;
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.currentAccount = currentAccount;
    }
    /**
     * Check if a trading partner has enough funds to cover the cost of a trade.
     * @param currency the currency to check
     * @param amount the amount of currency to check, represented in base units (such as cents, satoshi, or wei)
     */
    async checkBalance(currency, amount) {
        const partnerAccountId = this.primaryAccountId === this.currentAccount.id ? this.secondaryAccountId : this.primaryAccountId;
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.currentAccount.id}/tradingpartners/${partnerAccountId}/balance`);
        const response = (await this.bitgo.get(url).query({ currency, amount }).result());
        return response.check;
    }
}
exports.TradingPartner = TradingPartner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGluZ1BhcnRuZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vdHJhZGluZy90cmFkaW5nUGFydG5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSxNQUFhLGNBQWM7SUFjekIsWUFBWSxrQkFBdUIsRUFBRSxLQUFnQixFQUFFLFlBQW9CLEVBQUUsY0FBOEI7UUFDekcsSUFBSSxDQUFDLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDO1FBQ3RFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM1RCxJQUFJLENBQUMsdUJBQXVCLEdBQUcsa0JBQWtCLENBQUMsdUJBQXVCLENBQUM7UUFDMUUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDO1FBQ2hFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUNoRSxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztRQUVwQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBZ0IsRUFBRSxNQUFjO1FBQ2pELE1BQU0sZ0JBQWdCLEdBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDckcsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsNEJBQTRCLElBQUksQ0FBQyxZQUFZLFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLG9CQUFvQixnQkFBZ0IsVUFBVSxDQUM5SCxDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFFekYsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Q0FDRjtBQTdDRCx3Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgeyBCaXRHb0Jhc2UgfSBmcm9tICcuLi9iaXRnb0Jhc2UnO1xuaW1wb3J0IHsgSVRyYWRpbmdQYXJ0bmVyLCBUcmFkaW5nQWNjb3VudCwgVHJhZGluZ1BhcnRuZXJTdGF0dXMsIFRyYWRpbmdQYXJ0bmVyVHlwZSB9IGZyb20gJy4uL3RyYWRpbmcnO1xuXG5leHBvcnQgY2xhc3MgVHJhZGluZ1BhcnRuZXIgaW1wbGVtZW50cyBJVHJhZGluZ1BhcnRuZXIge1xuICBwcml2YXRlIGJpdGdvOiBCaXRHb0Jhc2U7XG4gIHByaXZhdGUgZW50ZXJwcmlzZUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgY3VycmVudEFjY291bnQ6IFRyYWRpbmdBY2NvdW50OyAvLyBhY2NvdW50IG9mIHRoZSB1c2VyIHVzaW5nIHRoZSBTREssIG5lZWRlZCB0byBjb25zdHJ1Y3QgYmFsYW5jZSBjaGVjayBVUkxcblxuICBwdWJsaWMgaWQ6IHN0cmluZztcbiAgcHVibGljIHByaW1hcnlFbnRlcnByaXNlTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcHJpbWFyeUFjY291bnRJZDogc3RyaW5nO1xuICBwdWJsaWMgc2Vjb25kYXJ5RW50ZXJwcmlzZU5hbWU6IHN0cmluZztcbiAgcHVibGljIHNlY29uZGFyeUFjY291bnRJZDogc3RyaW5nO1xuICBwdWJsaWMgcmVxdWVzdGVyQWNjb3VudElkOiBzdHJpbmc7XG4gIHB1YmxpYyBzdGF0dXM6IFRyYWRpbmdQYXJ0bmVyU3RhdHVzO1xuICBwdWJsaWMgdHlwZTogVHJhZGluZ1BhcnRuZXJUeXBlO1xuXG4gIGNvbnN0cnVjdG9yKHRyYWRpbmdQYXJ0bmVyRGF0YTogYW55LCBiaXRnbzogQml0R29CYXNlLCBlbnRlcnByaXNlSWQ6IHN0cmluZywgY3VycmVudEFjY291bnQ6IFRyYWRpbmdBY2NvdW50KSB7XG4gICAgdGhpcy5pZCA9IHRyYWRpbmdQYXJ0bmVyRGF0YS5pZDtcbiAgICB0aGlzLnByaW1hcnlFbnRlcnByaXNlTmFtZSA9IHRyYWRpbmdQYXJ0bmVyRGF0YS5wcmltYXJ5RW50ZXJwcmlzZU5hbWU7XG4gICAgdGhpcy5wcmltYXJ5QWNjb3VudElkID0gdHJhZGluZ1BhcnRuZXJEYXRhLnByaW1hcnlBY2NvdW50SWQ7XG4gICAgdGhpcy5zZWNvbmRhcnlFbnRlcnByaXNlTmFtZSA9IHRyYWRpbmdQYXJ0bmVyRGF0YS5zZWNvbmRhcnlFbnRlcnByaXNlTmFtZTtcbiAgICB0aGlzLnNlY29uZGFyeUFjY291bnRJZCA9IHRyYWRpbmdQYXJ0bmVyRGF0YS5zZWNvbmRhcnlBY2NvdW50SWQ7XG4gICAgdGhpcy5yZXF1ZXN0ZXJBY2NvdW50SWQgPSB0cmFkaW5nUGFydG5lckRhdGEucmVxdWVzdGVyQWNjb3VudElkO1xuICAgIHRoaXMuc3RhdHVzID0gdHJhZGluZ1BhcnRuZXJEYXRhLnN0YXR1cztcbiAgICB0aGlzLnR5cGUgPSB0cmFkaW5nUGFydG5lckRhdGEudHlwZTtcblxuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmVudGVycHJpc2VJZCA9IGVudGVycHJpc2VJZDtcbiAgICB0aGlzLmN1cnJlbnRBY2NvdW50ID0gY3VycmVudEFjY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0cmFkaW5nIHBhcnRuZXIgaGFzIGVub3VnaCBmdW5kcyB0byBjb3ZlciB0aGUgY29zdCBvZiBhIHRyYWRlLlxuICAgKiBAcGFyYW0gY3VycmVuY3kgdGhlIGN1cnJlbmN5IHRvIGNoZWNrXG4gICAqIEBwYXJhbSBhbW91bnQgdGhlIGFtb3VudCBvZiBjdXJyZW5jeSB0byBjaGVjaywgcmVwcmVzZW50ZWQgaW4gYmFzZSB1bml0cyAoc3VjaCBhcyBjZW50cywgc2F0b3NoaSwgb3Igd2VpKVxuICAgKi9cbiAgYXN5bmMgY2hlY2tCYWxhbmNlKGN1cnJlbmN5OiBzdHJpbmcsIGFtb3VudDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgcGFydG5lckFjY291bnRJZCA9XG4gICAgICB0aGlzLnByaW1hcnlBY2NvdW50SWQgPT09IHRoaXMuY3VycmVudEFjY291bnQuaWQgPyB0aGlzLnNlY29uZGFyeUFjY291bnRJZCA6IHRoaXMucHJpbWFyeUFjY291bnRJZDtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7dGhpcy5lbnRlcnByaXNlSWR9L2FjY291bnQvJHt0aGlzLmN1cnJlbnRBY2NvdW50LmlkfS90cmFkaW5ncGFydG5lcnMvJHtwYXJ0bmVyQWNjb3VudElkfS9iYWxhbmNlYFxuICAgICk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IChhd2FpdCB0aGlzLmJpdGdvLmdldCh1cmwpLnF1ZXJ5KHsgY3VycmVuY3ksIGFtb3VudCB9KS5yZXN1bHQoKSkgYXMgYW55O1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmNoZWNrO1xuICB9XG59XG4iXX0=