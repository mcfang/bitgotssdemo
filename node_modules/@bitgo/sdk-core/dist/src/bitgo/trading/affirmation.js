"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Affirmation = void 0;
const trading_1 = require("../trading");
class Affirmation {
    constructor(affirmationData, bitgo, enterpriseId) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.updateAffirmationData(affirmationData);
    }
    /**
     * Affirms a pending affirmation, authorizing the settlement
     * @param payload payload authorizing the movement of funds from a trading account
     * @param signature signature of the payload with the user key of the trading account
     */
    async affirm(payload, signature) {
        const body = {
            payload: JSON.stringify(payload),
            signature: signature,
        };
        return await this.updateStatus(trading_1.AffirmationStatus.AFFIRMED, body);
    }
    /**
     * Rejects a pending affirmation, cancelling the settlement
     */
    async reject() {
        return this.updateStatus(trading_1.AffirmationStatus.REJECTED, null);
    }
    /**
     * Cancels a pending affirmation, cancelling the settlement
     */
    async cancel() {
        return this.updateStatus(trading_1.AffirmationStatus.CANCELED, null);
    }
    async updateStatus(status, body) {
        const bodyWithStatus = { status, ...body };
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.partyAccountId}/affirmations/${this.id}`);
        const response = await this.bitgo.put(url).send(bodyWithStatus).result();
        this.updateAffirmationData(response);
    }
    updateAffirmationData(affirmationData) {
        this.id = affirmationData.id;
        this.partyAccountId = affirmationData.partyAccountId;
        this.status = affirmationData.status;
        this.settlement = affirmationData.settlement;
        this.lock = affirmationData.lock;
        this.payload = affirmationData.payload;
        this.createdAt = new Date(affirmationData.createdAt);
        this.expireAt = new Date(affirmationData.expireAt);
    }
}
exports.Affirmation = Affirmation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWZmaXJtYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vdHJhZGluZy9hZmZpcm1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSx3Q0FBNEU7QUFFNUUsTUFBYSxXQUFXO0lBYXRCLFlBQVksZUFBb0IsRUFBRSxLQUFnQixFQUFFLFlBQW9CO1FBQ3RFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRWpDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBZ0IsRUFBRSxTQUFpQjtRQUM5QyxNQUFNLElBQUksR0FBRztZQUNYLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztZQUNoQyxTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDO1FBRUYsT0FBTyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsMkJBQWlCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxNQUFNO1FBQ1YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLDJCQUFpQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsTUFBTTtRQUNWLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQywyQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVPLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBeUIsRUFBRSxJQUFVO1FBQzlELE1BQU0sY0FBYyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDM0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsNEJBQTRCLElBQUksQ0FBQyxZQUFZLFlBQVksSUFBSSxDQUFDLGNBQWMsaUJBQWlCLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FDdkcsQ0FBQztRQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3pFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU8scUJBQXFCLENBQUMsZUFBb0I7UUFDaEQsSUFBSSxDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQztRQUNyRCxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7UUFDckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDO1FBQzdDLElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLElBQVksQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBbkVELGtDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cbmltcG9ydCB7IEJpdEdvQmFzZSB9IGZyb20gJy4uL2JpdGdvQmFzZSc7XG5pbXBvcnQgeyBBZmZpcm1hdGlvblN0YXR1cywgSUFmZmlybWF0aW9uLCBMb2NrLCBQYXlsb2FkIH0gZnJvbSAnLi4vdHJhZGluZyc7XG5cbmV4cG9ydCBjbGFzcyBBZmZpcm1hdGlvbiBpbXBsZW1lbnRzIElBZmZpcm1hdGlvbiB7XG4gIHByaXZhdGUgYml0Z286IEJpdEdvQmFzZTtcbiAgcHJpdmF0ZSBlbnRlcnByaXNlSWQ6IHN0cmluZztcblxuICBwdWJsaWMgaWQ/OiBzdHJpbmc7XG4gIHB1YmxpYyBwYXJ0eUFjY291bnRJZD86IHN0cmluZztcbiAgcHVibGljIHN0YXR1cz86IEFmZmlybWF0aW9uU3RhdHVzO1xuICBwdWJsaWMgc2V0dGxlbWVudD86IHN0cmluZztcbiAgcHVibGljIGxvY2s/OiBMb2NrO1xuICBwdWJsaWMgcGF5bG9hZD86IHN0cmluZztcbiAgcHVibGljIGNyZWF0ZWRBdD86IERhdGU7XG4gIHB1YmxpYyBleHBpcmVBdD86IERhdGU7XG5cbiAgY29uc3RydWN0b3IoYWZmaXJtYXRpb25EYXRhOiBhbnksIGJpdGdvOiBCaXRHb0Jhc2UsIGVudGVycHJpc2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuZW50ZXJwcmlzZUlkID0gZW50ZXJwcmlzZUlkO1xuXG4gICAgdGhpcy51cGRhdGVBZmZpcm1hdGlvbkRhdGEoYWZmaXJtYXRpb25EYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZmZpcm1zIGEgcGVuZGluZyBhZmZpcm1hdGlvbiwgYXV0aG9yaXppbmcgdGhlIHNldHRsZW1lbnRcbiAgICogQHBhcmFtIHBheWxvYWQgcGF5bG9hZCBhdXRob3JpemluZyB0aGUgbW92ZW1lbnQgb2YgZnVuZHMgZnJvbSBhIHRyYWRpbmcgYWNjb3VudFxuICAgKiBAcGFyYW0gc2lnbmF0dXJlIHNpZ25hdHVyZSBvZiB0aGUgcGF5bG9hZCB3aXRoIHRoZSB1c2VyIGtleSBvZiB0aGUgdHJhZGluZyBhY2NvdW50XG4gICAqL1xuICBhc3luYyBhZmZpcm0ocGF5bG9hZDogUGF5bG9hZCwgc2lnbmF0dXJlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksXG4gICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlU3RhdHVzKEFmZmlybWF0aW9uU3RhdHVzLkFGRklSTUVELCBib2R5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWplY3RzIGEgcGVuZGluZyBhZmZpcm1hdGlvbiwgY2FuY2VsbGluZyB0aGUgc2V0dGxlbWVudFxuICAgKi9cbiAgYXN5bmMgcmVqZWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVN0YXR1cyhBZmZpcm1hdGlvblN0YXR1cy5SRUpFQ1RFRCwgbnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhIHBlbmRpbmcgYWZmaXJtYXRpb24sIGNhbmNlbGxpbmcgdGhlIHNldHRsZW1lbnRcbiAgICovXG4gIGFzeW5jIGNhbmNlbCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVTdGF0dXMoQWZmaXJtYXRpb25TdGF0dXMuQ0FOQ0VMRUQsIG51bGwpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB1cGRhdGVTdGF0dXMoc3RhdHVzOiBBZmZpcm1hdGlvblN0YXR1cywgYm9keT86IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGJvZHlXaXRoU3RhdHVzID0geyBzdGF0dXMsIC4uLmJvZHkgfTtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmJpdGdvLm1pY3Jvc2VydmljZXNVcmwoXG4gICAgICBgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7dGhpcy5lbnRlcnByaXNlSWR9L2FjY291bnQvJHt0aGlzLnBhcnR5QWNjb3VudElkfS9hZmZpcm1hdGlvbnMvJHt0aGlzLmlkfWBcbiAgICApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5iaXRnby5wdXQodXJsKS5zZW5kKGJvZHlXaXRoU3RhdHVzKS5yZXN1bHQoKTtcbiAgICB0aGlzLnVwZGF0ZUFmZmlybWF0aW9uRGF0YShyZXNwb25zZSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUFmZmlybWF0aW9uRGF0YShhZmZpcm1hdGlvbkRhdGE6IGFueSkge1xuICAgIHRoaXMuaWQgPSBhZmZpcm1hdGlvbkRhdGEuaWQ7XG4gICAgdGhpcy5wYXJ0eUFjY291bnRJZCA9IGFmZmlybWF0aW9uRGF0YS5wYXJ0eUFjY291bnRJZDtcbiAgICB0aGlzLnN0YXR1cyA9IGFmZmlybWF0aW9uRGF0YS5zdGF0dXM7XG4gICAgdGhpcy5zZXR0bGVtZW50ID0gYWZmaXJtYXRpb25EYXRhLnNldHRsZW1lbnQ7XG4gICAgdGhpcy5sb2NrID0gYWZmaXJtYXRpb25EYXRhLmxvY2sgYXMgTG9jaztcbiAgICB0aGlzLnBheWxvYWQgPSBhZmZpcm1hdGlvbkRhdGEucGF5bG9hZDtcbiAgICB0aGlzLmNyZWF0ZWRBdCA9IG5ldyBEYXRlKGFmZmlybWF0aW9uRGF0YS5jcmVhdGVkQXQpO1xuICAgIHRoaXMuZXhwaXJlQXQgPSBuZXcgRGF0ZShhZmZpcm1hdGlvbkRhdGEuZXhwaXJlQXQpO1xuICB9XG59XG4iXX0=