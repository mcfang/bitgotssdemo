"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settlements = void 0;
const trading_1 = require("../trading");
class Settlements {
    constructor(bitgo, enterpriseId, account) {
        this.bitgo = bitgo;
        this.enterpriseId = enterpriseId;
        this.account = account;
    }
    /**
     * Retrieves all settlements for an enterprise
     */
    async list() {
        let url;
        if (this.account) {
            url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/settlements`);
        }
        else {
            url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/settlements`);
        }
        const response = (await this.bitgo.get(url).result());
        return response.settlements.map((settlement) => new trading_1.Settlement(settlement, this.bitgo, this.enterpriseId));
    }
    /**
     * Retrieves a single settlement by its ID.
     * @param id ID of the settlement
     * @param accountId ID of the trading account that the affirmation belongs to
     */
    async get({ id, accountId }) {
        const account = accountId || (this.account && this.account.id);
        if (!account) {
            throw new Error('accountId must be provided in parameters for an enterprise context');
        }
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${account}/settlements/${id}`);
        const response = await this.bitgo.get(url).result();
        return new trading_1.Settlement(response, this.bitgo, this.enterpriseId);
    }
    /**
     * Submits a new settlement for a set of trades.
     * NOTE: This function must be called as tradingAccount.settlements().create(), enterprise.settlements().create() is not a valid call.
     * @param params
     * @param params.requesterAccountId trading account ID that is creating this settlement
     * @param params.payload payload authorizing the movement of funds for the included trades
     * @param params.signature hex-encoded signature of the payload
     * @param params.trades list of trades to settle as part of this settlement
     */
    async create(params) {
        if (!this.account) {
            throw new Error('Must select a trading account before creating a settlement. Try tradingAccount.settlements().create()');
        }
        // payload must be stringified before being passed to API
        const body = Object.assign({}, params);
        body.payload = JSON.stringify(body.payload);
        const url = this.bitgo.microservicesUrl(`/api/trade/v1/enterprise/${this.enterpriseId}/account/${this.account.id}/settlements`);
        const response = await this.bitgo.post(url).send(body).result();
        return new trading_1.Settlement(response, this.bitgo, this.enterpriseId);
    }
}
exports.Settlements = Settlements;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGxlbWVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vdHJhZGluZy9zZXR0bGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSx3Q0FBdUg7QUFFdkgsTUFBYSxXQUFXO0lBS3RCLFlBQVksS0FBZ0IsRUFBRSxZQUFvQixFQUFFLE9BQXdCO1FBQzFFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxJQUFJO1FBQ1IsSUFBSSxHQUFHLENBQUM7UUFDUixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQy9CLDRCQUE0QixJQUFJLENBQUMsWUFBWSxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxjQUFjLENBQ3ZGLENBQUM7U0FDSDthQUFNO1lBQ0wsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLElBQUksQ0FBQyxZQUFZLGNBQWMsQ0FBQyxDQUFDO1NBQ2hHO1FBQ0QsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFRLENBQUM7UUFFN0QsT0FBTyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxvQkFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQWM7UUFDckMsTUFBTSxPQUFPLEdBQUcsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLG9FQUFvRSxDQUFDLENBQUM7U0FDdkY7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUNyQyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksWUFBWSxPQUFPLGdCQUFnQixFQUFFLEVBQUUsQ0FDckYsQ0FBQztRQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEQsT0FBTyxJQUFJLG9CQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBOEI7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FDYix1R0FBdUcsQ0FDeEcsQ0FBQztTQUNIO1FBRUQseURBQXlEO1FBQ3pELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQWEsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDckMsNEJBQTRCLElBQUksQ0FBQyxZQUFZLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGNBQWMsQ0FDdkYsQ0FBQztRQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWhFLE9BQU8sSUFBSSxvQkFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqRSxDQUFDO0NBQ0Y7QUF6RUQsa0NBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgQml0R29CYXNlIH0gZnJvbSAnLi4vYml0Z29CYXNlJztcbmltcG9ydCB7IENyZWF0ZVNldHRsZW1lbnRQYXJhbXMsIEdldE9wdGlvbnMsIElTZXR0bGVtZW50LCBJU2V0dGxlbWVudHMsIFNldHRsZW1lbnQsIFRyYWRpbmdBY2NvdW50IH0gZnJvbSAnLi4vdHJhZGluZyc7XG5cbmV4cG9ydCBjbGFzcyBTZXR0bGVtZW50cyBpbXBsZW1lbnRzIElTZXR0bGVtZW50cyB7XG4gIHByaXZhdGUgYml0Z286IEJpdEdvQmFzZTtcbiAgcHJpdmF0ZSBlbnRlcnByaXNlSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBhY2NvdW50PzogVHJhZGluZ0FjY291bnQ7XG5cbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvQmFzZSwgZW50ZXJwcmlzZUlkOiBzdHJpbmcsIGFjY291bnQ/OiBUcmFkaW5nQWNjb3VudCkge1xuICAgIHRoaXMuYml0Z28gPSBiaXRnbztcbiAgICB0aGlzLmVudGVycHJpc2VJZCA9IGVudGVycHJpc2VJZDtcbiAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbGwgc2V0dGxlbWVudHMgZm9yIGFuIGVudGVycHJpc2VcbiAgICovXG4gIGFzeW5jIGxpc3QoKTogUHJvbWlzZTxTZXR0bGVtZW50W10+IHtcbiAgICBsZXQgdXJsO1xuICAgIGlmICh0aGlzLmFjY291bnQpIHtcbiAgICAgIHVybCA9IHRoaXMuYml0Z28ubWljcm9zZXJ2aWNlc1VybChcbiAgICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3RoaXMuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7dGhpcy5hY2NvdW50LmlkfS9zZXR0bGVtZW50c2BcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybCA9IHRoaXMuYml0Z28ubWljcm9zZXJ2aWNlc1VybChgL2FwaS90cmFkZS92MS9lbnRlcnByaXNlLyR7dGhpcy5lbnRlcnByaXNlSWR9L3NldHRsZW1lbnRzYCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IHRoaXMuYml0Z28uZ2V0KHVybCkucmVzdWx0KCkpIGFzIGFueTtcblxuICAgIHJldHVybiByZXNwb25zZS5zZXR0bGVtZW50cy5tYXAoKHNldHRsZW1lbnQpID0+IG5ldyBTZXR0bGVtZW50KHNldHRsZW1lbnQsIHRoaXMuYml0Z28sIHRoaXMuZW50ZXJwcmlzZUlkKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgc2luZ2xlIHNldHRsZW1lbnQgYnkgaXRzIElELlxuICAgKiBAcGFyYW0gaWQgSUQgb2YgdGhlIHNldHRsZW1lbnRcbiAgICogQHBhcmFtIGFjY291bnRJZCBJRCBvZiB0aGUgdHJhZGluZyBhY2NvdW50IHRoYXQgdGhlIGFmZmlybWF0aW9uIGJlbG9uZ3MgdG9cbiAgICovXG4gIGFzeW5jIGdldCh7IGlkLCBhY2NvdW50SWQgfTogR2V0T3B0aW9ucyk6IFByb21pc2U8SVNldHRsZW1lbnQ+IHtcbiAgICBjb25zdCBhY2NvdW50ID0gYWNjb3VudElkIHx8ICh0aGlzLmFjY291bnQgJiYgdGhpcy5hY2NvdW50LmlkKTtcbiAgICBpZiAoIWFjY291bnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWNjb3VudElkIG11c3QgYmUgcHJvdmlkZWQgaW4gcGFyYW1ldGVycyBmb3IgYW4gZW50ZXJwcmlzZSBjb250ZXh0Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsID0gdGhpcy5iaXRnby5taWNyb3NlcnZpY2VzVXJsKFxuICAgICAgYC9hcGkvdHJhZGUvdjEvZW50ZXJwcmlzZS8ke3RoaXMuZW50ZXJwcmlzZUlkfS9hY2NvdW50LyR7YWNjb3VudH0vc2V0dGxlbWVudHMvJHtpZH1gXG4gICAgKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYml0Z28uZ2V0KHVybCkucmVzdWx0KCk7XG4gICAgcmV0dXJuIG5ldyBTZXR0bGVtZW50KHJlc3BvbnNlLCB0aGlzLmJpdGdvLCB0aGlzLmVudGVycHJpc2VJZCk7XG4gIH1cblxuICAvKipcbiAgICogU3VibWl0cyBhIG5ldyBzZXR0bGVtZW50IGZvciBhIHNldCBvZiB0cmFkZXMuXG4gICAqIE5PVEU6IFRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgYXMgdHJhZGluZ0FjY291bnQuc2V0dGxlbWVudHMoKS5jcmVhdGUoKSwgZW50ZXJwcmlzZS5zZXR0bGVtZW50cygpLmNyZWF0ZSgpIGlzIG5vdCBhIHZhbGlkIGNhbGwuXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICogQHBhcmFtIHBhcmFtcy5yZXF1ZXN0ZXJBY2NvdW50SWQgdHJhZGluZyBhY2NvdW50IElEIHRoYXQgaXMgY3JlYXRpbmcgdGhpcyBzZXR0bGVtZW50XG4gICAqIEBwYXJhbSBwYXJhbXMucGF5bG9hZCBwYXlsb2FkIGF1dGhvcml6aW5nIHRoZSBtb3ZlbWVudCBvZiBmdW5kcyBmb3IgdGhlIGluY2x1ZGVkIHRyYWRlc1xuICAgKiBAcGFyYW0gcGFyYW1zLnNpZ25hdHVyZSBoZXgtZW5jb2RlZCBzaWduYXR1cmUgb2YgdGhlIHBheWxvYWRcbiAgICogQHBhcmFtIHBhcmFtcy50cmFkZXMgbGlzdCBvZiB0cmFkZXMgdG8gc2V0dGxlIGFzIHBhcnQgb2YgdGhpcyBzZXR0bGVtZW50XG4gICAqL1xuICBhc3luYyBjcmVhdGUocGFyYW1zOiBDcmVhdGVTZXR0bGVtZW50UGFyYW1zKTogUHJvbWlzZTxTZXR0bGVtZW50PiB7XG4gICAgaWYgKCF0aGlzLmFjY291bnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ011c3Qgc2VsZWN0IGEgdHJhZGluZyBhY2NvdW50IGJlZm9yZSBjcmVhdGluZyBhIHNldHRsZW1lbnQuIFRyeSB0cmFkaW5nQWNjb3VudC5zZXR0bGVtZW50cygpLmNyZWF0ZSgpJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBwYXlsb2FkIG11c3QgYmUgc3RyaW5naWZpZWQgYmVmb3JlIGJlaW5nIHBhc3NlZCB0byBBUElcbiAgICBjb25zdCBib2R5ID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zIGFzIGFueSk7XG4gICAgYm9keS5wYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoYm9keS5wYXlsb2FkKTtcblxuICAgIGNvbnN0IHVybCA9IHRoaXMuYml0Z28ubWljcm9zZXJ2aWNlc1VybChcbiAgICAgIGAvYXBpL3RyYWRlL3YxL2VudGVycHJpc2UvJHt0aGlzLmVudGVycHJpc2VJZH0vYWNjb3VudC8ke3RoaXMuYWNjb3VudC5pZH0vc2V0dGxlbWVudHNgXG4gICAgKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYml0Z28ucG9zdCh1cmwpLnNlbmQoYm9keSkucmVzdWx0KCk7XG5cbiAgICByZXR1cm4gbmV3IFNldHRsZW1lbnQocmVzcG9uc2UsIHRoaXMuYml0Z28sIHRoaXMuZW50ZXJwcmlzZUlkKTtcbiAgfVxufVxuIl19