"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Markets = void 0;
/**
 * Markets Object
 * BitGo accessor to Bitcoin market data.
 *
 * Copyright 2022, BitGo, Inc.  All Rights Reserved.
 *
 * @prettier
 */
const common = __importStar(require("../../common"));
class Markets {
    constructor(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    /**
     * Get the latest price data
     * @param params {}
     * @returns {*} an object containing price and volume data from the
     * current day in a number of currencies
     **/
    async latest(params) {
        return await this.bitgo.get(this.baseCoin.url('/market/latest')).result();
    }
    /**
     * Get yesterday's price data
     * @param params {}
     * @returns {*} an object containing price and volume data from the
     * previous day in a number of currencies
     */
    async yesterday(params) {
        return await this.bitgo.get(this.baseCoin.url('/market/yesterday')).result();
    }
    /**
     * Get price data from up to 90 days prior to today
     * @param params { currencyName: the code for the desired currency, for example USD }
     * @returns {*} an object containing average prices from a number of previous days
     */
    async lastDays(params) {
        common.validateParams(params, ['currencyName'], []);
        const days = params.days && !isNaN(parseInt(params.days, 10)) ? parseInt(params.days, 10) : 90;
        if (days && days < 0) {
            throw new Error('must use a non-negative number of days');
        }
        return this.bitgo.get(this.baseCoin.url('/market/last/' + days + '/' + params.currencyName)).result();
    }
}
exports.Markets = Markets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby9tYXJrZXQvbWFya2V0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7R0FPRztBQUNILHFEQUF1QztBQUt2QyxNQUFhLE9BQU87SUFJbEIsWUFBbUIsS0FBZ0IsRUFBRSxRQUFtQjtRQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7O1FBS0k7SUFDSixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQXFCO1FBQ2hDLE9BQU8sTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUF3QjtRQUN0QyxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQy9FLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUF1QjtRQUNwQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXBELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUUvRixJQUFJLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztTQUMzRDtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDeEcsQ0FBQztDQUNGO0FBN0NELDBCQTZDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFya2V0cyBPYmplY3RcbiAqIEJpdEdvIGFjY2Vzc29yIHRvIEJpdGNvaW4gbWFya2V0IGRhdGEuXG4gKlxuICogQ29weXJpZ2h0IDIwMjIsIEJpdEdvLCBJbmMuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBwcmV0dGllclxuICovXG5pbXBvcnQgKiBhcyBjb21tb24gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IElCYXNlQ29pbiB9IGZyb20gJy4uL2Jhc2VDb2luJztcbmltcG9ydCB7IEJpdEdvQmFzZSB9IGZyb20gJy4uL2JpdGdvQmFzZSc7XG5pbXBvcnQgeyBJTWFya2V0cywgTGFzdERheXNPcHRpb25zLCBMYXRlc3RPcHRpb25zLCBZZXN0ZXJkYXlPcHRpb25zIH0gZnJvbSAnLi4vbWFya2V0JztcblxuZXhwb3J0IGNsYXNzIE1hcmtldHMgaW1wbGVtZW50cyBJTWFya2V0cyB7XG4gIHByaXZhdGUgcmVhZG9ubHkgYml0Z286IEJpdEdvQmFzZTtcbiAgcHJpdmF0ZSByZWFkb25seSBiYXNlQ29pbjogSUJhc2VDb2luO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihiaXRnbzogQml0R29CYXNlLCBiYXNlQ29pbjogSUJhc2VDb2luKSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuYmFzZUNvaW4gPSBiYXNlQ29pbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxhdGVzdCBwcmljZSBkYXRhXG4gICAqIEBwYXJhbSBwYXJhbXMge31cbiAgICogQHJldHVybnMgeyp9IGFuIG9iamVjdCBjb250YWluaW5nIHByaWNlIGFuZCB2b2x1bWUgZGF0YSBmcm9tIHRoZVxuICAgKiBjdXJyZW50IGRheSBpbiBhIG51bWJlciBvZiBjdXJyZW5jaWVzXG4gICAqKi9cbiAgYXN5bmMgbGF0ZXN0KHBhcmFtczogTGF0ZXN0T3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYml0Z28uZ2V0KHRoaXMuYmFzZUNvaW4udXJsKCcvbWFya2V0L2xhdGVzdCcpKS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgeWVzdGVyZGF5J3MgcHJpY2UgZGF0YVxuICAgKiBAcGFyYW0gcGFyYW1zIHt9XG4gICAqIEByZXR1cm5zIHsqfSBhbiBvYmplY3QgY29udGFpbmluZyBwcmljZSBhbmQgdm9sdW1lIGRhdGEgZnJvbSB0aGVcbiAgICogcHJldmlvdXMgZGF5IGluIGEgbnVtYmVyIG9mIGN1cnJlbmNpZXNcbiAgICovXG4gIGFzeW5jIHllc3RlcmRheShwYXJhbXM6IFllc3RlcmRheU9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmJpdGdvLmdldCh0aGlzLmJhc2VDb2luLnVybCgnL21hcmtldC95ZXN0ZXJkYXknKSkucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHByaWNlIGRhdGEgZnJvbSB1cCB0byA5MCBkYXlzIHByaW9yIHRvIHRvZGF5XG4gICAqIEBwYXJhbSBwYXJhbXMgeyBjdXJyZW5jeU5hbWU6IHRoZSBjb2RlIGZvciB0aGUgZGVzaXJlZCBjdXJyZW5jeSwgZm9yIGV4YW1wbGUgVVNEIH1cbiAgICogQHJldHVybnMgeyp9IGFuIG9iamVjdCBjb250YWluaW5nIGF2ZXJhZ2UgcHJpY2VzIGZyb20gYSBudW1iZXIgb2YgcHJldmlvdXMgZGF5c1xuICAgKi9cbiAgYXN5bmMgbGFzdERheXMocGFyYW1zOiBMYXN0RGF5c09wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbW1vbi52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIFsnY3VycmVuY3lOYW1lJ10sIFtdKTtcblxuICAgIGNvbnN0IGRheXMgPSBwYXJhbXMuZGF5cyAmJiAhaXNOYU4ocGFyc2VJbnQocGFyYW1zLmRheXMsIDEwKSkgPyBwYXJzZUludChwYXJhbXMuZGF5cywgMTApIDogOTA7XG5cbiAgICBpZiAoZGF5cyAmJiBkYXlzIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHVzZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIgb2YgZGF5cycpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJpdGdvLmdldCh0aGlzLmJhc2VDb2luLnVybCgnL21hcmtldC9sYXN0LycgKyBkYXlzICsgJy8nICsgcGFyYW1zLmN1cnJlbmN5TmFtZSkpLnJlc3VsdCgpO1xuICB9XG59XG4iXX0=