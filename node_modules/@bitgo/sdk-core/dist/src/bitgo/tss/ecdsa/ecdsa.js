"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyWalletSignature = exports.getParticipantFromIndex = exports.getParticipantIndex = exports.parseOShare = exports.convertOShare = exports.parseBShare = exports.convertBShare = exports.convertSignatureShare = exports.parseCombinedSignature = exports.convertCombinedSignature = exports.parseSignatureShare = exports.convertSDShare = exports.parseSDShare = exports.convertDShare = exports.parseDShare = exports.convertMuShare = exports.parseMuShare = exports.convertAShare = exports.parseAShare = exports.convertKShare = exports.parseKShare = exports.secondaryDelimeter = exports.delimeter = exports.getPublicKey = exports.decryptNShare = exports.buildNShareFromAPIKeyShare = exports.encryptNShare = exports.getBitgoToUserLatestShare = exports.sendShareToBitgo = exports.createUserSignatureShare = exports.createUserOmicronAndDeltaShare = exports.createUserGammaAndMuShare = exports.createUserSignShare = exports.createCombinedKey = void 0;
const tss_1 = require("./../../../account-lib/mpc/tss");
const types_1 = require("./types");
const utils_1 = require("../../utils");
const types_2 = require("../types");
const common_1 = require("../common");
const keccak_1 = __importDefault(require("keccak"));
const assert_1 = __importDefault(require("assert"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const pgp = __importStar(require("openpgp"));
const bs58_1 = __importDefault(require("bs58"));
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const MPC = new tss_1.Ecdsa();
/**
 * Combines NShares to combine the final TSS key
 * This can only be used to create the User or Backup key since it requires the common keychain from BitGo first
 *
 * @param keyShare - TSS key share
 * @param encryptedNShares - encrypted NShares with information on how to decrypt
 * @param commonKeychain - expected common keychain of the combined key
 * @returns {CombinedKey} combined TSS key
 */
async function createCombinedKey(keyShare, encryptedNShares, commonKeychain) {
    const nShares = [];
    let bitgoNShare;
    let userNShare;
    let backupNShare;
    for (const encryptedNShare of encryptedNShares) {
        const nShare = await decryptNShare(encryptedNShare, encryptedNShare.isbs58Encoded);
        switch (encryptedNShare.nShare.j) {
            case 1:
                userNShare = nShare;
                break;
            case 2:
                backupNShare = nShare;
                break;
            case 3:
                bitgoNShare = nShare;
                break;
            default:
                throw new Error('Invalid NShare index');
        }
        nShares.push(nShare);
    }
    if (!bitgoNShare) {
        throw new Error('Missing BitGo N Share');
    }
    const combinedKey = MPC.keyCombine(keyShare.pShare, nShares);
    if (combinedKey.xShare.y + combinedKey.xShare.chaincode !== commonKeychain) {
        throw new Error('Common keychains do not match');
    }
    const signingMaterial = {
        pShare: keyShare.pShare,
        bitgoNShare,
        backupNShare,
        userNShare,
    };
    return {
        signingMaterial,
        commonKeychain,
    };
}
exports.createCombinedKey = createCombinedKey;
/**
 * Creates the SignShare with User XShare and YShare Corresponding to BitGo
 * @param {XShare} xShare User secret xShare
 * @param {YShare} yShare YShare from Bitgo
 * @returns {Promise<SignShare>}
 */
async function createUserSignShare(xShare, yShare) {
    if (xShare.i !== types_2.ShareKeyPosition.USER) {
        throw new Error(`Invalid XShare, XShare doesn't belong to the User`);
    }
    if (yShare.i !== types_2.ShareKeyPosition.USER || yShare.j !== types_2.ShareKeyPosition.BITGO) {
        throw new Error('Invalid YShare provided for sign');
    }
    return await MPC.signShare(xShare, yShare);
}
exports.createUserSignShare = createUserSignShare;
/**
 * Creates the Gamma Share and MuShare with User WShare and AShare From BitGo
 * @param {WShare} wShare User WShare
 * @param {AShare} aShare AShare from Bitgo
 * @returns {Promise<SignConvertStep2Response>}
 */
async function createUserGammaAndMuShare(wShare, aShare) {
    if (wShare.i !== types_2.ShareKeyPosition.USER) {
        throw new Error(`Invalid WShare, doesn't belong to the User`);
    }
    if (aShare.i !== types_2.ShareKeyPosition.USER || aShare.j !== types_2.ShareKeyPosition.BITGO) {
        throw new Error('Invalid AShare, is not from Bitgo to User');
    }
    return MPC.signConvertStep2({ wShare, aShare });
}
exports.createUserGammaAndMuShare = createUserGammaAndMuShare;
/**
 * Creates the Omicron Share and Delta share with user GShare
 * @param {GShare} gShare User GShare
 * @returns {Promise<CreateUserOmicronAndDeltaShareRT>}
 */
async function createUserOmicronAndDeltaShare(gShare) {
    if (gShare.i !== types_2.ShareKeyPosition.USER) {
        throw new Error(`Invalid GShare, doesn't belong to the User`);
    }
    return MPC.signCombine({
        gShare: gShare,
        signIndex: {
            i: types_2.ShareKeyPosition.BITGO,
            j: gShare.i,
        },
    });
}
exports.createUserOmicronAndDeltaShare = createUserOmicronAndDeltaShare;
/**
 * Creates the Signature Share with User OShare and DShare From BitGo
 * @param {OShare} oShare User OShare
 * @param {DShare} dShare DShare from bitgo
 * @param {Buffer} message message to perform sign
 * @returns {Promise<createUserSignShareRT>}
 */
async function createUserSignatureShare(oShare, dShare, message, hash = keccak_1.default('keccak256')) {
    if (oShare.i !== types_2.ShareKeyPosition.USER) {
        throw new Error(`Invalid OShare, doesn't belong to the User`);
    }
    if (dShare.i !== types_2.ShareKeyPosition.USER || dShare.j !== types_2.ShareKeyPosition.BITGO) {
        throw new Error(`Invalid DShare, doesn't seem to be from BitGo`);
    }
    return MPC.sign(message, oShare, dShare, hash);
}
exports.createUserSignatureShare = createUserSignatureShare;
/**
 * Sends Share To Bitgo
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id  *
 * @param {String} txRequestId - the txRequest Id
 * @param requestType - the type of request being submitted (either tx or message for signing)
 * @param shareType
 * @param share
 * @param signerShare
 * @param vssProof - the v value of the share
 * @param privateShareProof - the uSig of the share
 * @param publicShare - the y value of the share
 * @param userPublicGpgKey - the public key of the gpg key used for creating the privateShareProof
 * @returns {Promise<SignatureShareRecord>} - a Signature Share
 */
async function sendShareToBitgo(bitgo, walletId, txRequestId, requestType, shareType, share, signerShare, vssProof, privateShareProof, publicShare, userPublicGpgKey) {
    if (shareType !== types_1.SendShareType.SShare && share.i !== types_2.ShareKeyPosition.BITGO) {
        throw new Error('Invalid Share, is not from User to Bitgo');
    }
    let signatureShare;
    let responseFromBitgo;
    switch (shareType) {
        case types_1.SendShareType.KShare:
            assert_1.default(signerShare, `signer share must be present`);
            const kShare = share;
            signatureShare = convertKShare(kShare);
            signatureShare.vssProof = vssProof;
            signatureShare.publicShare = publicShare;
            signatureShare.privateShareProof = privateShareProof;
            await common_1.sendSignatureShare(bitgo, walletId, txRequestId, signatureShare, requestType, signerShare, 'ecdsa', 'full', userPublicGpgKey);
            responseFromBitgo = await getBitgoToUserLatestShare(bitgo, walletId, txRequestId, types_1.ReceivedShareType.AShare, requestType);
            break;
        case types_1.SendShareType.MUShare:
            const shareToSend = share;
            const muShareRecord = convertMuShare(shareToSend.muShare);
            const dShareRecord = convertDShare(shareToSend.dShare);
            signatureShare = {
                to: utils_1.SignatureShareType.BITGO,
                from: getParticipantFromIndex(shareToSend.dShare.j),
                share: `${muShareRecord.share}${exports.secondaryDelimeter}${dShareRecord.share}`,
            };
            await common_1.sendSignatureShare(bitgo, walletId, txRequestId, signatureShare, requestType, signerShare, 'ecdsa');
            responseFromBitgo = await getBitgoToUserLatestShare(bitgo, walletId, txRequestId, types_1.ReceivedShareType.DShare, requestType);
            break;
        case types_1.SendShareType.SShare:
            const sShare = share;
            signatureShare = convertSignatureShare(sShare, 1, 3);
            await common_1.sendSignatureShare(bitgo, walletId, txRequestId, signatureShare, requestType, signerShare, 'ecdsa');
            responseFromBitgo = sShare;
            break;
        default:
            throw new Error('Invalid Share given to send');
    }
    return responseFromBitgo;
}
exports.sendShareToBitgo = sendShareToBitgo;
/**
 * Gets the latest user's share from bitgo needed to continue signing flow
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id  *
 * @param {String} txRequestId - the txRequest Id
 * @param {ReceivedShareType} shareType - the excpected share type
 * @returns {Promise<SendShareToBitgoRT>} - share from bitgo to user
 */
async function getBitgoToUserLatestShare(bitgo, walletId, txRequestId, shareType, requestType) {
    let responseFromBitgo;
    const txRequest = await common_1.getTxRequest(bitgo, walletId, txRequestId);
    let userShares;
    switch (requestType) {
        case utils_1.RequestType.tx:
            assert_1.default(txRequest.transactions, 'transactions required as part of txRequest');
            userShares = txRequest.transactions[0].signatureShares;
            break;
        case utils_1.RequestType.message:
            assert_1.default(txRequest.messages, 'messages required as part of txRequest');
            userShares = txRequest.messages[0].signatureShares;
            break;
    }
    if (!userShares || !userShares.length) {
        throw new Error('user share is not present');
    }
    const shareRecord = userShares[userShares.length - 1];
    switch (shareType) {
        case types_1.ReceivedShareType.AShare:
            responseFromBitgo = parseAShare(shareRecord);
            break;
        case types_1.ReceivedShareType.DShare:
            responseFromBitgo = parseDShare(shareRecord);
            break;
        case types_1.ReceivedShareType.Signature:
            responseFromBitgo = parseSignatureShare(shareRecord);
            break;
        default:
            throw new Error('Invalid share received');
    }
    return responseFromBitgo;
}
exports.getBitgoToUserLatestShare = getBitgoToUserLatestShare;
/**
 * Prepares a NShare to be exchanged with other key holders.
 * Output is in a format that is usable within BitGo's ecosystem.
 *
 * @param keyShare - TSS key share of the party preparing exchange materials
 * @param recipientIndex - index of the recipient (1, 2, or 3)
 * @param recipientGpgPublicArmor - recipient's public gpg key in armor format
 * @param senderGpgKey - ephemeral GPG key to encrypt / decrypt sensitve data exchanged between user and server
 * @param isbs58Encoded - is bs58 encoded or not
 * @returns encrypted N Share
 */
async function encryptNShare(keyShare, recipientIndex, recipientGpgPublicArmor, senderGpgKey, isbs58Encoded = true) {
    const nShare = keyShare.nShares[recipientIndex];
    if (!nShare) {
        throw new Error('Invalid recipient');
    }
    const publicShare = Buffer.concat([
        Buffer.from(keyShare.pShare.y, 'hex'),
        Buffer.from(keyShare.pShare.chaincode, 'hex'),
    ]).toString('hex');
    let privateShare;
    if (isbs58Encoded) {
        privateShare = utxo_lib_1.bip32.fromPrivateKey(Buffer.from(nShare.u, 'hex'), Buffer.from(nShare.chaincode, 'hex')).toBase58();
    }
    else {
        privateShare = Buffer.concat([Buffer.from(nShare.u, 'hex'), Buffer.from(nShare.chaincode, 'hex')]).toString('hex');
    }
    const recipientPublicKey = await pgp.readKey({ armoredKey: recipientGpgPublicArmor });
    const encryptedPrivateShare = (await pgp.encrypt({
        message: await pgp.createMessage({
            text: privateShare,
        }),
        encryptionKeys: [recipientPublicKey],
    }));
    return {
        i: nShare.i,
        j: nShare.j,
        publicShare,
        encryptedPrivateShare,
        n: nShare.n,
        vssProof: nShare.v,
        privateShareProof: await utils_1.createShareProof(senderGpgKey.privateKey, nShare.u, 'ecdsa'),
    };
}
exports.encryptNShare = encryptNShare;
/**
 * Prepares a NShare to be exchanged with other key holders.
 * An API key share received from a third party should already be encrypted
 *
 * @param keyShare - TSS key share of the party preparing exchange materials
 * @returns encrypted N Share
 */
async function buildNShareFromAPIKeyShare(keyShare) {
    var _a;
    return {
        i: getParticipantIndex(keyShare.to),
        j: getParticipantIndex(keyShare.from),
        publicShare: keyShare.publicShare,
        encryptedPrivateShare: keyShare.privateShare,
        n: (_a = keyShare.n) !== null && _a !== void 0 ? _a : '',
        privateShareProof: keyShare.privateShareProof,
        vssProof: keyShare.vssProof,
    };
}
exports.buildNShareFromAPIKeyShare = buildNShareFromAPIKeyShare;
/**
 * Decrypts encrypted n share
 * @param encryptedNShare - decryptable n share with recipient private gpg key armor and sender public gpg key
 * @param isbs58Encoded
 * @returns N share
 */
async function decryptNShare(encryptedNShare, isbs58Encoded = true) {
    const recipientPrivateKey = await pgp.readKey({ armoredKey: encryptedNShare.recipientPrivateArmor });
    const prv = (await pgp.decrypt({
        message: await pgp.readMessage({ armoredMessage: encryptedNShare.nShare.encryptedPrivateShare }),
        decryptionKeys: [recipientPrivateKey],
    })).data;
    let u;
    if (isbs58Encoded) {
        const privateShare = bs58_1.default.decode(prv).toString('hex');
        u = privateShare.slice(92, 156);
    }
    else {
        u = prv.slice(0, 64);
    }
    return {
        i: encryptedNShare.nShare.i,
        j: encryptedNShare.nShare.j,
        n: encryptedNShare.nShare.n,
        y: encryptedNShare.nShare.publicShare.slice(0, 66),
        u: u,
        chaincode: encryptedNShare.nShare.publicShare.slice(66, 130),
        v: encryptedNShare.nShare.vssProof,
    };
}
exports.decryptNShare = decryptNShare;
/**
 * Gets public key from common keychain
 * @param commonKeyChain - common keychain of ecdsa tss
 * @returns public key
 */
function getPublicKey(commonKeyChain) {
    return commonKeyChain.slice(0, 66);
}
exports.getPublicKey = getPublicKey;
exports.delimeter = ':';
exports.secondaryDelimeter = '-';
function validateSharesLength(shares, expectedLength, shareName) {
    if (shares.length < expectedLength) {
        throw new Error(`Invalid ${shareName} share`);
    }
}
function validateOptionalValues(shares, start, end, shareName, valueName) {
    let found = false;
    for (let i = start; i < end; i++) {
        if (shares[i]) {
            found = true;
        }
        else if (found) {
            throw new Error(`Inconsistent optional ${valueName} value in ${shareName} share`);
        }
    }
    return found;
}
/**
 * parses K share from signature share record
 * @param share - signature share record
 * @returns K Share
 */
function parseKShare(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 11 + 2 * sdk_lib_mpc_1.EcdsaPaillierProof.m, 'K');
    const hasProof = validateOptionalValues(shares, 5, 11, 'K', 'proof');
    const proof = hasProof
        ? {
            z: shares[5],
            u: shares[6],
            w: shares[7],
            s: shares[8],
            s1: shares[9],
            s2: shares[10],
        }
        : undefined;
    return {
        i: getParticipantIndex(share.to),
        j: getParticipantIndex(share.from),
        k: shares[0],
        n: shares[1],
        ntilde: shares[2],
        h1: shares[3],
        h2: shares[4],
        proof,
        p: shares.slice(11, 11 + sdk_lib_mpc_1.EcdsaPaillierProof.m),
        sigma: shares.slice(11 + sdk_lib_mpc_1.EcdsaPaillierProof.m, 11 + 2 * sdk_lib_mpc_1.EcdsaPaillierProof.m),
    };
}
exports.parseKShare = parseKShare;
/**
 * convert K share to signature share record
 * @param share - K share
 * @returns signature share record
 */
function convertKShare(share) {
    var _a, _b, _c, _d, _e, _f;
    return {
        to: getParticipantFromIndex(share.i),
        from: getParticipantFromIndex(share.j),
        share: `${share.k}${exports.delimeter}${share.n}${exports.delimeter}${share.ntilde}${exports.delimeter}${share.h1}${exports.delimeter}${share.h2}${exports.delimeter}${((_a = share.proof) === null || _a === void 0 ? void 0 : _a.z) || ''}${exports.delimeter}${((_b = share.proof) === null || _b === void 0 ? void 0 : _b.u) || ''}${exports.delimeter}${((_c = share.proof) === null || _c === void 0 ? void 0 : _c.w) || ''}${exports.delimeter}${((_d = share.proof) === null || _d === void 0 ? void 0 : _d.s) || ''}${exports.delimeter}${((_e = share.proof) === null || _e === void 0 ? void 0 : _e.s1) || ''}${exports.delimeter}${((_f = share.proof) === null || _f === void 0 ? void 0 : _f.s2) || ''}${exports.delimeter}${(share.p || []).join(exports.delimeter)}${exports.delimeter}${(share.sigma || []).join(exports.delimeter)}`,
    };
}
exports.convertKShare = convertKShare;
/**
 * parses A share from signature share record
 * @param share - signature share record
 * @returns A Share
 */
function parseAShare(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 37 + sdk_lib_mpc_1.EcdsaPaillierProof.m, 'A');
    const hasProof = validateOptionalValues(shares, 7, 13, 'A', 'proof');
    const hasGammaProof = validateOptionalValues(shares, 13, 25, 'A', 'gammaProof');
    const hasWProof = validateOptionalValues(shares, 25, 37, 'A', 'wProof');
    const proof = hasProof
        ? {
            z: shares[7],
            u: shares[8],
            w: shares[9],
            s: shares[10],
            s1: shares[11],
            s2: shares[12],
        }
        : undefined;
    const gammaProof = hasGammaProof
        ? {
            z: shares[13],
            zprm: shares[14],
            t: shares[15],
            v: shares[16],
            w: shares[17],
            s: shares[18],
            s1: shares[19],
            s2: shares[20],
            t1: shares[21],
            t2: shares[22],
            u: shares[23],
            x: shares[24],
        }
        : undefined;
    const wProof = hasWProof
        ? {
            z: shares[25],
            zprm: shares[26],
            t: shares[27],
            v: shares[28],
            w: shares[29],
            s: shares[30],
            s1: shares[31],
            s2: shares[32],
            t1: shares[33],
            t2: shares[34],
            u: shares[35],
            x: shares[36],
        }
        : undefined;
    return {
        i: getParticipantIndex(share.to),
        j: getParticipantIndex(share.from),
        k: shares[0],
        alpha: shares[1],
        mu: shares[2],
        n: shares[3],
        ntilde: shares[4],
        h1: shares[5],
        h2: shares[6],
        proof,
        gammaProof,
        wProof,
        sigma: shares.slice(37),
    };
}
exports.parseAShare = parseAShare;
/**
 * convert A share to signature share record
 * @param share - A share
 * @returns signature share record
 */
function convertAShare(share) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
    return {
        to: getParticipantFromIndex(share.i),
        from: getParticipantFromIndex(share.j),
        share: `${share.k}${exports.delimeter}${share.alpha}${exports.delimeter}${share.mu}${exports.delimeter}${share.n}${exports.delimeter}${share.ntilde}${exports.delimeter}${share.h1}${exports.delimeter}${share.h2}${exports.delimeter}${((_a = share.proof) === null || _a === void 0 ? void 0 : _a.z) || ''}${exports.delimeter}${((_b = share.proof) === null || _b === void 0 ? void 0 : _b.u) || ''}${exports.delimeter}${((_c = share.proof) === null || _c === void 0 ? void 0 : _c.w) || ''}${exports.delimeter}${((_d = share.proof) === null || _d === void 0 ? void 0 : _d.s) || ''}${exports.delimeter}${((_e = share.proof) === null || _e === void 0 ? void 0 : _e.s1) || ''}${exports.delimeter}${((_f = share.proof) === null || _f === void 0 ? void 0 : _f.s2) || ''}${exports.delimeter}${((_g = share.gammaProof) === null || _g === void 0 ? void 0 : _g.z) || ''}${exports.delimeter}${((_h = share.gammaProof) === null || _h === void 0 ? void 0 : _h.zprm) || ''}${exports.delimeter}${((_j = share.gammaProof) === null || _j === void 0 ? void 0 : _j.t) || ''}${exports.delimeter}${((_k = share.gammaProof) === null || _k === void 0 ? void 0 : _k.v) || ''}${exports.delimeter}${((_l = share.gammaProof) === null || _l === void 0 ? void 0 : _l.w) || ''}${exports.delimeter}${((_m = share.gammaProof) === null || _m === void 0 ? void 0 : _m.s) || ''}${exports.delimeter}${((_o = share.gammaProof) === null || _o === void 0 ? void 0 : _o.s1) || ''}${exports.delimeter}${((_p = share.gammaProof) === null || _p === void 0 ? void 0 : _p.s2) || ''}${exports.delimeter}${((_q = share.gammaProof) === null || _q === void 0 ? void 0 : _q.t1) || ''}${exports.delimeter}${((_r = share.gammaProof) === null || _r === void 0 ? void 0 : _r.t2) || ''}${exports.delimeter}${((_s = share.gammaProof) === null || _s === void 0 ? void 0 : _s.u) || ''}${exports.delimeter}${((_t = share.gammaProof) === null || _t === void 0 ? void 0 : _t.x) || ''}${exports.delimeter}${((_u = share.wProof) === null || _u === void 0 ? void 0 : _u.z) || ''}${exports.delimeter}${((_v = share.wProof) === null || _v === void 0 ? void 0 : _v.zprm) || ''}${exports.delimeter}${((_w = share.wProof) === null || _w === void 0 ? void 0 : _w.t) || ''}${exports.delimeter}${((_x = share.wProof) === null || _x === void 0 ? void 0 : _x.v) || ''}${exports.delimeter}${((_y = share.wProof) === null || _y === void 0 ? void 0 : _y.w) || ''}${exports.delimeter}${((_z = share.wProof) === null || _z === void 0 ? void 0 : _z.s) || ''}${exports.delimeter}${((_0 = share.wProof) === null || _0 === void 0 ? void 0 : _0.s1) || ''}${exports.delimeter}${((_1 = share.wProof) === null || _1 === void 0 ? void 0 : _1.s2) || ''}${exports.delimeter}${((_2 = share.wProof) === null || _2 === void 0 ? void 0 : _2.t1) || ''}${exports.delimeter}${((_3 = share.wProof) === null || _3 === void 0 ? void 0 : _3.t2) || ''}${exports.delimeter}${((_4 = share.wProof) === null || _4 === void 0 ? void 0 : _4.u) || ''}${exports.delimeter}${((_5 = share.wProof) === null || _5 === void 0 ? void 0 : _5.x) || ''}${exports.delimeter}${(share.sigma || []).join(exports.delimeter)}`,
    };
}
exports.convertAShare = convertAShare;
/**
 * parses Mu share from signature share record
 * @param share - signature share record
 * @returns Mu Share
 */
function parseMuShare(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 26, 'Mu');
    const hasGammaProof = validateOptionalValues(shares, 2, 14, 'Mu', 'gammaProof');
    const hasWProof = validateOptionalValues(shares, 14, 26, 'Mu', 'wProof');
    let gammaProof;
    if (hasGammaProof) {
        gammaProof = {
            z: shares[2],
            zprm: shares[3],
            t: shares[4],
            v: shares[5],
            w: shares[6],
            s: shares[7],
            s1: shares[8],
            s2: shares[9],
            t1: shares[10],
            t2: shares[11],
            u: shares[12],
            x: shares[13],
        };
    }
    let wProof;
    if (hasWProof) {
        wProof = {
            z: shares[14],
            zprm: shares[15],
            t: shares[16],
            v: shares[17],
            w: shares[18],
            s: shares[19],
            s1: shares[20],
            s2: shares[21],
            t1: shares[22],
            t2: shares[23],
            u: shares[24],
            x: shares[25],
        };
    }
    return {
        i: getParticipantIndex(share.to),
        j: getParticipantIndex(share.from),
        alpha: shares[0],
        mu: shares[1],
        gammaProof,
        wProof,
    };
}
exports.parseMuShare = parseMuShare;
/**
 * convert Mu share to signature share record
 * @param share - Mu share
 * @returns signature share record
 */
function convertMuShare(share) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
    return {
        to: getParticipantFromIndex(share.i),
        from: getParticipantFromIndex(share.j),
        share: `${share.alpha}${exports.delimeter}${share.mu}${exports.delimeter}${((_a = share.gammaProof) === null || _a === void 0 ? void 0 : _a.z) || ''}${exports.delimeter}${((_b = share.gammaProof) === null || _b === void 0 ? void 0 : _b.zprm) || ''}${exports.delimeter}${((_c = share.gammaProof) === null || _c === void 0 ? void 0 : _c.t) || ''}${exports.delimeter}${((_d = share.gammaProof) === null || _d === void 0 ? void 0 : _d.v) || ''}${exports.delimeter}${((_e = share.gammaProof) === null || _e === void 0 ? void 0 : _e.w) || ''}${exports.delimeter}${((_f = share.gammaProof) === null || _f === void 0 ? void 0 : _f.s) || ''}${exports.delimeter}${((_g = share.gammaProof) === null || _g === void 0 ? void 0 : _g.s1) || ''}${exports.delimeter}${((_h = share.gammaProof) === null || _h === void 0 ? void 0 : _h.s2) || ''}${exports.delimeter}${((_j = share.gammaProof) === null || _j === void 0 ? void 0 : _j.t1) || ''}${exports.delimeter}${((_k = share.gammaProof) === null || _k === void 0 ? void 0 : _k.t2) || ''}${exports.delimeter}${((_l = share.gammaProof) === null || _l === void 0 ? void 0 : _l.u) || ''}${exports.delimeter}${((_m = share.gammaProof) === null || _m === void 0 ? void 0 : _m.x) || ''}${exports.delimeter}${((_o = share.wProof) === null || _o === void 0 ? void 0 : _o.z) || ''}${exports.delimeter}${((_p = share.wProof) === null || _p === void 0 ? void 0 : _p.zprm) || ''}${exports.delimeter}${((_q = share.wProof) === null || _q === void 0 ? void 0 : _q.t) || ''}${exports.delimeter}${((_r = share.wProof) === null || _r === void 0 ? void 0 : _r.v) || ''}${exports.delimeter}${((_s = share.wProof) === null || _s === void 0 ? void 0 : _s.w) || ''}${exports.delimeter}${((_t = share.wProof) === null || _t === void 0 ? void 0 : _t.s) || ''}${exports.delimeter}${((_u = share.wProof) === null || _u === void 0 ? void 0 : _u.s1) || ''}${exports.delimeter}${((_v = share.wProof) === null || _v === void 0 ? void 0 : _v.s2) || ''}${exports.delimeter}${((_w = share.wProof) === null || _w === void 0 ? void 0 : _w.t1) || ''}${exports.delimeter}${((_x = share.wProof) === null || _x === void 0 ? void 0 : _x.t2) || ''}${exports.delimeter}${((_y = share.wProof) === null || _y === void 0 ? void 0 : _y.u) || ''}${exports.delimeter}${((_z = share.wProof) === null || _z === void 0 ? void 0 : _z.x) || ''}`,
    };
}
exports.convertMuShare = convertMuShare;
/**
 * parses D share from signature share record
 * @param share - signature share record
 * @returns D Share
 */
function parseDShare(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 2, 'D');
    return {
        i: getParticipantIndex(share.to),
        j: getParticipantIndex(share.from),
        delta: shares[0],
        Gamma: shares[1],
    };
}
exports.parseDShare = parseDShare;
/**
 * convert D share to signature share record
 * @param share - D share
 * @returns signature share record
 */
function convertDShare(share) {
    return {
        to: getParticipantFromIndex(share.i),
        from: getParticipantFromIndex(share.j),
        share: `${share.delta}${exports.delimeter}${share.Gamma}`,
    };
}
exports.convertDShare = convertDShare;
/**
 * parses S and D share from signature share record
 * @param share - signature share record
 * @returns Object containing S and D Share
 */
function parseSDShare(share) {
    const shares = share.share.split(exports.secondaryDelimeter);
    validateSharesLength(shares, 2, 'SD');
    return {
        sShare: parseSignatureShare({ to: share.to, from: share.from, share: shares[0] }),
        dShare: parseDShare({ to: share.to, from: share.from, share: shares[1] }),
    };
}
exports.parseSDShare = parseSDShare;
/**
 * convert S and D share to signature share record
 * @param share - S and D share in a object
 * @returns signature share record
 */
function convertSDShare(share) {
    return {
        to: getParticipantFromIndex(share.dShare.i),
        from: getParticipantFromIndex(share.dShare.j),
        share: `${share.sShare.R}${exports.delimeter}${share.sShare.s}${exports.delimeter}${share.sShare.y}${exports.secondaryDelimeter}${share.dShare.delta}${exports.delimeter}${share.dShare.Gamma}`,
    };
}
exports.convertSDShare = convertSDShare;
/**
 * parses signature share from signature share record
 * @param share - signature share record
 * @returns Signature Share
 */
function parseSignatureShare(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 3, 'Signature');
    return {
        i: getParticipantIndex(share.to),
        R: shares[0],
        s: shares[1],
        y: shares[2],
    };
}
exports.parseSignatureShare = parseSignatureShare;
/**
 * convets combined signature to signature share record
 * @param signature - combined signature share
 * @param userIndex - user index, either 1 (user) or 2 (backup)
 * @returns signature share record
 */
function convertCombinedSignature(signature, userIndex) {
    return {
        to: utils_1.SignatureShareType.BITGO,
        from: getParticipantFromIndex(userIndex),
        share: `${signature.recid}${exports.delimeter}${signature.r}${exports.delimeter}${signature.s}${exports.delimeter}${signature.y}`,
    };
}
exports.convertCombinedSignature = convertCombinedSignature;
function parseCombinedSignature(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 3, 'Signature');
    return {
        recid: Number(shares[0]),
        r: shares[1],
        s: shares[2],
        y: shares[3],
    };
}
exports.parseCombinedSignature = parseCombinedSignature;
/**
 * convert signature share to signature share record
 * @param share - Signature share
 * @param senderIndex
 * @param recipientIndex
 * @returns signature share record
 */
function convertSignatureShare(share, senderIndex, recipientIndex) {
    return {
        to: getParticipantFromIndex(recipientIndex),
        from: getParticipantFromIndex(senderIndex),
        share: `${share.R}${exports.delimeter}${share.s}${exports.delimeter}${share.y}`,
    };
}
exports.convertSignatureShare = convertSignatureShare;
/**
 * converts B share to signature share record
 * @param share - B share
 * @returns signature share record
 */
function convertBShare(share) {
    return {
        to: utils_1.SignatureShareType.BITGO,
        from: getParticipantFromIndex(share.i),
        share: `${share.beta}${exports.delimeter}${share.gamma}${exports.delimeter}${share.k}${exports.delimeter}${share.nu}${exports.delimeter}${share.w}${exports.delimeter}${share.y}${exports.delimeter}${share.l}${exports.delimeter}${share.m}${exports.delimeter}${share.n}${exports.delimeter}${share.ntilde}${exports.delimeter}${share.h1}${exports.delimeter}${share.h2}${exports.delimeter}${share.ck}${exports.delimeter}${(share.p || []).join(exports.delimeter)}`,
    };
}
exports.convertBShare = convertBShare;
/**
 * parses B share from signature share record
 * @param share B share record
 * @returns B Share
 */
function parseBShare(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 13 + sdk_lib_mpc_1.EcdsaPaillierProof.m, 'B');
    return {
        i: getParticipantIndex(share.to),
        beta: shares[0],
        gamma: shares[1],
        k: shares[2],
        nu: shares[3],
        w: shares[4],
        y: shares[5],
        l: shares[6],
        m: shares[7],
        n: shares[8],
        ntilde: shares[9],
        h1: shares[10],
        h2: shares[11],
        ck: shares[12],
        p: shares.slice(13, 13 + sdk_lib_mpc_1.EcdsaPaillierProof.m),
    };
}
exports.parseBShare = parseBShare;
/**
 * converts O share to signature share record
 * @param share O share
 * @returns signature share record
 */
function convertOShare(share) {
    return {
        to: utils_1.SignatureShareType.BITGO,
        from: getParticipantFromIndex(share.i),
        share: `${share.Gamma}${exports.delimeter}${share.delta}${exports.delimeter}${share.k}${exports.delimeter}${share.omicron}${exports.delimeter}${share.y}`,
    };
}
exports.convertOShare = convertOShare;
/**
 * parses O share from signature share record
 * @param share O share record
 * @returns O Share
 */
function parseOShare(share) {
    const shares = share.share.split(exports.delimeter);
    validateSharesLength(shares, 5, 'O');
    return {
        i: getParticipantIndex(share.to),
        Gamma: shares[0],
        delta: shares[1],
        k: shares[2],
        omicron: shares[3],
        y: shares[4],
    };
}
exports.parseOShare = parseOShare;
/**
 * gets participant index
 * @param participant - participants (user, backup, or bitgo)
 * @returns index (1, 2, 0r 3)
 */
function getParticipantIndex(participant) {
    switch (participant) {
        case 'user':
            return 1;
        case 'backup':
            return 2;
        case 'bitgo':
            return 3;
        default:
            throw Error('Unkown participant');
    }
}
exports.getParticipantIndex = getParticipantIndex;
/**
 * gets participant name by index
 * @param index participant index
 * @returns participant name
 */
function getParticipantFromIndex(index) {
    switch (index) {
        case 1:
            return utils_1.SignatureShareType.USER;
        case 2:
            return utils_1.SignatureShareType.BACKUP;
        case 3:
            return utils_1.SignatureShareType.BITGO;
        default:
            throw new Error(`Unknown participant index ${index}`);
    }
}
exports.getParticipantFromIndex = getParticipantFromIndex;
/**
 * Helper function to verify u-value wallet signatures for the bitgo-user and bitgo-backup shares.
 * @param params
 */
async function verifyWalletSignature(params) {
    const rawNotations = await common_1.commonVerifyWalletSignature(params);
    const publicUValueRawNotationIndex = 2 + params.verifierIndex;
    // Derive public form of u-value
    const publicUValue = utxo_lib_1.ecc.pointFromScalar(Buffer.from(params.decryptedShare.slice(0, 64), 'hex'), true);
    assert_1.default(publicUValue !== null, 'null public u-value');
    // Verify that the u value + chaincode is equal to the proof retrieved from the raw notations
    assert_1.default(Buffer.from(publicUValue).toString('hex') + params.decryptedShare.slice(64) ===
        Buffer.from(rawNotations[publicUValueRawNotationIndex].value).toString(), 'bitgo share mismatch');
}
exports.verifyWalletSignature = verifyWalletSignature;
//# sourceMappingURL=data:application/json;base64,