"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyWalletSignature = exports.getTSSSignature = exports.getInitializedMpcInstance = exports.encryptYShare = exports.sendUserToBitgoGShare = exports.getBitgoToUserRShare = exports.offerUserToBitgoRShare = exports.createUserToBitGoGShare = exports.createUserSignShare = exports.createCombinedKey = exports.sendSignatureShare = exports.getTxRequest = void 0;
const assert_1 = __importDefault(require("assert"));
const libsodium_wrappers_sumo_1 = __importDefault(require("libsodium-wrappers-sumo"));
const tss_1 = __importDefault(require("./../../../account-lib/mpc/tss"));
const types_1 = require("../types");
const utils_1 = require("../../utils");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const _ = require("lodash");
const common_1 = require("../common");
Object.defineProperty(exports, "getTxRequest", { enumerable: true, get: function () { return common_1.getTxRequest; } });
Object.defineProperty(exports, "sendSignatureShare", { enumerable: true, get: function () { return common_1.sendSignatureShare; } });
/**
 * Combines YShares to combine the final TSS key
 * This can only be used to create the User or Backup key since it requires the common keychain from BitGo first
 *
 * @param params.keyShare - TSS key share
 * @param params.encryptedYShares - encrypted YShares with information on how to decrypt
 * @param params.commonKeychain - expected common keychain of the combined key
 * @returns {CombinedKey} combined TSS key
 */
async function createCombinedKey(params) {
    await tss_1.default.initialize();
    const MPC = new tss_1.default();
    const { keyShare, encryptedYShares, commonKeychain } = params;
    const yShares = [];
    let bitgoYShare;
    let userYShare;
    let backupYShare;
    for (const encryptedYShare of encryptedYShares) {
        const privateShare = await utils_1.readSignedMessage(encryptedYShare.yShare.encryptedPrivateShare, encryptedYShare.senderPublicArmor, encryptedYShare.recipientPrivateArmor);
        const yShare = {
            i: encryptedYShare.yShare.i,
            j: encryptedYShare.yShare.j,
            y: encryptedYShare.yShare.publicShare.slice(0, 64),
            v: encryptedYShare.yShare.publicShare.slice(64, 128),
            u: privateShare.slice(0, 64),
            chaincode: privateShare.slice(64),
        };
        switch (encryptedYShare.yShare.j) {
            case 1:
                userYShare = yShare;
                break;
            case 2:
                backupYShare = yShare;
                break;
            case 3:
                bitgoYShare = yShare;
                break;
            default:
                throw new Error('Invalid YShare index');
        }
        yShares.push(yShare);
    }
    const combinedKey = MPC.keyCombine(keyShare.uShare, yShares);
    if (combinedKey.pShare.y + combinedKey.pShare.chaincode !== commonKeychain) {
        throw new Error('Common keychains do not match');
    }
    if (!bitgoYShare) {
        throw new Error('Missing BitGo Y Share');
    }
    const signingMaterial = {
        uShare: keyShare.uShare,
        bitgoYShare,
        backupYShare,
        userYShare,
    };
    return {
        signingMaterial,
        commonKeychain,
    };
}
exports.createCombinedKey = createCombinedKey;
/**
 * Creates the User Sign Share containing the User XShare , the User to Bitgo RShare and User to Bitgo commitment
 *
 * @param {Buffer} signablePayload - the signablePayload as a buffer
 * @param {PShare} pShare - User's signing material
 * @returns {Promise<SignShare>} - User Sign Share
 */
async function createUserSignShare(signablePayload, pShare) {
    const MPC = await tss_1.default.initialize();
    if (pShare.i !== types_1.ShareKeyPosition.USER) {
        throw new Error('Invalid PShare, PShare doesnt belong to the User');
    }
    const jShare = { i: types_1.ShareKeyPosition.BITGO, j: types_1.ShareKeyPosition.USER };
    return MPC.signShare(signablePayload, pShare, [jShare]);
}
exports.createUserSignShare = createUserSignShare;
/**
 * Creates the User to Bitgo GShare
 *
 * @param {SignShare} userSignShare - the User Sign Share
 * @param {SignatureShareRecord} bitgoToUserRShare - the Bitgo to User RShare
 * @param {YShare} backupToUserYShare - the backup key Y share received during wallet creation
 * @param {Buffer} signablePayload - the signable payload from a tx
 * @param {CommitmentShareRecord} [bitgoToUserCommitment] - the Bitgo to User Commitment
 * @returns {Promise<GShare>} - the User to Bitgo GShare
 */
async function createUserToBitGoGShare(userSignShare, bitgoToUserRShare, backupToUserYShare, bitgoToUserYShare, signablePayload, bitgoToUserCommitment) {
    if (userSignShare.xShare.i !== types_1.ShareKeyPosition.USER) {
        throw new Error('Invalid XShare, doesnt belong to the User');
    }
    if (bitgoToUserRShare.from !== utils_1.SignatureShareType.BITGO || bitgoToUserRShare.to !== utils_1.SignatureShareType.USER) {
        throw new Error('Invalid RShare, is not from Bitgo to User');
    }
    if (backupToUserYShare.i !== types_1.ShareKeyPosition.USER) {
        throw new Error('Invalid YShare, doesnt belong to the User');
    }
    if (backupToUserYShare.j !== types_1.ShareKeyPosition.BACKUP) {
        throw new Error('Invalid YShare, is not backup key');
    }
    let v, r, R;
    if (bitgoToUserRShare.share.length > 128) {
        v = bitgoToUserRShare.share.substring(0, 64);
        r = bitgoToUserRShare.share.substring(64, 128);
        R = bitgoToUserRShare.share.substring(128, 192);
    }
    else {
        r = bitgoToUserRShare.share.substring(0, 64);
        R = bitgoToUserRShare.share.substring(64, 128);
    }
    const updatedBitgoToUserRShare = {
        i: types_1.ShareKeyPosition.USER,
        j: types_1.ShareKeyPosition.BITGO,
        u: bitgoToUserYShare.u,
        v,
        r,
        R,
    };
    const MPC = await tss_1.default.initialize();
    if (bitgoToUserCommitment) {
        if (bitgoToUserCommitment.from !== utils_1.SignatureShareType.BITGO ||
            bitgoToUserCommitment.to !== utils_1.SignatureShareType.USER) {
            throw new Error('Invalid Commitment, is not from Bitgo to User');
        }
        if (bitgoToUserCommitment.type !== utils_1.CommitmentType.COMMITMENT) {
            throw new Error('Invalid Commitment type, got: ' + bitgoToUserCommitment.type + ' expected: commitment');
        }
        updatedBitgoToUserRShare.commitment = bitgoToUserCommitment.share;
    }
    return MPC.sign(signablePayload, userSignShare.xShare, [updatedBitgoToUserRShare], [backupToUserYShare]);
}
exports.createUserToBitGoGShare = createUserToBitGoGShare;
/**
 * Sends the User to Bitgo RShare to Bitgo
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id
 * @param {String} txRequestId - the txRequest Id
 * @param {SignShare} userSignShare - the user Sign Share
 * @param {String} encryptedSignerShare - signer share encrypted to bitgo key
 * @returns {Promise<void>}
 */
async function offerUserToBitgoRShare(bitgo, walletId, txRequestId, userSignShare, encryptedSignerShare, apiMode = 'lite', vssProof, privateShareProof, userPublicGpgKey, publicShare) {
    const rShare = userSignShare.rShares[types_1.ShareKeyPosition.BITGO];
    if (_.isNil(rShare)) {
        throw new Error('userToBitgo RShare not found');
    }
    if (rShare.i !== types_1.ShareKeyPosition.BITGO || rShare.j !== types_1.ShareKeyPosition.USER) {
        throw new Error('Invalid RShare, is not from User to Bitgo');
    }
    const signatureShare = {
        from: utils_1.SignatureShareType.USER,
        to: utils_1.SignatureShareType.BITGO,
        share: rShare.r + rShare.R,
        vssProof,
        privateShareProof,
        publicShare,
    };
    // TODO (BG-57944): implement message signing for EDDSA
    await common_1.sendSignatureShare(bitgo, walletId, txRequestId, signatureShare, utils_1.RequestType.tx, encryptedSignerShare, 'eddsa', apiMode, userPublicGpgKey);
}
exports.offerUserToBitgoRShare = offerUserToBitgoRShare;
/**
 * Gets the Bitgo to User RShare from Bitgo
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id
 * @param {String} txRequestId - the txRequest Id
 * @returns {Promise<SignatureShareRecord>} - a Signature Share
 */
async function getBitgoToUserRShare(bitgo, walletId, txRequestId) {
    const txRequest = await common_1.getTxRequest(bitgo, walletId, txRequestId);
    let signatureShares;
    if (txRequest.apiVersion === 'full') {
        assert_1.default(txRequest.transactions, 'transactions required as part of txRequest');
        signatureShares = txRequest.transactions[0].signatureShares;
    }
    else {
        signatureShares = txRequest.signatureShares;
    }
    if (_.isNil(signatureShares) || _.isEmpty(signatureShares)) {
        throw new Error(`No signatures shares found for id: ${txRequestId}`);
    }
    // at this point we expect the only share to be the RShare
    const bitgoToUserRShare = signatureShares.find((sigShare) => sigShare.from === utils_1.SignatureShareType.BITGO && sigShare.to === utils_1.SignatureShareType.USER);
    if (_.isNil(bitgoToUserRShare)) {
        throw new Error(`Bitgo to User RShare not found for id: ${txRequestId}`);
    }
    return bitgoToUserRShare;
}
exports.getBitgoToUserRShare = getBitgoToUserRShare;
/**
 * Sends the User to Bitgo GShare to Bitgo
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id
 * @param {String} txRequestId - the txRequest Id
 * @param {GShare} userToBitgoGShare - the User to Bitgo GShare
 * @returns {Promise<void>}
 */
async function sendUserToBitgoGShare(bitgo, walletId, txRequestId, userToBitgoGShare, apiMode = 'lite') {
    if (userToBitgoGShare.i !== types_1.ShareKeyPosition.USER) {
        throw new Error('Invalid GShare, doesnt belong to the User');
    }
    const signatureShare = {
        from: utils_1.SignatureShareType.USER,
        to: utils_1.SignatureShareType.BITGO,
        share: userToBitgoGShare.R + userToBitgoGShare.gamma,
    };
    // TODO (BG-57944): implement message signing for EDDSA
    await common_1.sendSignatureShare(bitgo, walletId, txRequestId, signatureShare, utils_1.RequestType.tx, undefined, 'eddsa', apiMode);
}
exports.sendUserToBitgoGShare = sendUserToBitgoGShare;
/**
 * Prepares a YShare to be exchanged with other key holders.
 * Output is in a format that is usable within BitGo's ecosystem.
 *
 * @param params.keyShare - TSS key share of the party preparing exchange materials
 * @param params.recipientIndex - index of the recipient (1, 2, or 3)
 * @param params.recipientGpgPublicArmor - recipient's public gpg key in armor format
 * @param params.senderGpgPrivateArmor - sender's private gpg key in armor format
 * @returns { EncryptedYShare } encrypted Y Share
 */
async function encryptYShare(params) {
    const { keyShare, recipientIndex, recipientGpgPublicArmor, senderGpgPrivateArmor } = params;
    const yShare = keyShare.yShares[recipientIndex];
    if (!yShare) {
        throw new Error('Invalid recipient');
    }
    const publicShare = Buffer.concat([
        Buffer.from(keyShare.uShare.y, 'hex'),
        Buffer.from(yShare.v, 'hex'),
        Buffer.from(keyShare.uShare.chaincode, 'hex'),
    ]).toString('hex');
    const privateShare = Buffer.concat([Buffer.from(yShare.u, 'hex'), Buffer.from(yShare.chaincode, 'hex')]).toString('hex');
    const encryptedPrivateShare = await utils_1.encryptAndSignText(privateShare, recipientGpgPublicArmor, senderGpgPrivateArmor);
    return {
        i: yShare.i,
        j: yShare.j,
        publicShare,
        encryptedPrivateShare,
    };
}
exports.encryptYShare = encryptYShare;
/**
 *
 * Initializes Eddsa instance
 *
 * @returns {Promise<Eddsa>} the Eddsa instance
 */
async function getInitializedMpcInstance() {
    const hdTree = await sdk_lib_mpc_1.Ed25519Bip32HdTree.initialize();
    return await tss_1.default.initialize(hdTree);
}
exports.getInitializedMpcInstance = getInitializedMpcInstance;
/**
 *
 * Generates a TSS signature using the user and backup key
 *
 * @param {UserSigningMaterial} userSigningMaterial decrypted user TSS key
 * @param {BackupSigningMaterial} backupSigningMaterial decrypted backup TSS key
 * @param {string} path bip32 derivation path
 * @param {BaseTransaction} transaction the transaction to sign
 * @returns {Buffer} the signature
 */
async function getTSSSignature(userSigningMaterial, backupSigningMaterial, path = 'm/0', transaction) {
    const MPC = await getInitializedMpcInstance();
    const userCombine = MPC.keyCombine(userSigningMaterial.uShare, [
        userSigningMaterial.bitgoYShare,
        userSigningMaterial.backupYShare,
    ]);
    const backupCombine = MPC.keyCombine(backupSigningMaterial.uShare, [
        backupSigningMaterial.bitgoYShare,
        backupSigningMaterial.userYShare,
    ]);
    const userSubkey = MPC.keyDerive(userSigningMaterial.uShare, [userSigningMaterial.bitgoYShare, userSigningMaterial.backupYShare], path);
    const backupSubkey = MPC.keyCombine(backupSigningMaterial.uShare, [
        userSubkey.yShares[2],
        backupSigningMaterial.bitgoYShare,
    ]);
    const messageBuffer = transaction.signablePayload;
    const userSignShare = MPC.signShare(messageBuffer, userSubkey.pShare, [userCombine.jShares[2]]);
    const backupSignShare = MPC.signShare(messageBuffer, backupSubkey.pShare, [backupCombine.jShares[1]]);
    const userSign = MPC.sign(messageBuffer, userSignShare.xShare, [backupSignShare.rShares[1]], [userSigningMaterial.bitgoYShare]);
    const backupSign = MPC.sign(messageBuffer, backupSignShare.xShare, [userSignShare.rShares[2]], [backupSigningMaterial.bitgoYShare]);
    const signature = MPC.signCombine([userSign, backupSign]);
    const result = MPC.verify(messageBuffer, signature);
    if (!result) {
        throw new Error('Invalid signature');
    }
    const rawSignature = Buffer.concat([Buffer.from(signature.R, 'hex'), Buffer.from(signature.sigma, 'hex')]);
    return rawSignature;
}
exports.getTSSSignature = getTSSSignature;
/**
 * Verifies that a TSS wallet signature was produced with the expected key and that the signed data contains the
 * expected common keychain, the expected user and backup key ids as well as the public share that is generated from the
 * private share that was passed in.
 */
async function verifyWalletSignature(params) {
    const rawNotations = await common_1.commonVerifyWalletSignature(params);
    const { decryptedShare, verifierIndex } = params;
    const publicShare = Buffer.from(await libsodium_wrappers_sumo_1.default.crypto_scalarmult_ed25519_base_noclamp(Buffer.from(decryptedShare.slice(0, 64), 'hex'))).toString('hex') + decryptedShare.slice(64);
    const publicShareRawNotationIndex = 2 + verifierIndex;
    assert_1.default(publicShare === Buffer.from(rawNotations[publicShareRawNotationIndex].value).toString(), 'bitgo share mismatch');
}
exports.verifyWalletSignature = verifyWalletSignature;
//# sourceMappingURL=data:application/json;base64,