"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTxRequestChallenge = exports.commonVerifyWalletSignature = exports.exchangeEddsaCommitments = exports.sendSignatureShare = exports.getTxRequest = void 0;
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../utils");
/**
 * Gets the latest Tx Request by id
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id
 * @param {String} txRequestId - the txRequest Id
 * @returns {Promise<TxRequest>}
 */
async function getTxRequest(bitgo, walletId, txRequestId) {
    const txRequestRes = await bitgo
        .get(bitgo.url('/wallet/' + walletId + '/txrequests', 2))
        .query({ txRequestIds: txRequestId, latest: 'true' })
        .result();
    if (txRequestRes.txRequests.length <= 0) {
        throw new Error(`Unable to find TxRequest with id ${txRequestId}`);
    }
    return txRequestRes.txRequests[0];
}
exports.getTxRequest = getTxRequest;
/**
 * Sends a Signature Share
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id  *
 * @param {String} txRequestId - the txRequest Id
 * @param {SignatureShareRecord} signatureShare - a Signature Share
 * @param requestType - The type of request being submitted (either tx or message for signing)
 * @param signerShare
 * @param mpcAlgorithm
 * @param apiMode
 * @returns {Promise<SignatureShareRecord>} - a Signature Share
 */
async function sendSignatureShare(bitgo, walletId, txRequestId, signatureShare, requestType, signerShare, mpcAlgorithm = 'eddsa', apiMode = 'lite', userPublicGpgKey) {
    let addendum = '';
    switch (requestType) {
        case utils_1.RequestType.tx:
            if (mpcAlgorithm === 'ecdsa' || apiMode === 'full') {
                addendum = '/transactions/0';
            }
            break;
        case utils_1.RequestType.message:
            if (mpcAlgorithm === 'ecdsa' || apiMode === 'full') {
                addendum = '/messages/0';
            }
            break;
    }
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/signatureshares';
    return bitgo
        .post(bitgo.url(urlPath, 2))
        .send({
        signatureShare,
        signerShare,
        userPublicGpgKey,
    })
        .result();
}
exports.sendSignatureShare = sendSignatureShare;
/**
 * Sends the client commitment and encrypted signer share to the server, getting back the server commitment
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {string} walletId - the wallet id
 * @param {string} txRequestId - the txRequest Id
 * @param {CommitmentShareRecord} commitmentShare - the client commitment share
 * @param {EncryptedSignerShareRecord} encryptedSignerShare - the client encrypted signer share
 * @param {string} [apiMode] - the txRequest api mode (full or lite) - defaults to lite
 * @returns {Promise<ExchangeCommitmentResponse>} - the server commitment share
 */
async function exchangeEddsaCommitments(bitgo, walletId, txRequestId, commitmentShare, encryptedSignerShare, apiMode = 'lite') {
    let addendum = '';
    if (apiMode === 'full') {
        addendum = '/transactions/0';
    }
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/commit';
    return await bitgo.post(bitgo.url(urlPath, 2)).send({ commitmentShare, encryptedSignerShare }).result();
}
exports.exchangeEddsaCommitments = exchangeEddsaCommitments;
/**
 * Verifies that a TSS wallet signature was produced with the expected key and that the signed data contains the
 * expected common keychain as well as the expected user and backup key ids
 */
async function commonVerifyWalletSignature(params) {
    const { walletSignature, bitgoPub, commonKeychain, userKeyId, backupKeyId } = params;
    // By ensuring that the fingerprints of the walletSignature and the bitgoPub are different and that any of the results
    // from calling verifyPrimaryUser is valid we know that the signature was actually produced by the private key
    // belonging to the bitgoPub.
    if (walletSignature.keyPacket.getFingerprint() === bitgoPub.keyPacket.getFingerprint()) {
        throw new Error('Invalid HSM GPG signature');
    }
    const verificationResult = await utils_1.verifyPrimaryUserWrapper(walletSignature, bitgoPub, false);
    const isValid = verificationResult.some((result) => result.valid);
    if (!isValid) {
        throw new Error('Invalid HSM GPG signature');
    }
    const primaryUser = await walletSignature.getPrimaryUser();
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore the rawNotations property is missing from the type but it actually exists
    const rawNotations = primaryUser.user.otherCertifications[0].rawNotations;
    assert_1.default(rawNotations.length === 5, 'invalid wallet signatures');
    assert_1.default(commonKeychain === Buffer.from(rawNotations[0].value).toString(), 'wallet signature does not match common keychain');
    assert_1.default(userKeyId === Buffer.from(rawNotations[1].value).toString(), `wallet signature does not match user key id`);
    assert_1.default(backupKeyId === Buffer.from(rawNotations[2].value).toString(), 'wallet signature does not match backup key id');
    return rawNotations;
}
exports.commonVerifyWalletSignature = commonVerifyWalletSignature;
/**
 * Gets challenge for a tx request from BitGo
 * supports Message and regular Transaction
 * @param bitgo
 * @param walletId
 * @param txRequestId
 * @param index
 * @param requestType
 * @param paillierModulus
 */
async function getTxRequestChallenge(bitgo, walletId, txRequestId, index, requestType, paillierModulus) {
    let addendum = '';
    switch (requestType) {
        case utils_1.RequestType.tx:
            addendum = '/transactions/' + index;
            break;
        case utils_1.RequestType.message:
            addendum = '/messages/' + index;
            break;
    }
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/challenge';
    return await bitgo.post(bitgo.url(urlPath, 2)).send({ paillierModulus }).result();
}
exports.getTxRequestChallenge = getTxRequestChallenge;
//# sourceMappingURL=data:application/json;base64,