"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitGoKeyFromOvcShares = exports.BitGoToOvcJSON = exports.OvcToBitGoJSON = exports.OvcToOtherShare = exports.OvcShare = void 0;
/* eslint-disable no-redeclare */
const t = __importStar(require("io-ts"));
exports.OvcShare = t.intersection([
    t.type({
        publicShare: t.string,
        privateShare: t.string,
        vssProof: t.string,
        i: t.number,
        j: t.number,
    }),
    t.partial({
        paillierPublicKey: t.string,
    }),
], 'OvcShare');
exports.OvcToOtherShare = t.intersection([
    exports.OvcShare,
    t.type({
        uSig: t.string,
    }),
], 'OvcToOtherShare');
exports.OvcToBitGoJSON = t.strict({
    tssVersion: t.string,
    walletType: t.string,
    coin: t.string,
    state: t.number,
    ovc: t.type({
        1: t.type({
            gpgPubKey: t.string,
            ovcToBitgoShare: exports.OvcToOtherShare,
        }),
        2: t.type({
            gpgPubKey: t.string,
            ovcToBitgoShare: exports.OvcToOtherShare,
            ovcToOvcShare: exports.OvcToOtherShare,
        }),
    }),
}, 'OvcToBitGoJSON');
exports.BitGoToOvcJSON = t.strict({
    wallet: t.intersection([
        exports.OvcToBitGoJSON,
        t.type({
            platform: t.type({
                commonKeychain: t.string,
                walletGpgPubKeySigs: t.string,
                ovc: t.type({
                    // BitGo to User (OVC-1)
                    1: t.type({
                        bitgoToOvcShare: exports.OvcShare,
                    }),
                    // BitGo to Backup (OVC-2)
                    2: t.type({
                        bitgoToOvcShare: exports.OvcShare,
                    }),
                }),
            }),
        }),
    ]),
}, 'BitgoToOvcJson');
exports.BitGoKeyFromOvcShares = t.strict({
    bitGoOutputJsonForOvc: exports.BitGoToOvcJSON,
    bitGoKeyId: t.string,
}, 'BitGoKeyFromOvcShares');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZjSnNvbkNvZGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JpdGdvL2tleWNoYWluL292Y0pzb25Db2RlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQWlDO0FBQ2pDLHlDQUEyQjtBQUVkLFFBQUEsUUFBUSxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQ3BDO0lBQ0UsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNMLFdBQVcsRUFBRSxDQUFDLENBQUMsTUFBTTtRQUNyQixZQUFZLEVBQUUsQ0FBQyxDQUFDLE1BQU07UUFDdEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNO1FBQ2xCLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTTtRQUNYLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTTtLQUNaLENBQUM7SUFDRixDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ1IsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU07S0FDNUIsQ0FBQztDQUNILEVBQ0QsVUFBVSxDQUNYLENBQUM7QUFFVyxRQUFBLGVBQWUsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUMzQztJQUNFLGdCQUFRO0lBQ1IsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNMLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTTtLQUNmLENBQUM7Q0FDSCxFQUNELGlCQUFpQixDQUNsQixDQUFDO0FBRVcsUUFBQSxjQUFjLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDcEM7SUFDRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLE1BQU07SUFDcEIsVUFBVSxFQUFFLENBQUMsQ0FBQyxNQUFNO0lBQ3BCLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTTtJQUNkLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTTtJQUNmLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ1YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDUixTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU07WUFDbkIsZUFBZSxFQUFFLHVCQUFlO1NBQ2pDLENBQUM7UUFDRixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNSLFNBQVMsRUFBRSxDQUFDLENBQUMsTUFBTTtZQUNuQixlQUFlLEVBQUUsdUJBQWU7WUFDaEMsYUFBYSxFQUFFLHVCQUFlO1NBQy9CLENBQUM7S0FDSCxDQUFDO0NBQ0gsRUFDRCxnQkFBZ0IsQ0FDakIsQ0FBQztBQUlXLFFBQUEsY0FBYyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ3BDO0lBQ0UsTUFBTSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUM7UUFDckIsc0JBQWM7UUFDZCxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0wsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ2YsY0FBYyxFQUFFLENBQUMsQ0FBQyxNQUFNO2dCQUN4QixtQkFBbUIsRUFBRSxDQUFDLENBQUMsTUFBTTtnQkFDN0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ1Ysd0JBQXdCO29CQUN4QixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQzt3QkFDUixlQUFlLEVBQUUsZ0JBQVE7cUJBQzFCLENBQUM7b0JBQ0YsMEJBQTBCO29CQUMxQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQzt3QkFDUixlQUFlLEVBQUUsZ0JBQVE7cUJBQzFCLENBQUM7aUJBQ0gsQ0FBQzthQUNILENBQUM7U0FDSCxDQUFDO0tBQ0gsQ0FBQztDQUNILEVBQ0QsZ0JBQWdCLENBQ2pCLENBQUM7QUFJVyxRQUFBLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQzNDO0lBQ0UscUJBQXFCLEVBQUUsc0JBQWM7SUFDckMsVUFBVSxFQUFFLENBQUMsQ0FBQyxNQUFNO0NBQ3JCLEVBQ0QsdUJBQXVCLENBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cbmltcG9ydCAqIGFzIHQgZnJvbSAnaW8tdHMnO1xuXG5leHBvcnQgY29uc3QgT3ZjU2hhcmUgPSB0LmludGVyc2VjdGlvbihcbiAgW1xuICAgIHQudHlwZSh7XG4gICAgICBwdWJsaWNTaGFyZTogdC5zdHJpbmcsXG4gICAgICBwcml2YXRlU2hhcmU6IHQuc3RyaW5nLFxuICAgICAgdnNzUHJvb2Y6IHQuc3RyaW5nLFxuICAgICAgaTogdC5udW1iZXIsXG4gICAgICBqOiB0Lm51bWJlcixcbiAgICB9KSxcbiAgICB0LnBhcnRpYWwoe1xuICAgICAgcGFpbGxpZXJQdWJsaWNLZXk6IHQuc3RyaW5nLFxuICAgIH0pLFxuICBdLFxuICAnT3ZjU2hhcmUnXG4pO1xuXG5leHBvcnQgY29uc3QgT3ZjVG9PdGhlclNoYXJlID0gdC5pbnRlcnNlY3Rpb24oXG4gIFtcbiAgICBPdmNTaGFyZSxcbiAgICB0LnR5cGUoe1xuICAgICAgdVNpZzogdC5zdHJpbmcsXG4gICAgfSksXG4gIF0sXG4gICdPdmNUb090aGVyU2hhcmUnXG4pO1xuXG5leHBvcnQgY29uc3QgT3ZjVG9CaXRHb0pTT04gPSB0LnN0cmljdChcbiAge1xuICAgIHRzc1ZlcnNpb246IHQuc3RyaW5nLFxuICAgIHdhbGxldFR5cGU6IHQuc3RyaW5nLFxuICAgIGNvaW46IHQuc3RyaW5nLFxuICAgIHN0YXRlOiB0Lm51bWJlcixcbiAgICBvdmM6IHQudHlwZSh7XG4gICAgICAxOiB0LnR5cGUoe1xuICAgICAgICBncGdQdWJLZXk6IHQuc3RyaW5nLFxuICAgICAgICBvdmNUb0JpdGdvU2hhcmU6IE92Y1RvT3RoZXJTaGFyZSxcbiAgICAgIH0pLFxuICAgICAgMjogdC50eXBlKHtcbiAgICAgICAgZ3BnUHViS2V5OiB0LnN0cmluZyxcbiAgICAgICAgb3ZjVG9CaXRnb1NoYXJlOiBPdmNUb090aGVyU2hhcmUsXG4gICAgICAgIG92Y1RvT3ZjU2hhcmU6IE92Y1RvT3RoZXJTaGFyZSxcbiAgICAgIH0pLFxuICAgIH0pLFxuICB9LFxuICAnT3ZjVG9CaXRHb0pTT04nXG4pO1xuXG5leHBvcnQgdHlwZSBPdmNUb0JpdEdvSlNPTiA9IHQuVHlwZU9mPHR5cGVvZiBPdmNUb0JpdEdvSlNPTj47XG5cbmV4cG9ydCBjb25zdCBCaXRHb1RvT3ZjSlNPTiA9IHQuc3RyaWN0KFxuICB7XG4gICAgd2FsbGV0OiB0LmludGVyc2VjdGlvbihbXG4gICAgICBPdmNUb0JpdEdvSlNPTixcbiAgICAgIHQudHlwZSh7XG4gICAgICAgIHBsYXRmb3JtOiB0LnR5cGUoe1xuICAgICAgICAgIGNvbW1vbktleWNoYWluOiB0LnN0cmluZyxcbiAgICAgICAgICB3YWxsZXRHcGdQdWJLZXlTaWdzOiB0LnN0cmluZyxcbiAgICAgICAgICBvdmM6IHQudHlwZSh7XG4gICAgICAgICAgICAvLyBCaXRHbyB0byBVc2VyIChPVkMtMSlcbiAgICAgICAgICAgIDE6IHQudHlwZSh7XG4gICAgICAgICAgICAgIGJpdGdvVG9PdmNTaGFyZTogT3ZjU2hhcmUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8vIEJpdEdvIHRvIEJhY2t1cCAoT1ZDLTIpXG4gICAgICAgICAgICAyOiB0LnR5cGUoe1xuICAgICAgICAgICAgICBiaXRnb1RvT3ZjU2hhcmU6IE92Y1NoYXJlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgXSksXG4gIH0sXG4gICdCaXRnb1RvT3ZjSnNvbidcbik7XG5cbmV4cG9ydCB0eXBlIEJpdEdvVG9PdmNKU09OID0gdC5UeXBlT2Y8dHlwZW9mIEJpdEdvVG9PdmNKU09OPjtcblxuZXhwb3J0IGNvbnN0IEJpdEdvS2V5RnJvbU92Y1NoYXJlcyA9IHQuc3RyaWN0KFxuICB7XG4gICAgYml0R29PdXRwdXRKc29uRm9yT3ZjOiBCaXRHb1RvT3ZjSlNPTixcbiAgICBiaXRHb0tleUlkOiB0LnN0cmluZyxcbiAgfSxcbiAgJ0JpdEdvS2V5RnJvbU92Y1NoYXJlcydcbik7XG5cbmV4cG9ydCB0eXBlIEJpdEdvS2V5RnJvbU92Y1NoYXJlcyA9IHQuVHlwZU9mPHR5cGVvZiBCaXRHb0tleUZyb21PdmNTaGFyZXM+O1xuIl19