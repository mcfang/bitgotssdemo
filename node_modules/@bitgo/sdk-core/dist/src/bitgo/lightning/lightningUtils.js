"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLightningInvoice = exports.validateLnurlInvoice = exports.fetchLnurlPayInvoice = exports.decodeLnurlPay = void 0;
const bolt11 = __importStar(require("bolt11"));
const crypto = __importStar(require("crypto"));
const request = __importStar(require("superagent"));
const iLightning_1 = require("./iLightning");
const lnurlCodec_1 = require("./lnurlCodec");
const decode_1 = require("../utils/decode");
/**
 * Decodes an LNURL-pay request and makes an HTTP request to the decoded url
 * to retrieve details for the requested payment.
 * @param lnurl A bech32 encoded LNURL-pay request string
 * @returns {DecodedLnurlPayRequest} An LNURL-pay request message specifying
 * a min and max amount for the payment, metadata describing what the payment
 * is for, and a callback that can be used to fetch a lightning invoice for
 * the payment.
 */
async function decodeLnurlPay(lnurl) {
    const url = lnurlCodec_1.decodeLnurl(lnurl);
    const { body } = await request.get(url);
    const decodedRes = decode_1.decodeOrElse(iLightning_1.LnurlPayResponse.name, iLightning_1.LnurlPayResponse, body, (errors) => {
        throw new Error(`error(s) parsing lnurl response: ${errors}`);
    });
    const domain = new URL(url).hostname;
    return {
        ...decodedRes,
        domain,
    };
}
exports.decodeLnurlPay = decodeLnurlPay;
/**
 * Fetches a lightning invoice from an LNURL-pay callback server for a specified
 * amount of millisatoshis.
 * @param params {LnurlPayParams} An object specifying an amount and a callback
 * url with which to request a lightning invoice for an LNURL-pay request.
 * @returns {string} A BOLT #11 encoded lightning invoice
 */
async function fetchLnurlPayInvoice(params) {
    const { callback, millisatAmount, metadata } = params;
    const { pr: invoice } = callback.includes('?')
        ? (await request.get(callback + `&amount=${millisatAmount}`)).body
        : (await request.get(callback).query({ amount: millisatAmount })).body;
    const parsedInvoice = parseLightningInvoice(invoice);
    validateLnurlInvoice(parsedInvoice, millisatAmount, metadata);
    return invoice;
}
exports.fetchLnurlPayInvoice = fetchLnurlPayInvoice;
function getNetworkForInvoice(invoice) {
    if (invoice.startsWith('lntbs')) {
        // signet invoices are not supported by our bolt11 dependency
        // because the `tbs` prefix used for the invoice does not match the `tb`
        // prefix used by on-chain signet addresses
        // see: https://github.com/bitcoinjs/bolt11/pull/58#issuecomment-1106495709
        // we can still decode the invoice however using a custom network
        return {
            bech32: 'tbs',
            pubKeyHash: 0x6f,
            scriptHash: 0xc4,
            validWitnessVersions: [0, 1],
        };
    }
    return undefined;
}
/**
 * @param {ParsedLightningInvoice} invoice - a parsed lightning invoice
 * @param {number} amount - amount intended to pay for the invoice
 * @param {string} metadata - metadata that is used to verify the fetched invoice
 * @throws error for invoice that does not match with amount and metadata
 */
function validateLnurlInvoice(invoice, millisatAmount, metadata) {
    const { millisatoshis, descriptionHash } = invoice;
    if (millisatoshis !== millisatAmount) {
        throw new Error('amount of invoice does not match with given amount');
    }
    const hash = crypto.createHash('sha256').update(metadata).digest('hex');
    if (descriptionHash !== hash) {
        throw new Error('invoice h tag does not match with hash of metadata');
    }
}
exports.validateLnurlInvoice = validateLnurlInvoice;
/**
 * @param {unknown} invoiceStr - a lightning invoice
 * @return {ParsedLightningInvoice}
 * @throws error for invalid lightning invoice
 */
function parseLightningInvoice(invoiceStr) {
    var _a, _b;
    if (typeof invoiceStr !== 'string') {
        throw new Error('invoice is malformed');
    }
    const decodedInvoice = bolt11.decode(invoiceStr, getNetworkForInvoice(invoiceStr));
    if (decodedInvoice.network === undefined) {
        throw new Error('invoice network is invalid');
    }
    const { millisatoshis, tags, payeeNodeKey } = decodedInvoice;
    const paymentHash = (_a = tags.find((tag) => tag.tagName === 'payment_hash')) === null || _a === void 0 ? void 0 : _a.data;
    if (paymentHash === undefined || typeof paymentHash !== 'string') {
        throw new Error('invoice payment hash is invalid');
    }
    if (payeeNodeKey === undefined) {
        throw new Error('invoice payee pub key is invalid');
    }
    if (millisatoshis === undefined) {
        throw new Error('invoice millisatoshis amount is invalid');
    }
    const descriptionHash = (_b = tags.find((tag) => tag.tagName === 'purpose_commit_hash')) === null || _b === void 0 ? void 0 : _b.data;
    if (descriptionHash !== undefined && typeof descriptionHash !== 'string') {
        throw new Error('invoice description hash is invalid');
    }
    return { millisatoshis, paymentHash, payeeNodeKey, descriptionHash };
}
exports.parseLightningInvoice = parseLightningInvoice;
//# sourceMappingURL=data:application/json;base64,