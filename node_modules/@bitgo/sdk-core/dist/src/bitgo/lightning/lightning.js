"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lightning = void 0;
const iLightning_1 = require("./iLightning");
const lightningUtils_1 = require("./lightningUtils");
const decode_1 = require("../utils/decode");
const crypto_1 = require("crypto");
class Lightning {
    constructor(bitgo, wallet) {
        this.bitgo = bitgo;
        this.wallet = wallet;
        this.url = this.bitgo.url(`/wallet/${this.wallet.id()}/lightning`, 2);
    }
    async createInvoice(params) {
        const body = await this.bitgo
            .post(this.url + '/invoice')
            .send(params)
            .result();
        return decode_1.decodeOrElse(iLightning_1.CreateInvoiceResponse.name, iLightning_1.CreateInvoiceResponse, body, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    async createDepositAddress() {
        const body = await this.bitgo.post(this.url + '/address').result();
        return decode_1.decodeOrElse(iLightning_1.CreateDepositAddressResponse.name, iLightning_1.CreateDepositAddressResponse, body, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    async payInvoice(params) {
        const body = await this.bitgo
            .post(this.url + '/payment')
            .send(params)
            .result();
        return decode_1.decodeOrElse(iLightning_1.PayInvoiceResponse.name, iLightning_1.PayInvoiceResponse, body, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    async getBalance() {
        const body = await this.bitgo.get(this.url + '/balance').result();
        return decode_1.decodeOrElse(iLightning_1.GetBalanceResponse.name, iLightning_1.GetBalanceResponse, body, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    async withdraw(params) {
        const { value } = params;
        let { destination, sequenceId } = params;
        if (destination === undefined) {
            destination = (await this.wallet.createAddress()).address;
        }
        if (sequenceId === undefined) {
            sequenceId = crypto_1.randomBytes(16).toString('hex');
        }
        const body = await this.bitgo
            .post(this.url + '/withdrawal')
            .send({ value, destination, sequenceId })
            .result();
        return decode_1.decodeOrElse(iLightning_1.WithdrawResponse.name, iLightning_1.WithdrawResponse, body, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    async deposit(params) {
        const { amount } = params;
        const address = (await this.createDepositAddress()).address;
        const res = await this.wallet.send({ amount, address });
        return decode_1.decodeOrElse(iLightning_1.DepositResponse.name, iLightning_1.DepositResponse, res, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    async getInvoices(query) {
        const queryParams = {
            status: query === null || query === void 0 ? void 0 : query.status,
            limit: query === null || query === void 0 ? void 0 : query.limit,
            startDate: query === null || query === void 0 ? void 0 : query.startDate,
            endDate: query === null || query === void 0 ? void 0 : query.endDate,
        };
        const body = await this.bitgo
            .get(this.url + '/invoices')
            .query(queryParams)
            .result();
        return decode_1.decodeOrElse(iLightning_1.GetInvoicesResponse.name, iLightning_1.GetInvoicesResponse, body, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    /**
     * fetches lightning payments by status, limit, startDate and endDate
     * @param query
     * @return {GetPaymentsResponse}
     */
    async getPayments(query) {
        const queryParams = {};
        queryParams.status = query === null || query === void 0 ? void 0 : query.status;
        queryParams.limit = query === null || query === void 0 ? void 0 : query.limit;
        queryParams.startDate = query === null || query === void 0 ? void 0 : query.startDate;
        queryParams.endDate = query === null || query === void 0 ? void 0 : query.endDate;
        const body = await this.bitgo
            .get(this.url + '/payments')
            .query(queryParams)
            .result();
        return decode_1.decodeOrElse(iLightning_1.GetPaymentsResponse.name, iLightning_1.GetPaymentsResponse, body, (errors) => {
            throw new Error(`error(s) parsing response body: ${errors}`);
        });
    }
    decodeLnurlPay(lnurl) {
        return lightningUtils_1.decodeLnurlPay(lnurl);
    }
    fetchLnurlPayInvoice(params) {
        return lightningUtils_1.fetchLnurlPayInvoice(params);
    }
}
exports.Lightning = Lightning;
//# sourceMappingURL=data:application/json;base64,