"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LnurlPayResponse = exports.GetPaymentsResponse = exports.GetInvoicesResponse = exports.GetBalanceResponse = exports.PayInvoiceResponse = exports.DepositResponse = exports.CreateDepositAddressResponse = exports.CreateInvoiceResponse = exports.WithdrawResponse = exports.WPTransfer = exports.WPTransferEntry = void 0;
/* eslint-disable no-redeclare */
const t = __importStar(require("io-ts"));
exports.WPTransferEntry = t.partial({
    wallet: t.string,
    address: t.string,
    value: t.number,
    valueString: t.string,
    isChange: t.boolean,
    isPayGo: t.boolean,
    token: t.string,
}, 'WPTransferEntry');
exports.WPTransfer = t.type({
    entries: t.array(exports.WPTransferEntry),
    id: t.string,
    heightId: t.string,
    type: t.string,
    value: t.number,
    state: t.string,
}, 'WPTransfer');
exports.WithdrawResponse = t.strict({
    txid: t.string,
}, 'CreateWithdrawalResponse');
exports.CreateInvoiceResponse = t.strict({
    value: t.number,
    memo: t.union([t.string, t.undefined]),
    paymentHash: t.string,
    invoice: t.string,
    walletId: t.string,
    status: t.string,
    expiresAt: t.string,
}, 'CreateInvoiceResponse');
exports.CreateDepositAddressResponse = t.strict({
    address: t.string,
}, 'CreateDepositAddressResponse');
exports.DepositResponse = t.strict({
    status: t.string,
    transfer: exports.WPTransfer,
}, 'DepositResponse');
exports.PayInvoiceResponse = t.strict({
    paymentHash: t.string,
    transfer: exports.WPTransfer,
    status: t.string,
}, 'PayInvoiceResponse');
exports.GetBalanceResponse = t.strict({
    balance: t.number,
    availableBalance: t.number,
    maximumBalance: t.number,
}, 'GetBalanceResponse');
const InvoiceInfo = t.strict({
    paymentHash: t.string,
    walletId: t.string,
    status: t.union([t.literal('open'), t.literal('settled'), t.literal('canceled')]),
    value: t.number,
    expiresAt: t.string,
    createdAt: t.string,
    updatedAt: t.string,
    amtPaidSats: t.union([t.number, t.undefined]),
});
exports.GetInvoicesResponse = t.array(InvoiceInfo);
const PaymentInfo = t.strict({
    paymentHash: t.string,
    walletId: t.string,
    status: t.union([t.literal('in_flight'), t.literal('settled'), t.literal('failed')]),
    amount: t.union([t.number, t.undefined]),
    invoice: t.string,
    sendQueueId: t.string,
    failureReason: t.union([t.string, t.undefined]),
    fee: t.union([t.number, t.undefined]),
    feeLimit: t.number,
    paymentPreimage: t.union([t.string, t.undefined]),
    destination: t.string,
});
exports.GetPaymentsResponse = t.array(PaymentInfo);
exports.LnurlPayResponse = t.strict({
    tag: t.literal('payRequest'),
    callback: t.string,
    /** The maximum amount in millisatoshis we can pay for this LNRUL request */
    maxSendable: t.number,
    /** The minimum amount in millisatoshis we can pay for this LNRUL request */
    minSendable: t.number,
    /** A json array in string format describing the payment */
    metadata: t.string,
});
//# sourceMappingURL=data:application/json;base64,