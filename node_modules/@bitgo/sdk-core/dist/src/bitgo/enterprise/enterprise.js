"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enterprise = void 0;
/**
 * @prettier
 */
const _ = __importStar(require("lodash"));
const internal_1 = require("../internal");
const trading_1 = require("../trading");
const wallet_1 = require("../wallet");
const ecdsa_1 = require("../utils/tss/ecdsa");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const ecdh_1 = require("../ecdh");
const buffer_1 = require("buffer");
class Enterprise {
    constructor(bitgo, baseCoin, enterpriseData) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
        if (!_.isObject(enterpriseData)) {
            throw new Error('enterpriseData has to be an object');
        }
        if (!_.isString(enterpriseData.id)) {
            throw new Error('enterprise id has to be a string');
        }
        if (!_.isString(enterpriseData.name)) {
            throw new Error('enterprise name has to be a string');
        }
        this._enterprise = enterpriseData;
        this.id = enterpriseData.id;
        this.name = enterpriseData.name;
    }
    /**
     * Enterprise URL for v1 methods, such as getting users
     * @param query
     */
    url(query = '') {
        return this.bitgo.url(`/enterprise/${this.id}${query}`);
    }
    /**
     * Enterprise URL for v2 methods, such as getting fee address balances
     * @param query
     */
    coinUrl(query = '') {
        return this.baseCoin.url(`/enterprise/${this.id}${query}`);
    }
    /**
     * Get the wallets associated with this Enterprise
     * @param params
     */
    async coinWallets(params = {}) {
        const walletData = (await this.bitgo.get(this.baseCoin.url('/wallet/enterprise/' + this.id)).result());
        walletData.wallets = walletData.wallets.map((w) => {
            return new wallet_1.Wallet(this.bitgo, this.baseCoin, w);
        });
        return walletData;
    }
    /**
     * Get the users associated with this Enterprise
     * @param params
     */
    async users(params = {}) {
        return await this.bitgo.get(this.url('/user')).result();
    }
    /**
     * Get the fee address balance for this Enterprise
     * @param params
     */
    async getFeeAddressBalance(params = {}) {
        return await this.bitgo.get(this.coinUrl('/feeAddressBalance')).result();
    }
    /**
     * Add a user to this Enterprise
     * @param params
     */
    async addUser(params = {}) {
        return await this.bitgo.post(this.url('/user')).send(params).result();
    }
    /**
     * Remove a user from this Enterprise
     * @param params
     */
    async removeUser(params = {}) {
        return await this.bitgo.del(this.url('/user')).send(params).result();
    }
    /**
     * Get the first pending transaction for this Enterprise
     * @param params
     */
    async getFirstPendingTransaction(params = {}) {
        return internal_1.getFirstPendingTransaction({ enterpriseId: this.id }, this.baseCoin, this.bitgo);
    }
    /**
     * Manage settlements for an enterprise
     */
    settlements() {
        return new trading_1.Settlements(this.bitgo, this.id);
    }
    /**
     * Manage affirmations for an enterprise
     */
    affirmations() {
        return new trading_1.Affirmations(this.bitgo, this.id);
    }
    /**
     * Verifies and signs bitgo proofs for the enterprise
     * @param userPassword - enterprise admin's login password
     */
    async verifyEcdsaBitGoChallengeProofs(userPassword) {
        return ecdsa_1.EcdsaUtils.getVerifyAndSignBitGoChallenges(this.bitgo, this.id, userPassword);
    }
    /**
     * Manages all the challenges and signatures and uploads them to enable
     * ECDSA signing on enterprise. Also generates a client side Ntilde challenge
     * if not provided, but note that can take approx. a minute.
     * @param userPassword
     * @param bitgoInstChallengeProofSignature
     * @param bitgoNitroChallengeProofSignature
     * @param challenge
     */
    async uploadAndEnableTssEcdsaSigning(userPassword, bitgoInstChallengeProofSignature, bitgoNitroChallengeProofSignature, challenge) {
        await ecdsa_1.EcdsaUtils.initiateChallengesForEnterprise(this.bitgo, this.id, userPassword, bitgoInstChallengeProofSignature, bitgoNitroChallengeProofSignature, challenge);
    }
    /**
     * Fetches the existing TSS ECDSA enterprise challenge if one exists.
     * Can be used with uploadAndEnableTssEcdsaSigning to re-sign the
     * enterprise challenge with new signatures.
     */
    async getExistingTssEcdsaChallenge() {
        var _a;
        const urlPath = `/enterprise/${this.id}/tssconfig`;
        const tssConfig = await this.bitgo.get(this.bitgo.url(urlPath, 2)).send().result();
        const enterpriseChallenge = (_a = tssConfig === null || tssConfig === void 0 ? void 0 : tssConfig.ecdsa.challenge) === null || _a === void 0 ? void 0 : _a.enterprise;
        if (!enterpriseChallenge) {
            throw new Error('No existing ECDSA challenge on the enterprise.');
        }
        if (!enterpriseChallenge.ntildeProof) {
            throw new Error('Existing ECDSA challenge does not have a proof. Please contact your enterprise admin to set this up.');
        }
        return sdk_lib_mpc_1.EcdsaTypes.deserializeNtildeWithProofs({
            ntilde: enterpriseChallenge.ntilde,
            h1: enterpriseChallenge.h1,
            h2: enterpriseChallenge.h2,
            ntildeProof: enterpriseChallenge.ntildeProof,
        });
    }
    /**
     * Resigns the enterprise and bitgo challenges with a new ECDH keychain.
     * Verifies that the old keychain signed the challenges previously.
     * @param oldEcdhKeypair - the old keychain that signed the challenges
     * @param newEcdhKeypair - the new keychain that will sign the challenges
     * @param entChallenge - existing signed enterprise challenge
     * @param bitgoInstChallenge - existing signed bitgo institutional challenge
     * @param bitgoNitroChallenge - existing signed bitgo nitro challenge
     */
    async resignEnterpriseChallenges(oldEcdhKeypair, newEcdhKeypair, entChallenge, bitgoInstChallenge, bitgoNitroChallenge) {
        // Verify all the challenges were signed by the old keypair
        if (!ecdh_1.verifyEcdhSignature(ecdsa_1.EcdsaUtils.getMessageToSignFromChallenge(entChallenge), entChallenge.verifiers.adminSignature, buffer_1.Buffer.from(oldEcdhKeypair.derivedPubKey, 'hex'))) {
            throw new Error(`Cannot re-sign. The Enterprise TSS config was signed by another user.`);
        }
        if (!ecdh_1.verifyEcdhSignature(ecdsa_1.EcdsaUtils.getMessageToSignFromChallenge(bitgoInstChallenge), bitgoInstChallenge.verifiers.adminSignature, buffer_1.Buffer.from(oldEcdhKeypair.derivedPubKey, 'hex'))) {
            throw new Error(`Cannot re-sign. The BitGo Institutional TSS config was signed by another user.`);
        }
        if (!ecdh_1.verifyEcdhSignature(ecdsa_1.EcdsaUtils.getMessageToSignFromChallenge(bitgoNitroChallenge), bitgoNitroChallenge.verifiers.adminSignature, buffer_1.Buffer.from(oldEcdhKeypair.derivedPubKey, 'hex'))) {
            throw new Error(`Cannot re-sign. The BitGo Nitro TSS config was signed by another user.`);
        }
        // Once all the challenges are verified, we can re-sign them with the new keypair.
        const signedEntChallenge = ecdsa_1.EcdsaUtils.signChallenge(entChallenge, newEcdhKeypair.xprv, newEcdhKeypair.derivationPath);
        const signedBitGoInstChallenge = ecdsa_1.EcdsaUtils.signChallenge(bitgoInstChallenge, newEcdhKeypair.xprv, newEcdhKeypair.derivationPath);
        const signedBitGoNitroChallenge = ecdsa_1.EcdsaUtils.signChallenge(bitgoNitroChallenge, newEcdhKeypair.xprv, newEcdhKeypair.derivationPath);
        await ecdsa_1.EcdsaUtils.uploadChallengesToEnterprise(this.bitgo, this.id, entChallenge, signedEntChallenge.toString('hex'), signedBitGoInstChallenge.toString('hex'), signedBitGoNitroChallenge.toString('hex'));
    }
    /**
     *  Check if the enterprise has a set of featureFlags
     * @param flags
     */
    hasFeatureFlags(flags) {
        return flags.every((targetFlag) => { var _a; return (_a = this._enterprise.featureFlags) === null || _a === void 0 ? void 0 : _a.includes(targetFlag); });
    }
}
exports.Enterprise = Enterprise;
//# sourceMappingURL=data:application/json;base64,