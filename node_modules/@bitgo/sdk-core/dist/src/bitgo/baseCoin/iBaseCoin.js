"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignTypedDataVersion = void 0;
var SignTypedDataVersion;
(function (SignTypedDataVersion) {
    SignTypedDataVersion["V1"] = "V1";
    SignTypedDataVersion["V3"] = "V3";
    SignTypedDataVersion["V4"] = "V4";
})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));
//# sourceMappingURL=data:application/json;base64,