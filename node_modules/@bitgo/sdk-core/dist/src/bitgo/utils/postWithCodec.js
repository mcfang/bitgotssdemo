"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postWithCodec = void 0;
const Either_1 = require("fp-ts/Either");
/**
 * @param body
 * @param encodedBody
 * @returns a list of unknown properties that are present in the body but not the codec.
 */
function getUnknownProperties(body, encodedBody) {
    const unknownProperties = [];
    if (body && encodedBody) {
        const bodyKeys = Object.keys(body);
        const encodedBodyKeys = Object.keys(encodedBody);
        const unknownKeys = bodyKeys.filter((key) => !encodedBodyKeys.includes(key));
        unknownProperties.push(...unknownKeys);
    }
    return unknownProperties;
}
function getDecodeErrorKeys(codec, body) {
    function toKeyPath(context) {
        return context.flatMap((c) => (c.key ? [c.key] : [])).join('.');
    }
    const errors = codec.decode(body);
    if (Either_1.isLeft(errors)) {
        return errors.left.map((error) => toKeyPath(error.context));
    }
    return [];
}
/**
 * Try to encode the body with the codec and send the request.
 * If the codec fails to encode the body, send the request with the body as is and set the 'codec-error' header to true.
 * Set the 'io-ts-unknown-properties' header to the list of unknown properties that are present in the body but not the codec.
 * @param bitgo
 * @param url
 * @param codec
 * @param body
 * @param [useEncodedBody=true] - when false, send the original body. Useful when writing new codecs.
 */
function postWithCodec(agent, url, codec, body, { useEncodedBody = true, } = {}) {
    let encodedBody;
    let codecError;
    try {
        encodedBody = codec.encode(body);
        codecError = false;
    }
    catch (e) {
        console.error('error encoding request body for url', url, e);
        codecError = true;
    }
    return agent
        .post(url)
        .set('io-ts-codec-encode-error', codecError ? 'true' : 'false')
        .set('io-ts-codec-decode-error', getDecodeErrorKeys(codec, body).join(','))
        .set('io-ts-unknown-properties', encodedBody ? getUnknownProperties(body, encodedBody).join(',') : 'NA')
        .send(useEncodedBody && encodedBody ? encodedBody : body);
}
exports.postWithCodec = postWithCodec;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdFdpdGhDb2RlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby91dGlscy9wb3N0V2l0aENvZGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLHlDQUFzQztBQUV0Qzs7OztHQUlHO0FBQ0gsU0FBUyxvQkFBb0IsQ0FBQyxJQUE2QixFQUFFLFdBQW9DO0lBQy9GLE1BQU0saUJBQWlCLEdBQWEsRUFBRSxDQUFDO0lBQ3ZDLElBQUksSUFBSSxJQUFJLFdBQVcsRUFBRTtRQUN2QixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakQsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0UsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUM7S0FDeEM7SUFDRCxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUN6QixLQUFtQixFQUNuQixJQUFPO0lBRVAsU0FBUyxTQUFTLENBQUMsT0FBa0I7UUFDbkMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBQ0QsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxJQUFJLGVBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDN0Q7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixhQUFhLENBSzNCLEtBQWEsRUFDYixHQUFXLEVBQ1gsS0FBbUIsRUFDbkIsSUFBTyxFQUNQLEVBQ0UsY0FBYyxHQUFHLElBQUksTUFHbkIsRUFBRTtJQUVOLElBQUksV0FBMEIsQ0FBQztJQUMvQixJQUFJLFVBQVUsQ0FBQztJQUNmLElBQUk7UUFDRixXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RCxVQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ25CO0lBQ0QsT0FBTyxLQUFLO1NBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNULEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQzlELEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFFLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUN2RyxJQUFJLENBQUMsY0FBYyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBOUJELHNDQThCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHQgZnJvbSAnaW8tdHMnO1xuaW1wb3J0IHsgQml0R29CYXNlIH0gZnJvbSAnLi4vYml0Z29CYXNlJztcbmltcG9ydCB7IEJpdEdvUmVxdWVzdCB9IGZyb20gJy4uLy4uL2FwaSc7XG5pbXBvcnQgeyBTdXBlckFnZW50LCBTdXBlckFnZW50UmVxdWVzdCB9IGZyb20gJ3N1cGVyYWdlbnQnO1xuaW1wb3J0IHsgaXNMZWZ0IH0gZnJvbSAnZnAtdHMvRWl0aGVyJztcblxuLyoqXG4gKiBAcGFyYW0gYm9keVxuICogQHBhcmFtIGVuY29kZWRCb2R5XG4gKiBAcmV0dXJucyBhIGxpc3Qgb2YgdW5rbm93biBwcm9wZXJ0aWVzIHRoYXQgYXJlIHByZXNlbnQgaW4gdGhlIGJvZHkgYnV0IG5vdCB0aGUgY29kZWMuXG4gKi9cbmZ1bmN0aW9uIGdldFVua25vd25Qcm9wZXJ0aWVzKGJvZHk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBlbmNvZGVkQm9keTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHVua25vd25Qcm9wZXJ0aWVzOiBzdHJpbmdbXSA9IFtdO1xuICBpZiAoYm9keSAmJiBlbmNvZGVkQm9keSkge1xuICAgIGNvbnN0IGJvZHlLZXlzID0gT2JqZWN0LmtleXMoYm9keSk7XG4gICAgY29uc3QgZW5jb2RlZEJvZHlLZXlzID0gT2JqZWN0LmtleXMoZW5jb2RlZEJvZHkpO1xuICAgIGNvbnN0IHVua25vd25LZXlzID0gYm9keUtleXMuZmlsdGVyKChrZXkpID0+ICFlbmNvZGVkQm9keUtleXMuaW5jbHVkZXMoa2V5KSk7XG4gICAgdW5rbm93blByb3BlcnRpZXMucHVzaCguLi51bmtub3duS2V5cyk7XG4gIH1cbiAgcmV0dXJuIHVua25vd25Qcm9wZXJ0aWVzO1xufVxuXG5mdW5jdGlvbiBnZXREZWNvZGVFcnJvcktleXM8QSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBPIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICBjb2RlYzogdC5UeXBlPEEsIE8+LFxuICBib2R5OiBBXG4pOiBzdHJpbmdbXSB7XG4gIGZ1bmN0aW9uIHRvS2V5UGF0aChjb250ZXh0OiB0LkNvbnRleHQpOiBzdHJpbmcge1xuICAgIHJldHVybiBjb250ZXh0LmZsYXRNYXAoKGMpID0+IChjLmtleSA/IFtjLmtleV0gOiBbXSkpLmpvaW4oJy4nKTtcbiAgfVxuICBjb25zdCBlcnJvcnMgPSBjb2RlYy5kZWNvZGUoYm9keSk7XG4gIGlmIChpc0xlZnQoZXJyb3JzKSkge1xuICAgIHJldHVybiBlcnJvcnMubGVmdC5tYXAoKGVycm9yKSA9PiB0b0tleVBhdGgoZXJyb3IuY29udGV4dCkpO1xuICB9XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gZW5jb2RlIHRoZSBib2R5IHdpdGggdGhlIGNvZGVjIGFuZCBzZW5kIHRoZSByZXF1ZXN0LlxuICogSWYgdGhlIGNvZGVjIGZhaWxzIHRvIGVuY29kZSB0aGUgYm9keSwgc2VuZCB0aGUgcmVxdWVzdCB3aXRoIHRoZSBib2R5IGFzIGlzIGFuZCBzZXQgdGhlICdjb2RlYy1lcnJvcicgaGVhZGVyIHRvIHRydWUuXG4gKiBTZXQgdGhlICdpby10cy11bmtub3duLXByb3BlcnRpZXMnIGhlYWRlciB0byB0aGUgbGlzdCBvZiB1bmtub3duIHByb3BlcnRpZXMgdGhhdCBhcmUgcHJlc2VudCBpbiB0aGUgYm9keSBidXQgbm90IHRoZSBjb2RlYy5cbiAqIEBwYXJhbSBiaXRnb1xuICogQHBhcmFtIHVybFxuICogQHBhcmFtIGNvZGVjXG4gKiBAcGFyYW0gYm9keVxuICogQHBhcmFtIFt1c2VFbmNvZGVkQm9keT10cnVlXSAtIHdoZW4gZmFsc2UsIHNlbmQgdGhlIG9yaWdpbmFsIGJvZHkuIFVzZWZ1bCB3aGVuIHdyaXRpbmcgbmV3IGNvZGVjcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc3RXaXRoQ29kZWM8XG4gIFRBZ2VudCBleHRlbmRzIEJpdEdvQmFzZSB8IFN1cGVyQWdlbnQ8YW55PixcbiAgQSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICBPIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbj4oXG4gIGFnZW50OiBUQWdlbnQsXG4gIHVybDogc3RyaW5nLFxuICBjb2RlYzogdC5UeXBlPEEsIE8+LFxuICBib2R5OiBBLFxuICB7XG4gICAgdXNlRW5jb2RlZEJvZHkgPSB0cnVlLFxuICB9OiB7XG4gICAgdXNlRW5jb2RlZEJvZHk/OiBib29sZWFuO1xuICB9ID0ge31cbik6IFRBZ2VudCBleHRlbmRzIEJpdEdvQmFzZSA/IEJpdEdvUmVxdWVzdCA6IFN1cGVyQWdlbnRSZXF1ZXN0IHtcbiAgbGV0IGVuY29kZWRCb2R5OiBPIHwgdW5kZWZpbmVkO1xuICBsZXQgY29kZWNFcnJvcjtcbiAgdHJ5IHtcbiAgICBlbmNvZGVkQm9keSA9IGNvZGVjLmVuY29kZShib2R5KTtcbiAgICBjb2RlY0Vycm9yID0gZmFsc2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdlcnJvciBlbmNvZGluZyByZXF1ZXN0IGJvZHkgZm9yIHVybCcsIHVybCwgZSk7XG4gICAgY29kZWNFcnJvciA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGFnZW50XG4gICAgLnBvc3QodXJsKVxuICAgIC5zZXQoJ2lvLXRzLWNvZGVjLWVuY29kZS1lcnJvcicsIGNvZGVjRXJyb3IgPyAndHJ1ZScgOiAnZmFsc2UnKVxuICAgIC5zZXQoJ2lvLXRzLWNvZGVjLWRlY29kZS1lcnJvcicsIGdldERlY29kZUVycm9yS2V5cyhjb2RlYywgYm9keSkuam9pbignLCcpKVxuICAgIC5zZXQoJ2lvLXRzLXVua25vd24tcHJvcGVydGllcycsIGVuY29kZWRCb2R5ID8gZ2V0VW5rbm93blByb3BlcnRpZXMoYm9keSwgZW5jb2RlZEJvZHkpLmpvaW4oJywnKSA6ICdOQScpXG4gICAgLnNlbmQodXNlRW5jb2RlZEJvZHkgJiYgZW5jb2RlZEJvZHkgPyBlbmNvZGVkQm9keSA6IGJvZHkpO1xufVxuIl19