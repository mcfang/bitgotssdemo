"use strict";
/* eslint-disable @typescript-eslint/ban-ts-comment */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateGPGKeyPair = exports.verifySignature = exports.signText = exports.readSignedMessage = exports.encryptAndSignText = exports.encryptText = exports.createShareProof = exports.createSharedDataProof = exports.verifySharedDataProof = exports.verifyShareProof = exports.getTrustGpgPubKey = exports.verifyPrimaryUserWrapper = exports.getBitgoGpgPubKey = void 0;
const pgp = __importStar(require("openpgp"));
const openpgp_1 = require("openpgp");
const _ = __importStar(require("lodash"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const crypto_1 = __importDefault(require("crypto"));
const sodium = require('libsodium-wrappers-sumo');
/**
 * Fetches BitGo's pubic gpg key used in MPC flows
 * @param {BitGo} bitgo BitGo object
 * @return {Key} public gpg key
 */
async function getBitgoGpgPubKey(bitgo) {
    const constants = await bitgo.fetchConstants();
    if (!constants.mpc || !constants.mpc.bitgoPublicKey) {
        throw new Error('Unable to create MPC keys - bitgoPublicKey is missing from constants');
    }
    const bitgoPublicKeyStr = constants.mpc.bitgoPublicKey;
    return await openpgp_1.readKey({ armoredKey: bitgoPublicKeyStr });
}
exports.getBitgoGpgPubKey = getBitgoGpgPubKey;
/**
 * Verifies the primary user on a GPG key using a reference key representing the user to be checked.
 * Allows a verification without a date check by wrapping verifyPrimaryUser of openpgp.
 * @param {Key} pubKey gpg key to check the primary user of.
 * @param {Key} primaryUser gpg key of the user to check.
 * @param {boolean} checkDates If false, disable date checks in the openpgp call to check the primary user.
 * @return {KeyValidityDict} list of users checked and whether each passed as a primary user in pubKey or not.
 */
async function verifyPrimaryUserWrapper(pubKey, primaryUser, checkDates) {
    if (checkDates) {
        return await pubKey.verifyPrimaryUser([primaryUser]);
    }
    else {
        return await pubKey.verifyPrimaryUser([primaryUser], null);
    }
}
exports.verifyPrimaryUserWrapper = verifyPrimaryUserWrapper;
/**
 * Fetches Trust pub key string
 * @param bitgo
 */
async function getTrustGpgPubKey(bitgo) {
    const constants = await bitgo.fetchConstants();
    if (!constants.trustPubKey) {
        throw new Error('Unable to get trustPubKey');
    }
    return openpgp_1.readKey({ armoredKey: constants.trustPubKey });
}
exports.getTrustGpgPubKey = getTrustGpgPubKey;
/**
 * Verify an Eddsa or Ecdsa KeyShare Proof.
 *
 * @param senderPubKey public key of the sender of the privateShareProof
 * @param privateShareProof u value proof
 * @param uValue u value from an Eddsa keyshare
 * @param algo
 * @return {boolean} whether uValue proof actually was signed by sender as part of their subkeys
 */
async function verifyShareProof(senderPubKey, privateShareProof, uValue, algo) {
    const decodedProof = await pgp.readKey({ armoredKey: privateShareProof });
    const senderGpgKey = await pgp.readKey({ armoredKey: senderPubKey });
    if (!(await verifyPrimaryUserWrapper(decodedProof, senderGpgKey, true))[0].valid) {
        return false;
    }
    const proofSubkeys = decodedProof.getSubkeys()[1];
    if (algo === 'eddsa') {
        const decodedUValueProof = Buffer.from(proofSubkeys.keyPacket.publicParams['Q'].slice(1)).toString('hex');
        const rawUValueProof = Buffer.from(sodium.crypto_scalarmult_ed25519_base_noclamp(Buffer.from(uValue, 'hex'))).toString('hex');
        return decodedUValueProof === rawUValueProof;
    }
    else if (algo === 'ecdsa') {
        const decodedUValueProof = Buffer.from(proofSubkeys.keyPacket.publicParams['Q']).toString('hex');
        const rawUValueProof = utxo_lib_1.ecc.pointFromScalar(Buffer.from(uValue, 'hex'), false);
        return rawUValueProof !== null && decodedUValueProof === Buffer.from(rawUValueProof).toString('hex');
    }
    else {
        throw new Error('Invalid algorithm provided');
    }
}
exports.verifyShareProof = verifyShareProof;
/**
 * Verify a shared data proof.
 *
 * @param senderPubKeyArm public key of the signer of the key with proof data
 * @param keyWithNotation signed reciever key with notation data
 * @param dataToVerify data to be checked against notation data in the signed key
 * @return {boolean} whether proof is valid
 */
async function verifySharedDataProof(senderPubKeyArm, keyWithNotation, dataToVerify) {
    const senderPubKey = await pgp.readKey({ armoredKey: senderPubKeyArm });
    const signedKey = await pgp.readKey({ armoredKey: keyWithNotation });
    if (!(await verifyPrimaryUserWrapper(signedKey, senderPubKey, true).then((values) => _.some(values, (value) => value.valid)))) {
        return false;
    }
    const primaryUser = await signedKey.getPrimaryUser();
    const anyInvalidProof = _.some(
    // @ts-ignore
    primaryUser.user.otherCertifications[0].rawNotations, (notation) => { var _a; return ((_a = dataToVerify.find((i) => i.name === notation.name)) === null || _a === void 0 ? void 0 : _a.value) !== Buffer.from(notation.value).toString(); });
    return !anyInvalidProof;
}
exports.verifySharedDataProof = verifySharedDataProof;
/**
 * Creates a proof through adding notation data to a GPG ceritifying signature.
 *
 * @param privateKeyArmored gpg private key in armor format of the sender
 * @param publicKeyToCertArmored gpg public key in armor fomrat of the reciever
 * @param notations data to be proofed
 * @return {string} keyshare proof
 */
async function createSharedDataProof(privateKeyArmored, publicKeyToCertArmored, notations) {
    const certifyingKey = await pgp.readKey({ armoredKey: privateKeyArmored });
    const publicKeyToCert = await pgp.readKey({ armoredKey: publicKeyToCertArmored });
    const dateTime = new Date();
    // UserId Packet.
    const userIdPkt = new pgp.UserIDPacket();
    const primaryUser = await publicKeyToCert.getPrimaryUser();
    // @ts-ignore
    userIdPkt.userID = primaryUser.user.userID.userID;
    // Signature packet.
    const signaturePacket = new pgp.SignaturePacket();
    signaturePacket.signatureType = pgp.enums.signature.certPositive;
    signaturePacket.publicKeyAlgorithm = pgp.enums.publicKey.ecdsa;
    signaturePacket.hashAlgorithm = pgp.enums.hash.sha256;
    // @ts-ignore
    signaturePacket.issuerFingerprint = await primaryUser.user.mainKey.keyPacket.getFingerprintBytes();
    // @ts-ignore
    signaturePacket.issuerKeyID = primaryUser.user.mainKey.keyPacket.keyID;
    // @ts-ignore
    signaturePacket.signingKeyID = primaryUser.user.mainKey.keyPacket.keyID;
    // @ts-ignore
    signaturePacket.signersUserID = primaryUser.user.userID.userID;
    // @ts-ignore
    signaturePacket.features = [1];
    notations.forEach(({ name, value }) => {
        signaturePacket.rawNotations.push({
            name: name,
            value: new Uint8Array(Buffer.from(value)),
            humanReadable: true,
            critical: false,
        });
    });
    // Prepare signing data.
    const keydataToSign = {};
    // @ts-ignore
    keydataToSign.key = publicKeyToCert.keyPacket;
    // @ts-ignore
    keydataToSign.userID = userIdPkt;
    // Sign the data (create certification).
    // @ts-ignore
    await signaturePacket.sign(certifyingKey.keyPacket, keydataToSign, dateTime);
    // Assemble packets together.
    const publicKeyToCertPkts = publicKeyToCert.toPacketList();
    const newKeyPktList = new pgp.PacketList();
    newKeyPktList.push(...publicKeyToCertPkts.slice(0, 3), signaturePacket, ...publicKeyToCertPkts.slice(3));
    // @ts-ignore
    const newPubKey = new pgp.PublicKey(newKeyPktList);
    return newPubKey.armor().replace(/\r\n/g, '\n');
}
exports.createSharedDataProof = createSharedDataProof;
/**
 * Creates a KeyShare Proof based on given algo.
 *
 * Creates an EdDSA KeyShare Proof by appending an ed25519 subkey (auth) to an armored gpg private key.
 * Creates an ECDSA KeyShare Proof by Append a secp256k1 subkey (auth) to a PGP keychain.
 *
 * @param privateArmor gpg private key in armor format
 * @param uValue u value from an Eddsa keyshare
 * @param algo algo to use, eddsa or ecdsa
 * @return {string} keyshare proof
 */
async function createShareProof(privateArmor, uValue, algo) {
    const privateKey = await openpgp_1.readKey({ armoredKey: privateArmor });
    const dateTime = new Date();
    // @ts-ignore - type inconsistency, this ctor supports a date param: https://docs.openpgpjs.org/SecretSubkeyPacket.html
    const secretSubkeyPacket = new pgp.SecretSubkeyPacket(dateTime);
    secretSubkeyPacket.algorithm = pgp.enums.publicKey[algo];
    // @ts-ignore - same as above
    secretSubkeyPacket.isEncrypted = false;
    let oid;
    let Q;
    if (algo === 'eddsa') {
        await sodium.ready;
        const subKeyVal = Buffer.from(sodium.crypto_scalarmult_ed25519_base_noclamp(Buffer.from(uValue, 'hex'), 'uint8array'));
        // Sub-key (encryption key) packet.
        oid = [0x2b, 0x06, 0x01, 0x04, 0x01, 0xda, 0x47, 0x0f, 0x01];
        // @ts-ignore
        oid.write = () => new Uint8Array(Buffer.from('092b06010401da470f01', 'hex'));
        Q = new Uint8Array([0x40, ...subKeyVal]);
    }
    else if (algo === 'ecdsa') {
        oid = [0x2b, 0x81, 0x04, 0x00, 0x0a];
        // @ts-ignore - same as above
        oid.write = () => new Uint8Array(Buffer.from('052b8104000a', 'hex'));
        Q = utxo_lib_1.ecc.pointFromScalar(new Uint8Array(Buffer.from(uValue, 'hex')), false);
    }
    secretSubkeyPacket.publicParams = {
        oid,
        Q,
    };
    // @ts-ignore - same as above
    await secretSubkeyPacket.computeFingerprintAndKeyID();
    // Sub-key signature packet.
    const subKeydataToSign = {
        key: privateKey.keyPacket,
        bind: secretSubkeyPacket,
    };
    const subkeySignaturePacket = new pgp.SignaturePacket();
    subkeySignaturePacket.signatureType = pgp.enums.signature.subkeyBinding;
    subkeySignaturePacket.publicKeyAlgorithm = pgp.enums.publicKey.ecdsa;
    subkeySignaturePacket.hashAlgorithm = pgp.enums.hash.sha256;
    subkeySignaturePacket.keyFlags = new Uint8Array([pgp.enums.keyFlags.authentication]);
    // Sign the subkey
    // @ts-ignore - sign supports arbitrary data for 2nd param: https://docs.openpgpjs.org/SignaturePacket.html
    await subkeySignaturePacket.sign(privateKey.keyPacket, subKeydataToSign, dateTime);
    // Assemble packets together.
    const newKeyPktList = new pgp.PacketList();
    const privateKeyPkts = privateKey.toPacketList();
    privateKeyPkts.forEach((packet) => newKeyPktList.push(packet));
    newKeyPktList.push(secretSubkeyPacket, subkeySignaturePacket);
    // @ts-ignore - supports packet list as ctor param: https://docs.openpgpjs.org/PrivateKey.html
    const newPubKey = new pgp.PrivateKey(newKeyPktList).toPublic();
    if (!(await verifyPrimaryUserWrapper(newPubKey, privateKey, true))[0].valid) {
        throw new Error('Incorrect signature');
    }
    return newPubKey.armor().replace(/\r\n/g, '\n');
}
exports.createShareProof = createShareProof;
/**
 * Encrypts string using gpg key
 * @DEPRECATED - should use encryptAndSignText instead for added security
 *
 * @param text string to encrypt
 * @param key encryption key
 * @return {string} encrypted string
 *
 * TODO(BG-47170): Delete once gpg signatures are fully supported
 */
async function encryptText(text, key) {
    const messageToEncrypt = await openpgp_1.createMessage({
        text,
    });
    return await openpgp_1.encrypt({
        message: messageToEncrypt,
        encryptionKeys: [key],
        format: 'armored',
        config: {
            rejectCurves: new Set(),
            showVersion: false,
            showComment: false,
        },
    });
}
exports.encryptText = encryptText;
/**
 * Encrypts and signs a string
 * @param text string to encrypt and sign
 * @param publicArmor public key to encrypt with
 * @param privateArmor private key to sign with
 */
async function encryptAndSignText(text, publicArmor, privateArmor) {
    const publicKey = await openpgp_1.readKey({ armoredKey: publicArmor });
    const privateKey = await openpgp_1.readPrivateKey({ armoredKey: privateArmor });
    const message = await openpgp_1.createMessage({ text });
    const signedMessage = await openpgp_1.encrypt({
        message,
        encryptionKeys: publicKey,
        signingKeys: privateKey,
        format: 'armored',
        config: {
            rejectCurves: new Set(),
            showVersion: false,
            showComment: false,
        },
    });
    return signedMessage;
}
exports.encryptAndSignText = encryptAndSignText;
/**
 * Reads a signed and encrypted message
 *
 * @param signed signed and encrypted message
 * @param publicArmor public key to verify signature
 * @param privateArmor private key to decrypt message
 */
async function readSignedMessage(signed, publicArmor, privateArmor) {
    const publicKey = await openpgp_1.readKey({ armoredKey: publicArmor });
    const privateKey = await openpgp_1.readPrivateKey({ armoredKey: privateArmor });
    const message = await openpgp_1.readMessage({ armoredMessage: signed });
    const decrypted = await openpgp_1.decrypt({
        message,
        verificationKeys: publicKey,
        decryptionKeys: privateKey,
        expectSigned: true,
        config: { rejectCurves: new Set() },
    });
    return decrypted.data;
}
exports.readSignedMessage = readSignedMessage;
/**
 * Generates a signature
 *
 * @param text string to generate a signature for
 * @param privateArmor private key as armored string
 * @return {string} armored signature string
 */
async function signText(text, privateArmor) {
    const privateKey = await openpgp_1.readPrivateKey({ armoredKey: privateArmor });
    const message = await openpgp_1.createMessage({ text });
    const signature = await openpgp_1.sign({
        message,
        signingKeys: privateKey,
        format: 'armored',
        detached: true,
    });
    return signature;
}
exports.signText = signText;
/**
 * Verifies signature was generated by the public key and matches the expected text
 *
 * @param text text that the signature was for
 * @param armoredSignature signed message as an armored string
 * @param publicArmor public key that generated the signature
 */
async function verifySignature(text, armoredSignature, publicArmor) {
    const publicKey = await openpgp_1.readKey({ armoredKey: publicArmor });
    const signature = await openpgp_1.readSignature({ armoredSignature });
    const message = await openpgp_1.createMessage({ text });
    const verificationResult = await openpgp_1.verify({
        message,
        signature,
        verificationKeys: publicKey,
    });
    if (verificationResult.signatures.length !== 1) {
        throw new Error('Invalid number of signatures');
    }
    try {
        await verificationResult.signatures[0].verified;
        return text === verificationResult.data;
    }
    catch {
        return false;
    }
}
exports.verifySignature = verifySignature;
/**
 * Generate a GPG key pair
 *
 * @param: keyCurve the curve to create a key with
 * @param: username name of the user (optional)
 * @param: email email of the user (optional)
 */
async function generateGPGKeyPair(keyCurve, username, email) {
    const randomHexString = crypto_1.default.randomBytes(12).toString('hex');
    username = username !== null && username !== void 0 ? username : randomHexString;
    email = email !== null && email !== void 0 ? email : `user-${randomHexString}@${randomHexString}.com`;
    // Allow generating secp256k1 key pairs
    pgp.config.rejectCurves = new Set();
    const gpgKey = await pgp.generateKey({
        userIDs: [
            {
                name: username,
                email,
            },
        ],
        curve: keyCurve,
    });
    return gpgKey;
}
exports.generateGPGKeyPair = generateGPGKeyPair;
//# sourceMappingURL=data:application/json;base64,