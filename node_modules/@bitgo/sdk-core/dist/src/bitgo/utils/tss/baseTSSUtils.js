"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const openpgp_1 = require("openpgp");
const tss_1 = require("../../tss");
const mpcUtils_1 = require("../mpcUtils");
const _ = __importStar(require("lodash"));
/**
 * BaseTssUtil class which different signature schemes have to extend
 */
class BaseTssUtils extends mpcUtils_1.MpcUtils {
    constructor(bitgo, baseCoin, wallet) {
        super(bitgo, baseCoin);
        this._wallet = wallet;
    }
    get wallet() {
        if (_.isNil(this._wallet)) {
            throw new Error('Wallet not defined');
        }
        return this._wallet;
    }
    async createBitgoHeldBackupKeyShare(userGpgKey, enterprise) {
        const keyResponse = await this.bitgo
            .post(this.baseCoin.url('/krs/backupkeys'))
            .send({
            enterprise,
            userGPGPublicKey: userGpgKey.publicKey,
        })
            .result();
        if (!keyResponse || !keyResponse.keyShares) {
            throw new Error('Failed to get backup shares from BitGo.');
        }
        return {
            id: keyResponse.id,
            keyShares: keyResponse.keyShares,
        };
    }
    finalizeBitgoHeldBackupKeyShare(keyId, commonKeychain, userKeyShare, bitgoKeychain, userGpgKey, backupGpgKey) {
        throw new Error('Method not implemented.');
    }
    createUserKeychain(params) {
        throw new Error('Method not implemented.');
    }
    createBackupKeychain(params) {
        throw new Error('Method not implemented.');
    }
    createBitgoKeychain(params) {
        throw new Error('Method not implemented.');
    }
    createKeychains(params) {
        throw new Error('Method not implemented.');
    }
    signTxRequest(params) {
        throw new Error('Method not implemented.');
    }
    signTxRequestForMessage(params) {
        throw new Error('Method not implemented.');
    }
    /**
     * Signs a transaction using TSS for EdDSA and through utilization of custom share generators
     *
     * @param {string | TxRequest} txRequest - transaction request with unsigned transaction
     * @param {CustomRShareGeneratingFunction} externalSignerRShareGenerator a function that creates R shares in the EdDSA TSS flow
     * @param {CustomGShareGeneratingFunction} externalSignerGShareGenerator a function that creates G shares in the EdDSA TSS flow
     * @returns {Promise<TxRequest>} - a signed tx request
     */
    signEddsaTssUsingExternalSigner(txRequest, externalSignerCommitmentGenerator, externalSignerRShareGenerator, externalSignerGShareGenerator) {
        throw new Error('Method not implemented.');
    }
    /**
     * Signs a transaction using TSS for ECDSA and through utilization of custom share generators
     *
     * @param {params: TSSParams | TSSParamsForMessage} params - params object that represents parameters to sign a transaction or a message.
     * @param {RequestType} requestType - the type of the request to sign (transaction or message).
     * @param {CustomPaillierModulusGetterFunction} externalSignerPaillierModulusGetter a function that creates Paillier Modulus shares in the ECDSA TSS flow.
     * @param {CustomKShareGeneratingFunction} externalSignerKShareGenerator a function that creates K shares in the ECDSA TSS flow.
     * @param {CustomMuDeltaShareGeneratingFunction} externalSignerMuDeltaShareGenerator a function that creates Mu and Delta shares in the ECDSA TSS flow.
     * @param {CustomSShareGeneratingFunction} externalSignerSShareGenerator a function that creates S shares in the ECDSA TSS flow.
     */
    signEcdsaTssUsingExternalSigner(params, requestType, externalSignerPaillierModulusGetter, externalSignerKShareGenerator, externalSignerMuDeltaShareGenerator, externalSignerSShareGenerator) {
        throw new Error('Method not implemented.');
    }
    /**
     * Create an Commitment (User to BitGo) share from an unsigned transaction and private user signing material
     * EDDSA only
     *
     * @param {Object} params - params object
     * @param {TxRequest} params.txRequest - transaction request with unsigned transaction
     * @param {string} params.prv - user signing material
     * @param {string} params.walletPassphrase - wallet passphrase
     *
     * @returns {Promise<{ userToBitgoCommitment: CommitmentShareRecor, encryptedSignerShare: EncryptedSignerShareRecord }>} - Commitment Share and the Encrypted Signer Share to BitGo
     */
    createCommitmentShareFromTxRequest(params) {
        throw new Error('Method not implemented.');
    }
    /**
     * Create an R (User to BitGo) share from an unsigned transaction and private user signing material
     *
     * @param {Object} params - params object
     * @param {TxRequest} params.txRequest - transaction request with unsigned transaction
     * @param {string} params.prv - user signing material
     * @param {string} [params.walletPassphrase] - wallet passphrase
     * @param {EncryptedSignerShareRecord} [params.encryptedUserToBitgoRShare] - encrypted user to bitgo R share generated in the commitment phase
     * @returns {Promise<{ rShare: SignShare }>} - R Share to BitGo
     */
    createRShareFromTxRequest(params) {
        throw new Error('Method not implemented.');
    }
    /**
     * Create a G (User to BitGo) share from an unsigned transaction and private user signing material
     *
     * @param {Object} params - params object
     * @param {TxRequest} params.txRequest - transaction request with unsigned transaction
     * @param {string} params.prv - user signing material
     * @param {SignatureShareRecord} params.bitgoToUserRShare - BitGo to User R Share
     * @param {SignShare} params.userToBitgoRShare - User to BitGo R Share
     * @param {CommitmentShareRecord} params.bitgoToUserCommitment - BitGo to User Commitment
     * @returns {Promise<GShare>} - GShare from User to BitGo
     */
    createGShareFromTxRequest(params) {
        throw new Error('Method not implemented.');
    }
    /**
     * Builds a tx request from params and verify it
     *
     * @param {PrebuildTransactionWithIntentOptions} params - parameters to build the tx
     * @param {TxRequestVersion} apiVersion lite or full
     * @param {boolean} preview boolean indicating if this is to preview a tx request, which will not initiate policy checks or pending approvals
     * @returns {Promise<TxRequest>} - a built tx request
     */
    async prebuildTxWithIntent(params, apiVersion = 'lite', preview) {
        const intentOptions = this.populateIntent(this.baseCoin, params);
        const whitelistedParams = {
            intent: {
                ...intentOptions,
            },
            apiVersion: apiVersion,
            preview,
        };
        const unsignedTx = (await this.bitgo
            .post(this.bitgo.url('/wallet/' + this.wallet.id() + '/txrequests', 2))
            .send(whitelistedParams)
            .result());
        return unsignedTx;
    }
    /**
     * Create a tx request from params for message signing
     *
     * @param params
     * @param apiVersion
     * @param preview
     */
    async createTxRequestWithIntentForMessageSigning(params, apiVersion = 'full', preview) {
        var _a, _b;
        const intentOptions = {
            custodianMessageId: params.custodianMessageId,
            intentType: params.intentType,
            sequenceId: params.sequenceId,
            comment: params.comment,
            memo: (_a = params.memo) === null || _a === void 0 ? void 0 : _a.value,
            isTss: params.isTss,
            messageRaw: params.messageRaw,
            messageEncoded: (_b = params.messageEncoded) !== null && _b !== void 0 ? _b : '',
        };
        return this.createTxRequestBase(intentOptions, apiVersion, preview);
    }
    /**
     * Create a tx request from params for type data signing
     *
     * @param params
     * @param apiVersion
     * @param preview
     */
    async createTxRequestWithIntentForTypedDataSigning(params, apiVersion = 'full', preview) {
        var _a, _b;
        const intentOptions = {
            custodianMessageId: params.custodianMessageId,
            intentType: params.intentType,
            sequenceId: params.sequenceId,
            comment: params.comment,
            memo: (_a = params.memo) === null || _a === void 0 ? void 0 : _a.value,
            isTss: params.isTss,
            messageRaw: params.typedDataRaw,
            messageEncoded: (_b = params.typedDataEncoded) !== null && _b !== void 0 ? _b : '',
        };
        return this.createTxRequestBase(intentOptions, apiVersion, preview);
    }
    /**
     * Calls Bitgo API to create tx request.
     *
     * @private
     */
    async createTxRequestBase(intentOptions, apiVersion, preview) {
        const whitelistedParams = {
            intent: {
                ...intentOptions,
            },
            apiVersion,
            preview,
        };
        return this.bitgo
            .post(this.bitgo.url(`/wallet/${this.wallet.id()}/txrequests`, 2))
            .send(whitelistedParams)
            .result();
    }
    /**
     * Call delete signature shares for a txRequest, the endpoint delete the signatures and return them
     *
     * @param {string} txRequestId tx id reference to delete signature shares
     * @returns {SignatureShareRecord[]}
     */
    async deleteSignatureShares(txRequestId) {
        return this.bitgo
            .del(this.bitgo.url(`/wallet/${this.wallet.id()}/txrequests/${txRequestId}/signatureshares`, 2))
            .send()
            .result();
    }
    /**
     * Initialize the send procedure once Bitgo has the User To Bitgo GShare
     *
     * @param {String} txRequestId - the txRequest Id
     * @returns {Promise<any>}
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async sendTxRequest(txRequestId) {
        return this.bitgo
            .post(this.baseCoin.url('/wallet/' + this.wallet.id() + '/tx/send'))
            .send({ txRequestId })
            .result();
    }
    /**
     * Delete signature shares, get the tx request without them from the db and sign it to finally send it.
     *
     * Note : This can be performed in order to reach latest network conditions required on pending approval flow.
     *
     * @param {String} txRequestId - the txRequest Id to make the requests.
     * @param {String} decryptedPrv - decrypted prv to sign the tx request.
     * @param {RequestTracer} reqId id tracer.
     * @returns {Promise<any>}
     */
    async recreateTxRequest(txRequestId, decryptedPrv, reqId) {
        await this.deleteSignatureShares(txRequestId);
        // after delete signatures shares get the tx without them
        const txRequest = await tss_1.getTxRequest(this.bitgo, this.wallet.id(), txRequestId);
        return await this.signTxRequest({ txRequest, prv: decryptedPrv, reqId });
    }
    /**
     * Gets the latest Tx Request by id
     *
     * @param {String} txRequestId - the txRequest Id
     * @returns {Promise<TxRequest>}
     */
    async getTxRequest(txRequestId) {
        return tss_1.getTxRequest(this.bitgo, this.wallet.id(), txRequestId);
    }
    /**
     * Checks whether the third party backup provider is valid/supported
     * @param backupProvider - the backup provider client selected
     */
    isValidThirdPartyBackupProvider(backupProvider) {
        // As of now, BitGo is the only supported KRS provider for TSS
        return !!(backupProvider && backupProvider === 'BitGoTrustAsKrs');
    }
    /**
     * It gets the appropriate BitGo GPG public key for key creation based on a
     * combination of coin and the feature flags on the user and their enterprise if set.
     * @param enterpriseId - enterprise under which user wants to create the wallet
     */
    async getBitgoGpgPubkeyBasedOnFeatureFlags(enterpriseId) {
        const response = await this.bitgo
            .get(this.baseCoin.url('/tss/pubkey'))
            .query({ enterpriseId })
            .result();
        const bitgoPublicKeyStr = response.publicKey;
        return openpgp_1.readKey({ armoredKey: bitgoPublicKeyStr });
    }
    /**
     * Returns supported TxRequest versions for this wallet
     */
    supportedTxRequestVersions() {
        var _a, _b, _c, _d;
        const walletType = (_a = this._wallet) === null || _a === void 0 ? void 0 : _a.type();
        const supportedWalletTypes = ['custodial', 'cold', 'hot'];
        if (!walletType || ((_b = this._wallet) === null || _b === void 0 ? void 0 : _b.multisigType()) !== 'tss' || !supportedWalletTypes.includes(walletType)) {
            return [];
        }
        else if (((_c = this._wallet) === null || _c === void 0 ? void 0 : _c.baseCoin.getMPCAlgorithm()) === 'ecdsa') {
            return ['full'];
        }
        else if (walletType === 'custodial' || walletType === 'cold') {
            return ['full'];
        }
        else if (((_d = this._wallet) === null || _d === void 0 ? void 0 : _d.baseCoin.getMPCAlgorithm()) === 'eddsa' && walletType === 'hot') {
            return ['lite', 'full'];
        }
        return [];
    }
    /**
     * Returns true if the txRequest is using apiVersion == full and is pending approval
     * @param txRequest
     * @returns boolean
     */
    isPendingApprovalTxRequestFull(txRequest) {
        const { apiVersion, state } = txRequest;
        return apiVersion === 'full' && 'pendingApproval' === state;
    }
}
exports.default = BaseTssUtils;
//# sourceMappingURL=data:application/json;base64,