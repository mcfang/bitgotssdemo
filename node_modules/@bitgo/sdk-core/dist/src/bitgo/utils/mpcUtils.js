"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MpcUtils = void 0;
/**
 * @prettier
 */
const assert_1 = __importDefault(require("assert"));
const openpgp_1 = require("openpgp");
const opengpgUtils_1 = require("./opengpgUtils");
class MpcUtils {
    constructor(bitgo, baseCoin) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
    }
    async decryptPrivateShare(privateShare, userGpgKey) {
        const privateShareMessage = await openpgp_1.readMessage({
            armoredMessage: privateShare,
        });
        const userGpgPrivateKey = await openpgp_1.readPrivateKey({ armoredKey: userGpgKey.privateKey });
        const decryptedPrivateShare = (await openpgp_1.decrypt({
            message: privateShareMessage,
            decryptionKeys: [userGpgPrivateKey],
            format: 'utf8',
        })).data;
        return decryptedPrivateShare;
    }
    async createBitgoKeychainInWP(userGpgKey, backupGpgKey, userKeyShare, backupKeyShare, keyType, enterprise) {
        const bitgoKey = await opengpgUtils_1.getBitgoGpgPubKey(this.bitgo);
        const encUserToBitGoMessage = await opengpgUtils_1.encryptText(userKeyShare.privateShare, bitgoKey);
        const encBackupToBitGoMessage = await opengpgUtils_1.encryptText(backupKeyShare.privateShare, bitgoKey);
        const createBitGoMPCParams = {
            keyType,
            source: 'bitgo',
            keyShares: [
                {
                    from: 'user',
                    to: 'bitgo',
                    publicShare: userKeyShare.publicShare,
                    privateShare: encUserToBitGoMessage,
                    privateShareProof: userKeyShare.privateShareProof,
                    vssProof: userKeyShare.vssProof,
                },
                {
                    from: 'backup',
                    to: 'bitgo',
                    publicShare: backupKeyShare.publicShare,
                    privateShare: encBackupToBitGoMessage,
                    privateShareProof: backupKeyShare.privateShareProof,
                    vssProof: backupKeyShare.vssProof,
                },
            ],
            userGPGPublicKey: userGpgKey.publicKey,
            backupGPGPublicKey: backupGpgKey.publicKey,
            enterprise: enterprise,
        };
        return await this.baseCoin.keychains().add(createBitGoMPCParams);
    }
    /**
     * This function would be responsible for populating intents
     * based on the type of coin / sig scheme the coin uses
     * @param {IBaseCoin} baseCoin
     * @param {PrebuildTransactionWithIntentOptions} params
     * @returns {Record<string, unknown>}
     */
    populateIntent(baseCoin, params) {
        var _a, _b, _c;
        const chain = this.baseCoin.getChain();
        if (!['acceleration', 'fillNonce', 'transferToken'].includes(params.intentType)) {
            assert_1.default(params.recipients, `'recipients' is a required parameter for ${params.intentType} intent`);
        }
        const intentRecipients = (_a = params.recipients) === null || _a === void 0 ? void 0 : _a.map((recipient) => {
            const formattedRecipient = {
                address: { address: recipient.address },
                amount: { value: `${recipient.amount}`, symbol: recipient.tokenName ? recipient.tokenName : chain },
            };
            if (recipient.data) {
                formattedRecipient.data = recipient.data;
            }
            const { tokenData } = recipient;
            if (tokenData && (tokenData.tokenContractAddress || tokenData.tokenName)) {
                // token related recipient data gets validated in WP
                if (!(tokenData.tokenType && tokenData.tokenQuantity)) {
                    throw new Error('token type and quantity is required to request a transaction with intent to transfer a token');
                }
                formattedRecipient.tokenData = tokenData;
            }
            return formattedRecipient;
        });
        const baseIntent = {
            intentType: params.intentType,
            sequenceId: params.sequenceId,
            comment: params.comment,
            nonce: params.nonce,
            recipients: intentRecipients,
        };
        if (baseCoin.getFamily() === 'eth' || baseCoin.getFamily() === 'polygon' || baseCoin.getFamily() === 'bsc') {
            switch (params.intentType) {
                case 'payment':
                case 'transferToken':
                case 'fillNonce':
                    return {
                        ...baseIntent,
                        selfSend: params.selfSend,
                        feeOptions: params.feeOptions,
                        hopParams: params.hopParams,
                        isTss: params.isTss,
                        nonce: params.nonce,
                        custodianTransactionId: params.custodianTransactionId,
                        receiveAddress: params.receiveAddress,
                    };
                case 'acceleration':
                    return {
                        ...baseIntent,
                        txid: params.lowFeeTxid,
                        receiveAddress: params.receiveAddress,
                        feeOptions: params.feeOptions,
                    };
                default:
                    throw new Error(`Unsupported intent type ${params.intentType}`);
            }
        }
        if (params.feeOptions !== undefined) {
            return {
                ...baseIntent,
                memo: (_b = params.memo) === null || _b === void 0 ? void 0 : _b.value,
                token: params.tokenName,
                enableTokens: params.enableTokens,
                feeOptions: params.feeOptions,
            };
        }
        return {
            ...baseIntent,
            memo: (_c = params.memo) === null || _c === void 0 ? void 0 : _c.value,
            token: params.tokenName,
            enableTokens: params.enableTokens,
        };
    }
}
exports.MpcUtils = MpcUtils;
//# sourceMappingURL=data:application/json;base64,