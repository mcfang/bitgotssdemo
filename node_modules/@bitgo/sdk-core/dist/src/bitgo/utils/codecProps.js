"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCodecProperties = void 0;
const t = __importStar(require("io-ts"));
/**
 * @param type
 * @returns {string[]} the top-level properties of a codec
 */
function getCodecProperties(type) {
    if (type instanceof t.IntersectionType) {
        return type.types.flatMap(getCodecProperties);
    }
    if (type instanceof t.ExactType) {
        return getCodecProperties(type.type);
    }
    if (type instanceof t.PartialType || type instanceof t.InterfaceType) {
        return Object.keys(type.props);
    }
    throw new Error(`Unsupported type: ${type.name}`);
}
exports.getCodecProperties = getCodecProperties;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWNQcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaXRnby91dGlscy9jb2RlY1Byb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5Q0FBMkI7QUFFM0I7OztHQUdHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQUMsSUFBaUI7SUFDbEQsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDLGdCQUFnQixFQUFFO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztLQUMvQztJQUNELElBQUksSUFBSSxZQUFZLENBQUMsQ0FBQyxTQUFTLEVBQUU7UUFDL0IsT0FBTyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDdEM7SUFDRCxJQUFJLElBQUksWUFBWSxDQUFDLENBQUMsV0FBVyxJQUFJLElBQUksWUFBWSxDQUFDLENBQUMsYUFBYSxFQUFFO1FBQ3BFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDaEM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBWkQsZ0RBWUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0IGZyb20gJ2lvLXRzJztcblxuLyoqXG4gKiBAcGFyYW0gdHlwZVxuICogQHJldHVybnMge3N0cmluZ1tdfSB0aGUgdG9wLWxldmVsIHByb3BlcnRpZXMgb2YgYSBjb2RlY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29kZWNQcm9wZXJ0aWVzKHR5cGU6IHQuVHlwZTxhbnk+KTogc3RyaW5nW10ge1xuICBpZiAodHlwZSBpbnN0YW5jZW9mIHQuSW50ZXJzZWN0aW9uVHlwZSkge1xuICAgIHJldHVybiB0eXBlLnR5cGVzLmZsYXRNYXAoZ2V0Q29kZWNQcm9wZXJ0aWVzKTtcbiAgfVxuICBpZiAodHlwZSBpbnN0YW5jZW9mIHQuRXhhY3RUeXBlKSB7XG4gICAgcmV0dXJuIGdldENvZGVjUHJvcGVydGllcyh0eXBlLnR5cGUpO1xuICB9XG4gIGlmICh0eXBlIGluc3RhbmNlb2YgdC5QYXJ0aWFsVHlwZSB8fCB0eXBlIGluc3RhbmNlb2YgdC5JbnRlcmZhY2VUeXBlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHR5cGUucHJvcHMpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB0eXBlOiAke3R5cGUubmFtZX1gKTtcbn1cbiJdfQ==