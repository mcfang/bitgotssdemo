"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultConstants = exports.defaults = exports.krsProviders = void 0;
const _ = __importStar(require("lodash"));
const statics_1 = require("@bitgo/statics");
const environments_1 = require("./environments");
// KRS providers and their fee structures
exports.krsProviders = {
    keyternal: {
        feeType: 'flatUsd',
        feeAmount: 99,
        supportedCoins: ['btc', 'eth'],
        feeAddresses: {
            btc: '', // TODO [BG-6965] Get address from Keyternal - recovery will fail for now until Keyternal is ready
        },
    },
    bitgoKRSv2: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth'],
    },
    dai: {
        feeType: 'flatUsd',
        feeAmount: 0,
        supportedCoins: ['btc', 'eth', 'xlm', 'xrp', 'dash', 'zec', 'ltc', 'bch', 'bsv', 'bcha'],
    },
};
exports.defaults = {
    maxFee: 0.1e8,
    maxFeeRate: 1000000,
    minFeeRate: 5000,
    fallbackFeeRate: 50000,
    minOutputSize: 2730,
    minInstantFeeRate: 10000,
    bitgoEthAddress: '0x0f47ea803926926f299b7f1afc8460888d850f47',
};
// TODO: once server starts returning eth address keychains, remove bitgoEthAddress
/**
 * Get the default (hardcoded) constants for a particular network.
 *
 * Note that this may not be the complete set of constants, and additional constants may get fetched
 * from BitGo during the lifespan of a BitGo object.
 * @param env
 */
const defaultConstants = (env) => {
    if (environments_1.Environments[env] === undefined) {
        throw Error(`invalid environment ${env}`);
    }
    const network = environments_1.Environments[env].network;
    return _.merge({}, exports.defaults, statics_1.tokens[network]);
};
exports.defaultConstants = defaultConstants;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JpdGdvL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMENBQTRCO0FBQzVCLDRDQUF3QztBQUN4QyxpREFBK0Q7QUFTL0QseUNBQXlDO0FBQzVCLFFBQUEsWUFBWSxHQUFnQztJQUN2RCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsU0FBUztRQUNsQixTQUFTLEVBQUUsRUFBRTtRQUNiLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7UUFDOUIsWUFBWSxFQUFFO1lBQ1osR0FBRyxFQUFFLEVBQUUsRUFBRSxrR0FBa0c7U0FDNUc7S0FDRjtJQUNELFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFNBQVMsRUFBRSxDQUFDO1FBQ1osY0FBYyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztLQUMvQjtJQUNELEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFNBQVMsRUFBRSxDQUFDO1FBQ1osY0FBYyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDO0tBQ3pGO0NBQ0YsQ0FBQztBQUVXLFFBQUEsUUFBUSxHQUFHO0lBQ3RCLE1BQU0sRUFBRSxLQUFLO0lBQ2IsVUFBVSxFQUFFLE9BQU87SUFDbkIsVUFBVSxFQUFFLElBQUk7SUFDaEIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsYUFBYSxFQUFFLElBQUk7SUFDbkIsaUJBQWlCLEVBQUUsS0FBSztJQUN4QixlQUFlLEVBQUUsNENBQTRDO0NBQzlELENBQUM7QUFFRixtRkFBbUY7QUFDbkY7Ozs7OztHQU1HO0FBQ0ksTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQW9CLEVBQUUsRUFBRTtJQUN2RCxJQUFJLDJCQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQ25DLE1BQU0sS0FBSyxDQUFDLHVCQUF1QixHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsTUFBTSxPQUFPLEdBQUcsMkJBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDMUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxnQkFBUSxFQUFFLGdCQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFQVyxRQUFBLGdCQUFnQixvQkFPM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB0b2tlbnMgfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudE5hbWUsIEVudmlyb25tZW50cyB9IGZyb20gJy4vZW52aXJvbm1lbnRzJztcblxuZXhwb3J0IHR5cGUgS3JzUHJvdmlkZXIgPSB7XG4gIGZlZVR5cGU6ICdmbGF0VXNkJztcbiAgZmVlQW1vdW50OiBudW1iZXI7XG4gIHN1cHBvcnRlZENvaW5zOiBzdHJpbmdbXTtcbiAgZmVlQWRkcmVzc2VzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn07XG5cbi8vIEtSUyBwcm92aWRlcnMgYW5kIHRoZWlyIGZlZSBzdHJ1Y3R1cmVzXG5leHBvcnQgY29uc3Qga3JzUHJvdmlkZXJzOiBSZWNvcmQ8c3RyaW5nLCBLcnNQcm92aWRlcj4gPSB7XG4gIGtleXRlcm5hbDoge1xuICAgIGZlZVR5cGU6ICdmbGF0VXNkJyxcbiAgICBmZWVBbW91bnQ6IDk5LFxuICAgIHN1cHBvcnRlZENvaW5zOiBbJ2J0YycsICdldGgnXSxcbiAgICBmZWVBZGRyZXNzZXM6IHtcbiAgICAgIGJ0YzogJycsIC8vIFRPRE8gW0JHLTY5NjVdIEdldCBhZGRyZXNzIGZyb20gS2V5dGVybmFsIC0gcmVjb3Zlcnkgd2lsbCBmYWlsIGZvciBub3cgdW50aWwgS2V5dGVybmFsIGlzIHJlYWR5XG4gICAgfSxcbiAgfSxcbiAgYml0Z29LUlN2Mjoge1xuICAgIGZlZVR5cGU6ICdmbGF0VXNkJyxcbiAgICBmZWVBbW91bnQ6IDAsIC8vIHdlIHdpbGwgcmVjZWl2ZSBwYXltZW50cyBvZmYtY2hhaW5cbiAgICBzdXBwb3J0ZWRDb2luczogWydidGMnLCAnZXRoJ10sXG4gIH0sXG4gIGRhaToge1xuICAgIGZlZVR5cGU6ICdmbGF0VXNkJyxcbiAgICBmZWVBbW91bnQ6IDAsIC8vIGRhaSB3aWxsIHJlY2VpdmUgcGF5bWVudHMgb2ZmLWNoYWluXG4gICAgc3VwcG9ydGVkQ29pbnM6IFsnYnRjJywgJ2V0aCcsICd4bG0nLCAneHJwJywgJ2Rhc2gnLCAnemVjJywgJ2x0YycsICdiY2gnLCAnYnN2JywgJ2JjaGEnXSxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0cyA9IHtcbiAgbWF4RmVlOiAwLjFlOCxcbiAgbWF4RmVlUmF0ZTogMTAwMDAwMCxcbiAgbWluRmVlUmF0ZTogNTAwMCxcbiAgZmFsbGJhY2tGZWVSYXRlOiA1MDAwMCxcbiAgbWluT3V0cHV0U2l6ZTogMjczMCxcbiAgbWluSW5zdGFudEZlZVJhdGU6IDEwMDAwLFxuICBiaXRnb0V0aEFkZHJlc3M6ICcweDBmNDdlYTgwMzkyNjkyNmYyOTliN2YxYWZjODQ2MDg4OGQ4NTBmNDcnLFxufTtcblxuLy8gVE9ETzogb25jZSBzZXJ2ZXIgc3RhcnRzIHJldHVybmluZyBldGggYWRkcmVzcyBrZXljaGFpbnMsIHJlbW92ZSBiaXRnb0V0aEFkZHJlc3Ncbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IChoYXJkY29kZWQpIGNvbnN0YW50cyBmb3IgYSBwYXJ0aWN1bGFyIG5ldHdvcmsuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgbWF5IG5vdCBiZSB0aGUgY29tcGxldGUgc2V0IG9mIGNvbnN0YW50cywgYW5kIGFkZGl0aW9uYWwgY29uc3RhbnRzIG1heSBnZXQgZmV0Y2hlZFxuICogZnJvbSBCaXRHbyBkdXJpbmcgdGhlIGxpZmVzcGFuIG9mIGEgQml0R28gb2JqZWN0LlxuICogQHBhcmFtIGVudlxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbnN0YW50cyA9IChlbnY6IEVudmlyb25tZW50TmFtZSkgPT4ge1xuICBpZiAoRW52aXJvbm1lbnRzW2Vudl0gPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IEVycm9yKGBpbnZhbGlkIGVudmlyb25tZW50ICR7ZW52fWApO1xuICB9XG5cbiAgY29uc3QgbmV0d29yayA9IEVudmlyb25tZW50c1tlbnZdLm5ldHdvcms7XG4gIHJldHVybiBfLm1lcmdlKHt9LCBkZWZhdWx0cywgdG9rZW5zW25ldHdvcmtdKTtcbn07XG5cbmV4cG9ydCB0eXBlIENvbmZpZyA9IHtcbiAga3JzUHJvdmlkZXJzOiBSZWNvcmQ8c3RyaW5nLCBLcnNQcm92aWRlcj47XG59O1xuIl19