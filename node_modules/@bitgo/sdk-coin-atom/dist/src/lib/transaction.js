"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const encoding_1 = require("@cosmjs/encoding");
const proto_signing_1 = require("@cosmjs/proto-signing");
const tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
const constants_1 = require("./constants");
const utils_1 = __importDefault(require("./utils"));
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    get atomTransaction() {
        return this._atomTransaction;
    }
    set atomTransaction(atomTransaction) {
        this._atomTransaction = atomTransaction;
    }
    get chainId() {
        return this._chainId;
    }
    set chainId(chainId) {
        this._chainId = chainId;
    }
    get accountNumber() {
        return this._accountNumber;
    }
    set accountNumber(accountNumber) {
        this._accountNumber = accountNumber;
    }
    /** @inheritDoc **/
    get id() {
        var _a;
        if (this._id) {
            return this._id;
        }
        else if (((_a = this._atomTransaction) === null || _a === void 0 ? void 0 : _a.hash) !== undefined) {
            return this._atomTransaction.hash;
        }
        return constants_1.UNAVAILABLE_TEXT;
    }
    /** @inheritdoc */
    canSign(key) {
        return true;
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._atomTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        return this.serialize();
    }
    /** @inheritdoc */
    toJson() {
        if (!this._atomTransaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        const tx = this._atomTransaction;
        return {
            id: this.id,
            type: this._type,
            sequence: tx.sequence,
            sendMessages: tx.sendMessages,
            gasBudget: tx.gasBudget,
            publicKey: tx.publicKey,
            signature: tx.signature,
            accountNumber: this._accountNumber,
            chainId: this._chainId,
            hash: tx.hash,
            memo: tx.memo,
        };
    }
    /** @inheritDoc */
    explainTransaction() {
        const result = this.toJson();
        const displayOrder = ['id', 'outputs', 'outputAmount', 'changeOutputs', 'changeAmount', 'fee', 'type'];
        const outputs = [];
        const explanationResult = {
            displayOrder,
            id: this.id,
            outputs,
            outputAmount: '0',
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: this.atomTransaction.gasBudget.amount[0].amount },
            type: this.type,
        };
        return this.explainTransactionInternal(result, explanationResult);
    }
    /**
     * Set the transaction type.
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    set transactionType(transactionType) {
        this._type = transactionType;
    }
    /**
     * Sets this transaction payload
     * @param rawTransaction raw transaction in base64 encoded string
     */
    enrichTransactionDetailsFromRawTransaction(rawTransaction) {
        if (utils_1.default.isValidHexString(rawTransaction)) {
            this.atomTransaction = utils_1.default.deserializeAtomTransaction(encoding_1.toBase64(encoding_1.fromHex(rawTransaction)));
        }
        else {
            this.atomTransaction = utils_1.default.deserializeAtomTransaction(rawTransaction);
        }
        if (this.atomTransaction.signature) {
            this.addSignature(Buffer.from(this.atomTransaction.signature).toString('hex'));
        }
        const typeUrl = this.atomTransaction.sendMessages[0].typeUrl;
        const transactionType = utils_1.default.getTransactionTypeFromTypeUrl(typeUrl);
        if (transactionType === undefined) {
            throw new Error('Transaction type is not supported ' + typeUrl);
        }
        this.transactionType = transactionType;
    }
    /**
     * Add a signature to the transaction
     * @param {string} signature in hex format
     */
    addSignature(signature) {
        this._signatures = [];
        this._signatures.push(signature);
    }
    /**
     * Serialize the transaction to a JSON string
     * @returns {string} serialized base64 encoded transaction
     */
    serialize() {
        var _a;
        const txRaw = utils_1.default.createTxRawFromAtomTransaction(this.atomTransaction);
        if (((_a = this.atomTransaction) === null || _a === void 0 ? void 0 : _a.publicKey) !== undefined && this._signatures.length > 0) {
            const signedRawTx = utils_1.default.createSignedTxRaw(this.atomTransaction.publicKey, this._signatures[0], txRaw);
            return encoding_1.toBase64(tx_1.TxRaw.encode(signedRawTx).finish());
        }
        return encoding_1.toBase64(tx_1.TxRaw.encode(txRaw).finish());
    }
    /** @inheritdoc **/
    get signablePayload() {
        return Buffer.from(proto_signing_1.makeSignBytes(utils_1.default.createSignDoc(this.atomTransaction, this._accountNumber, this._chainId)));
    }
    /**
     * Returns a complete explanation for a transfer transaction
     * Currently only supports one message per transfer.
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainTransactionInternal(json, explanationResult) {
        let outputs;
        let outputAmount;
        switch (json.type) {
            case sdk_core_1.TransactionType.Send:
                explanationResult.type = sdk_core_1.TransactionType.Send;
                outputAmount = BigInt(0);
                outputs = json.sendMessages.map((message) => {
                    const sendMessage = message.value;
                    outputAmount = outputAmount + BigInt(sendMessage.amount[0].amount);
                    return {
                        address: sendMessage.toAddress,
                        amount: sendMessage.amount[0].amount,
                    };
                });
                break;
            case sdk_core_1.TransactionType.StakingActivate:
                explanationResult.type = sdk_core_1.TransactionType.StakingActivate;
                outputAmount = BigInt(0);
                outputs = json.sendMessages.map((message) => {
                    const delegateMessage = message.value;
                    outputAmount = outputAmount + BigInt(delegateMessage.amount.amount);
                    return {
                        address: delegateMessage.validatorAddress,
                        amount: delegateMessage.amount.amount,
                    };
                });
                break;
            case sdk_core_1.TransactionType.StakingDeactivate:
                explanationResult.type = sdk_core_1.TransactionType.StakingDeactivate;
                outputAmount = BigInt(0);
                outputs = json.sendMessages.map((message) => {
                    const delegateMessage = message.value;
                    outputAmount = outputAmount + BigInt(delegateMessage.amount.amount);
                    return {
                        address: delegateMessage.validatorAddress,
                        amount: delegateMessage.amount.amount,
                    };
                });
                break;
            case sdk_core_1.TransactionType.StakingWithdraw:
                explanationResult.type = sdk_core_1.TransactionType.StakingWithdraw;
                outputs = json.sendMessages.map((message) => {
                    const withdrawMessage = message.value;
                    return {
                        address: withdrawMessage.validatorAddress,
                        amount: constants_1.UNAVAILABLE_TEXT,
                    };
                });
                break;
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
        if (json.memo) {
            outputs.forEach((output) => {
                output.memo = json.memo;
            });
        }
        return {
            ...explanationResult,
            outputAmount: outputAmount === null || outputAmount === void 0 ? void 0 : outputAmount.toString(),
            outputs,
        };
    }
    loadInputsAndOutputs() {
        if (this.type === undefined || !this.atomTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Transaction type or atomTransaction is not set');
        }
        const outputs = [];
        const inputs = [];
        switch (this.type) {
            case sdk_core_1.TransactionType.Send:
                this.atomTransaction.sendMessages.forEach((message) => {
                    const sendMessage = message.value;
                    inputs.push({
                        address: sendMessage.fromAddress,
                        value: sendMessage.amount[0].amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: sendMessage.toAddress,
                        value: sendMessage.amount[0].amount,
                        coin: this._coinConfig.name,
                    });
                });
                break;
            case sdk_core_1.TransactionType.StakingActivate:
            case sdk_core_1.TransactionType.StakingDeactivate:
                this.atomTransaction.sendMessages.forEach((message) => {
                    const delegateMessage = message.value;
                    inputs.push({
                        address: delegateMessage.delegatorAddress,
                        value: delegateMessage.amount.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: delegateMessage.validatorAddress,
                        value: delegateMessage.amount.amount,
                        coin: this._coinConfig.name,
                    });
                });
                break;
            case sdk_core_1.TransactionType.StakingWithdraw:
                this.atomTransaction.sendMessages.forEach((message) => {
                    const withdrawMessage = message.value;
                    inputs.push({
                        address: withdrawMessage.delegatorAddress,
                        value: constants_1.UNAVAILABLE_TEXT,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: withdrawMessage.validatorAddress,
                        value: constants_1.UNAVAILABLE_TEXT,
                        coin: this._coinConfig.name,
                    });
                });
                break;
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
        this._inputs = inputs;
        this._outputs = outputs;
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,