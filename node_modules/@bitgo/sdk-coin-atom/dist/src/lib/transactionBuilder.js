"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const crypto_1 = require("@cosmjs/crypto");
const proto_signing_1 = require("@cosmjs/proto-signing");
const keyPair_1 = require("./keyPair");
const transaction_1 = require("./transaction");
const utils_1 = __importDefault(require("./utils"));
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new transaction_1.Transaction(_coinConfig);
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritDoc */
    addSignature(publicKey, signature) {
        this._signature = signature;
        this._publicKey = publicKey.pub;
    }
    /**
     * Sets gas budget of this transaction
     * Gas budget consist of fee amount and gas limit. Division feeAmount/gasLimit represents
     * the gas-fee and it should be more than minimum required gas-fee to process the transaction
     * @param {FeeData} gasBudget
     * @returns {TransactionBuilder} this transaction builder
     */
    gasBudget(gasBudget) {
        utils_1.default.validateGasBudget(gasBudget);
        this._gasBudget = gasBudget;
        return this;
    }
    /**
     * Sets sequence of this transaction.
     * @param {number} sequence - sequence data for tx signer
     * @returns {TransactionBuilder} This transaction builder
     */
    sequence(sequence) {
        utils_1.default.validateSequence(sequence);
        this._sequence = sequence;
        return this;
    }
    publicKey(publicKey) {
        this._publicKey = publicKey;
        return this;
    }
    accountNumber(accountNumber) {
        this._accountNumber = accountNumber;
        return this;
    }
    chainId(chainId) {
        this._chainId = chainId;
        return this;
    }
    memo(memo) {
        this._memo = memo;
        return this;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        const txData = tx.toJson();
        this.gasBudget(txData.gasBudget);
        this.messages(txData.sendMessages.map((message) => {
            return message.value;
        }));
        this.sequence(txData.sequence);
        this.publicKey(txData.publicKey);
        this.accountNumber(txData.accountNumber);
        this.chainId(txData.chainId);
        this.memo(txData.memo);
        if (tx.signature && tx.signature.length > 0) {
            this.addSignature({ pub: txData.publicKey }, Buffer.from(tx.signature[0], 'hex'));
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        tx.enrichTransactionDetailsFromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        var _a;
        this.transaction.transactionType = this.transactionType;
        if (this._accountNumber) {
            this.transaction.accountNumber = this._accountNumber;
        }
        if (this._chainId) {
            this.transaction.chainId = this._chainId;
        }
        this.transaction.atomTransaction = utils_1.default.createAtomTransaction(this._sequence, this._messages, this._gasBudget, this._publicKey, this._memo);
        const privateKey = (_a = this._signer) === null || _a === void 0 ? void 0 : _a.getPrivateKey();
        if (privateKey !== undefined && this.transaction.atomTransaction.publicKey !== undefined) {
            const signDoc = utils_1.default.createSignDoc(this.transaction.atomTransaction, this._accountNumber, this._chainId);
            const txnHash = crypto_1.sha256(proto_signing_1.makeSignBytes(signDoc));
            const signature = await crypto_1.Secp256k1.createSignature(txnHash, privateKey);
            const compressedSig = Buffer.concat([signature.r(), signature.s()]);
            this.addSignature({ pub: this.transaction.atomTransaction.publicKey }, compressedSig);
        }
        if (this._signature !== undefined) {
            this.transaction.addSignature(this._signature.toString('hex'));
            this.transaction.atomTransaction = utils_1.default.createAtomTransactionWithHash(this._sequence, this._messages, this._gasBudget, this._publicKey, this._signature, this._memo);
        }
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this.validateKey(key);
        if (this._accountNumber === undefined) {
            throw new sdk_core_1.SigningError('accountNumber is required before signing');
        }
        if (this._chainId === undefined) {
            throw new sdk_core_1.SigningError('chainId is required before signing');
        }
        this._signer = new keyPair_1.KeyPair({ prv: key.key });
        this._publicKey = this._signer.getKeys().pub;
        return this.transaction;
    }
    validateAddress(address, addressFormat) {
        if (!(utils_1.default.isValidAddress(address.address) || utils_1.default.isValidValidatorAddress(address.address))) {
            throw new sdk_core_1.BuildTransactionError('transactionBuilder: address isValidAddress check failed: ' + address.address);
        }
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
        }
        catch {
            throw new sdk_core_1.BuildTransactionError(`Key validation failed`);
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Invalid raw transaction: Undefined rawTransaction');
        }
        try {
        }
        catch (e) {
            throw new sdk_core_1.InvalidTransactionError('Invalid raw transaction: ' + e.message);
        }
        const atomTransaction = utils_1.default.deserializeAtomTransaction(rawTransaction);
        utils_1.default.validateAtomTransaction(atomTransaction);
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        utils_1.default.validateAtomTransaction({
            sequence: this._sequence,
            sendMessages: this._messages,
            gasBudget: this._gasBudget,
            publicKey: this._publicKey,
        });
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,