import { BaseTransactionBuilderFactory } from '@bitgo/sdk-core';
import { TransactionBuilder } from './transactionBuilder';
import { TransferBuilder } from './transferBuilder';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { Transaction } from './transaction';
import { StakingActivateBuilder } from './StakingActivateBuilder';
import { StakingDeactivateBuilder } from './StakingDeactivateBuilder';
import { StakingWithdrawRewardsBuilder } from './StakingWithdrawRewardsBuilder';
export declare class TransactionBuilderFactory extends BaseTransactionBuilderFactory {
    constructor(_coinConfig: Readonly<CoinConfig>);
    /** @inheritdoc */
    from(raw: string): TransactionBuilder;
    /** @inheritdoc */
    getTransferBuilder(tx?: Transaction): TransferBuilder;
    /** @inheritdoc */
    getStakingActivateBuilder(tx?: Transaction): StakingActivateBuilder;
    /** @inheritdoc */
    getStakingDeactivateBuilder(tx?: Transaction): StakingDeactivateBuilder;
    /** @inheritdoc */
    getStakingWithdrawRewardsBuilder(tx?: Transaction): StakingWithdrawRewardsBuilder;
    /** @inheritdoc */
    getWalletInitializationBuilder(): void;
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    private initializeBuilder;
}
//# sourceMappingURL=transactionBuilderFactory.d.ts.map