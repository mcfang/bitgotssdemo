"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Atom = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const statics_1 = require("@bitgo/statics");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const bignumber_js_1 = require("bignumber.js");
const crypto_1 = require("crypto");
const _ = __importStar(require("lodash"));
const utils_1 = __importDefault(require("./lib/utils"));
const url_1 = __importDefault(require("url"));
const querystring_1 = __importDefault(require("querystring"));
const lib_1 = require("./lib");
const request = __importStar(require("superagent"));
const buffer_1 = require("buffer");
const constants_1 = require("./lib/constants");
class Atom extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Atom(bitgo, staticsCoin);
    }
    /** @inheritDoc **/
    getBaseFactor() {
        return 1e6;
    }
    /** @inheritDoc **/
    getChain() {
        return this._staticsCoin.name;
    }
    /** @inheritDoc **/
    getFamily() {
        return this._staticsCoin.family;
    }
    /** @inheritDoc **/
    getFullName() {
        return this._staticsCoin.fullName;
    }
    /** @inheritDoc */
    supportsTss() {
        return true;
    }
    /** @inheritDoc **/
    getMPCAlgorithm() {
        return 'ecdsa';
    }
    /** @inheritDoc **/
    isValidPub(pub) {
        return utils_1.default.isValidPublicKey(pub);
    }
    /** @inheritDoc **/
    isValidPrv(prv) {
        return utils_1.default.isValidPrivateKey(prv);
    }
    getBuilder() {
        return new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
    }
    /** @inheritDoc **/
    isValidAddress(address) {
        return utils_1.default.isValidAddress(address) || utils_1.default.isValidValidatorAddress(address);
    }
    /** @inheritDoc **/
    async verifyTransaction(params) {
        var _a;
        let totalAmount = new bignumber_js_1.BigNumber(0);
        const coinConfig = statics_1.coins.get(this.getChain());
        const { txPrebuild, txParams } = params;
        const rawTx = txPrebuild.txHex;
        if (!rawTx) {
            throw new Error('missing required tx prebuild property txHex');
        }
        const transaction = await new lib_1.TransactionBuilderFactory(coinConfig).from(rawTx).build();
        const explainedTx = transaction.explainTransaction();
        if (txParams.recipients && txParams.recipients.length > 0) {
            const filteredRecipients = (_a = txParams.recipients) === null || _a === void 0 ? void 0 : _a.map((recipient) => _.pick(recipient, ['address', 'amount']));
            const filteredOutputs = explainedTx.outputs.map((output) => _.pick(output, ['address', 'amount']));
            if (!_.isEqual(filteredOutputs, filteredRecipients)) {
                throw new Error('Tx outputs does not match with expected txParams recipients');
            }
            // WithdrawDelegatorRewards transaction doesn't have amount
            if (transaction.type !== sdk_core_1.TransactionType.StakingWithdraw) {
                for (const recipients of txParams.recipients) {
                    totalAmount = totalAmount.plus(recipients.amount);
                }
                if (!totalAmount.isEqualTo(explainedTx.outputAmount)) {
                    throw new Error('Tx total amount does not match with expected total amount field');
                }
            }
        }
        return true;
    }
    /** @inheritDoc **/
    async parseTransaction(params) {
        const transactionExplanation = await this.explainTransaction({ txHex: params.txHex });
        if (!transactionExplanation) {
            throw new Error('Invalid transaction');
        }
        if (transactionExplanation.outputs.length <= 0) {
            return {
                inputs: [],
                outputs: [],
            };
        }
        const senderAddress = transactionExplanation.outputs[0].address;
        const feeAmount = new bignumber_js_1.BigNumber(transactionExplanation.fee.fee === '' ? '0' : transactionExplanation.fee.fee);
        const inputs = [
            {
                address: senderAddress,
                amount: new bignumber_js_1.BigNumber(transactionExplanation.outputAmount).plus(feeAmount).toFixed(),
            },
        ];
        const outputs = transactionExplanation.outputs.map((output) => {
            return {
                address: output.address,
                amount: new bignumber_js_1.BigNumber(output.amount).toFixed(),
            };
        });
        return {
            inputs,
            outputs,
        };
    }
    /** @inheritDoc **/
    async explainTransaction(options) {
        if (!options.txHex) {
            throw new Error('missing required txHex parameter');
        }
        try {
            const transactionBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain())).from(options.txHex);
            const transaction = await transactionBuilder.build();
            return transaction.explainTransaction();
        }
        catch (e) {
            throw new Error('Invalid transaction: ' + e.message);
        }
    }
    /** @inheritDoc **/
    generateKeyPair(seed) {
        if (!seed) {
            // An extended private key has both a normal 256 bit private key and a 256
            // bit chain code, both of which must be random. 512 bits is therefore the
            // maximum entropy and gives us maximum security against cracking.
            seed = crypto_1.randomBytes(512 / 8);
        }
        const extendedKey = utxo_lib_1.bip32.fromSeed(seed);
        return {
            pub: extendedKey.neutered().toBase58(),
            prv: extendedKey.toBase58(),
        };
    }
    /**
     * Sign a transaction with a single private key
     * @param params parameters in the form of { txPrebuild: {txHex}, prv }
     * @returns signed transaction in the form of { txHex }
     */
    async signTransaction(params) {
        var _a;
        const txHex = (_a = params === null || params === void 0 ? void 0 : params.txPrebuild) === null || _a === void 0 ? void 0 : _a.txHex;
        const privateKey = params === null || params === void 0 ? void 0 : params.prv;
        if (!txHex) {
            throw new sdk_core_1.SigningError('missing required txPrebuild parameter: params.txPrebuild.txHex');
        }
        if (!privateKey) {
            throw new sdk_core_1.SigningError('missing required prv parameter: params.prv');
        }
        const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain())).from(params.txPrebuild.txHex);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new sdk_core_1.SigningError('Failed to build signed transaction');
        }
        const serializedTx = transaction.toBroadcastFormat();
        return {
            txHex: serializedTx,
        };
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param {RecoveryOptions} params parameters needed to construct and
     * (maybe) sign the transaction
     *
     * @returns {AtomTx} the serialized transaction hex string and index
     * of the address being swept
     */
    async recover(params) {
        // Step 1: Check if params contains the required parameters
        if (!params.bitgoKey) {
            throw new Error('missing bitgoKey');
        }
        if (!params.recoveryDestination || !this.isValidAddress(params.recoveryDestination)) {
            throw new Error('invalid recoveryDestination');
        }
        if (!params.userKey) {
            throw new Error('missing userKey');
        }
        if (!params.backupKey) {
            throw new Error('missing backupKey');
        }
        if (!params.walletPassphrase) {
            throw new Error('missing wallet passphrase');
        }
        // Step 2: Fetch the bitgo key from params
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        // Step 3: Instantiate the ECDSA signer and fetch the address details
        const MPC = new sdk_core_1.Ecdsa();
        const chainId = await this.getChainId();
        const currPath = 'm/0';
        const publicKey = MPC.deriveUnhardened(bitgoKey, currPath).slice(0, 66);
        const senderAddress = this.getAddressFromPublicKey(publicKey);
        // Step 4: Fetch account details such as accountNo, balance and check for sufficient funds once gasAmount has been deducted
        const [accountNumber, sequenceNo] = await this.getAccountDetails(senderAddress);
        const balance = new bignumber_js_1.BigNumber(await this.getAccountBalance(senderAddress));
        const gasBudget = {
            amount: [{ denom: 'uatom', amount: constants_1.GAS_AMOUNT }],
            gasLimit: constants_1.GAS_LIMIT,
        };
        const gasAmount = new bignumber_js_1.BigNumber(gasBudget.amount[0].amount);
        const actualBalance = balance.minus(gasAmount);
        if (actualBalance.isLessThanOrEqualTo(0)) {
            throw new Error('Did not have enough funds to recover');
        }
        // Step 5: Once sufficient funds are present, construct the recover tx messsage
        const amount = [
            {
                denom: 'uatom',
                amount: actualBalance.toFixed(),
            },
        ];
        const sendMessage = [
            {
                fromAddress: senderAddress,
                toAddress: params.recoveryDestination,
                amount: amount,
            },
        ];
        // Step 6: Build the unsigned tx using the constructed message
        const txnBuilder = this.getBuilder().getTransferBuilder();
        txnBuilder
            .messages(sendMessage)
            .gasBudget(gasBudget)
            .publicKey(publicKey)
            .sequence(Number(sequenceNo))
            .accountNumber(Number(accountNumber))
            .chainId(chainId);
        const unsignedTransaction = (await txnBuilder.build());
        let serializedTx = unsignedTransaction.toBroadcastFormat();
        const signableHex = unsignedTransaction.signablePayload.toString('hex');
        const userKey = params.userKey.replace(/\s/g, '');
        const backupKey = params.backupKey.replace(/\s/g, '');
        const [userKeyCombined, backupKeyCombined] = (() => {
            const [userKeyCombined, backupKeyCombined] = this.getKeyCombinedFromTssKeyShares(userKey, backupKey, params.walletPassphrase);
            return [userKeyCombined, backupKeyCombined];
        })();
        if (!userKeyCombined || !backupKeyCombined) {
            throw new Error('Missing combined key shares for user or backup');
        }
        // Step 7: Sign the tx
        const signature = await this.signRecoveryTSS(userKeyCombined, backupKeyCombined, signableHex);
        const signableBuffer = buffer_1.Buffer.from(signableHex, 'hex');
        MPC.verify(signableBuffer, signature, crypto_1.createHash('sha256'));
        const atomKeyPair = new lib_1.KeyPair({ pub: publicKey });
        txnBuilder.addSignature({ pub: atomKeyPair.getKeys().pub }, buffer_1.Buffer.from(signature.r + signature.s, 'hex'));
        const signedTransaction = await txnBuilder.build();
        serializedTx = signedTransaction.toBroadcastFormat();
        return { serializedTx: serializedTx, scanIndex: 0 };
    }
    /**
     * Get balance from public node
     */
    async getBalanceFromNode(senderAddress) {
        const nodeUrl = this.getPublicNodeUrl();
        const getBalancePath = 'cosmos/bank/v1beta1/balances/';
        const fullEndpoint = nodeUrl + getBalancePath + senderAddress;
        try {
            return await request.get(fullEndpoint).send();
        }
        catch (e) {
            console.debug(e);
        }
        throw new Error(`Unable to call endpoint ${getBalancePath + senderAddress} from node: ${nodeUrl}`);
    }
    /**
     * Helper to fetch chainId
     */
    async getChainId() {
        const response = await this.getChainIdFromNode();
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return response.body.block.header.chain_id;
    }
    /**
     * Get chain id from public node
     */
    async getChainIdFromNode() {
        const nodeUrl = this.getPublicNodeUrl();
        const getLatestBlockPath = 'cosmos/base/tendermint/v1beta1/blocks/latest';
        const fullEndpoint = nodeUrl + getLatestBlockPath;
        try {
            return await request.get(fullEndpoint).send();
        }
        catch (e) {
            console.debug(e);
        }
        throw new Error(`Unable to call endpoint ${getLatestBlockPath} from node: ${nodeUrl}`);
    }
    /**
     * Helper to fetch account number
     */
    async getAccountDetails(senderAddress) {
        const response = await this.getAccountFromNode(senderAddress);
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return [response.body.account.account_number, response.body.account.sequence];
    }
    /**
     * Get account number from public node
     */
    async getAccountFromNode(senderAddress) {
        const nodeUrl = this.getPublicNodeUrl();
        const getAccountPath = 'cosmos/auth/v1beta1/accounts/';
        const fullEndpoint = nodeUrl + getAccountPath + senderAddress;
        try {
            return await request.get(fullEndpoint).send();
        }
        catch (e) {
            console.debug(e);
        }
        throw new Error(`Unable to call endpoint ${getAccountPath + senderAddress} from node: ${nodeUrl}`);
    }
    /**
     * Helper to fetch account balance
     */
    async getAccountBalance(senderAddress) {
        const response = await this.getBalanceFromNode(senderAddress);
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return response.body.balances[0].amount;
    }
    /**
     * Get the public node url from the Environments constant we have defined
     */
    getPublicNodeUrl() {
        return sdk_core_1.Environments[this.bitgo.getEnv()].atomNodeUrl;
    }
    getAddressFromPublicKey(pubKey) {
        return new lib_1.KeyPair({ pub: pubKey }).getAddress();
    }
    /** @inheritDoc **/
    async isWalletAddress(params) {
        const addressDetails = this.getAddressDetails(params.address);
        if (!this.isValidAddress(addressDetails.address)) {
            throw new sdk_core_1.InvalidAddressError(`invalid address: ${addressDetails.address}`);
        }
        const rootAddress = params.coinSpecific.rootAddress;
        if (addressDetails.address !== rootAddress) {
            throw new sdk_core_1.UnexpectedAddressError(`address validation failure: ${addressDetails.address} vs ${rootAddress}`);
        }
        return true;
    }
    getHashFunction() {
        return crypto_1.createHash('sha256');
    }
    /**
     * Process address into address and memo id
     *
     * @param address the address
     * @returns object containing address and memo id
     */
    getAddressDetails(address) {
        const destinationDetails = url_1.default.parse(address);
        const destinationAddress = destinationDetails.pathname || '';
        // address doesn't have a memo id
        if (destinationDetails.pathname === address) {
            return {
                address: address,
                memoId: undefined,
            };
        }
        if (!destinationDetails.query) {
            throw new sdk_core_1.InvalidAddressError(`invalid address: ${address}`);
        }
        const queryDetails = querystring_1.default.parse(destinationDetails.query);
        if (!queryDetails.memoId) {
            // if there are more properties, the query details need to contain the memo id property
            throw new sdk_core_1.InvalidAddressError(`invalid address: ${address}`);
        }
        if (Array.isArray(queryDetails.memoId)) {
            throw new sdk_core_1.InvalidAddressError(`memoId may only be given at most once, but found ${queryDetails.memoId.length} instances in address ${address}`);
        }
        if (Array.isArray(queryDetails.memoId) && queryDetails.memoId.length !== 1) {
            // valid addresses can only contain one memo id
            throw new sdk_core_1.InvalidAddressError(`invalid address '${address}', must contain exactly one memoId`);
        }
        const [memoId] = _.castArray(queryDetails.memoId) || undefined;
        if (!this.isValidMemoId(memoId)) {
            throw new sdk_core_1.InvalidMemoIdError(`invalid address: '${address}', memoId is not valid`);
        }
        return {
            address: destinationAddress,
            memoId,
        };
    }
    /**
     * Return boolean indicating whether a memo id is valid
     *
     * @param memoId memo id
     * @returns true if memo id is valid
     */
    isValidMemoId(memoId) {
        let memoIdNumber;
        try {
            memoIdNumber = new bignumber_js_1.BigNumber(memoId);
        }
        catch (e) {
            return false;
        }
        return memoIdNumber.gte(0);
    }
    getKeyCombinedFromTssKeyShares(userPublicOrPrivateKeyShare, backupPrivateOrPublicKeyShare, walletPassphrase) {
        let backupPrv;
        let userPrv;
        try {
            backupPrv = this.bitgo.decrypt({
                input: backupPrivateOrPublicKeyShare,
                password: walletPassphrase,
            });
            userPrv = this.bitgo.decrypt({
                input: userPublicOrPrivateKeyShare,
                password: walletPassphrase,
            });
        }
        catch (e) {
            throw new Error(`Error decrypting backup keychain: ${e.message}`);
        }
        const userSigningMaterial = JSON.parse(userPrv);
        const backupSigningMaterial = JSON.parse(backupPrv);
        if (!userSigningMaterial.backupNShare) {
            throw new Error('Invalid user key - missing backupNShare');
        }
        if (!backupSigningMaterial.userNShare) {
            throw new Error('Invalid backup key - missing userNShare');
        }
        const MPC = new sdk_core_1.Ecdsa();
        const userKeyCombined = MPC.keyCombine(userSigningMaterial.pShare, [
            userSigningMaterial.bitgoNShare,
            userSigningMaterial.backupNShare,
        ]);
        const userSigningKeyDerived = MPC.keyDerive(userSigningMaterial.pShare, [userSigningMaterial.bitgoNShare, userSigningMaterial.backupNShare], 'm/0');
        const userKeyDerivedCombined = {
            xShare: userSigningKeyDerived.xShare,
            yShares: userKeyCombined.yShares,
        };
        const backupKeyCombined = MPC.keyCombine(backupSigningMaterial.pShare, [
            userSigningKeyDerived.nShares[2],
            backupSigningMaterial.bitgoNShare,
        ]);
        if (userKeyDerivedCombined.xShare.y !== backupKeyCombined.xShare.y ||
            userKeyDerivedCombined.xShare.chaincode !== backupKeyCombined.xShare.chaincode) {
            throw new Error('Common keychains do not match');
        }
        return [userKeyDerivedCombined, backupKeyCombined];
    }
    // TODO(BG-78714): Reduce code duplication between this and eth.ts
    async signRecoveryTSS(userKeyCombined, backupKeyCombined, txHex, { rangeProofChallenge, } = {}) {
        const MPC = new sdk_core_1.Ecdsa();
        const signerOneIndex = userKeyCombined.xShare.i;
        const signerTwoIndex = backupKeyCombined.xShare.i;
        // Since this is a user <> backup signing, we will reuse the same range proof challenge
        rangeProofChallenge =
            rangeProofChallenge !== null && rangeProofChallenge !== void 0 ? rangeProofChallenge : sdk_lib_mpc_1.EcdsaTypes.serializeNtildeWithProofs(await sdk_lib_mpc_1.EcdsaRangeProof.generateNtilde());
        const userToBackupPaillierChallenge = await sdk_lib_mpc_1.EcdsaPaillierProof.generateP(sdk_core_1.hexToBigInt(userKeyCombined.yShares[signerTwoIndex].n));
        const backupToUserPaillierChallenge = await sdk_lib_mpc_1.EcdsaPaillierProof.generateP(sdk_core_1.hexToBigInt(backupKeyCombined.yShares[signerOneIndex].n));
        const userXShare = MPC.appendChallenge(userKeyCombined.xShare, rangeProofChallenge, sdk_lib_mpc_1.EcdsaTypes.serializePaillierChallenge({ p: userToBackupPaillierChallenge }));
        const userYShare = MPC.appendChallenge(userKeyCombined.yShares[signerTwoIndex], rangeProofChallenge, sdk_lib_mpc_1.EcdsaTypes.serializePaillierChallenge({ p: backupToUserPaillierChallenge }));
        const backupXShare = MPC.appendChallenge(backupKeyCombined.xShare, rangeProofChallenge, sdk_lib_mpc_1.EcdsaTypes.serializePaillierChallenge({ p: backupToUserPaillierChallenge }));
        const backupYShare = MPC.appendChallenge(backupKeyCombined.yShares[signerOneIndex], rangeProofChallenge, sdk_lib_mpc_1.EcdsaTypes.serializePaillierChallenge({ p: userToBackupPaillierChallenge }));
        const signShares = await MPC.signShare(userXShare, userYShare);
        const signConvertS21 = await MPC.signConvertStep1({
            xShare: backupXShare,
            yShare: backupYShare,
            kShare: signShares.kShare,
        });
        const signConvertS12 = await MPC.signConvertStep2({
            aShare: signConvertS21.aShare,
            wShare: signShares.wShare,
        });
        const signConvertS21_2 = await MPC.signConvertStep3({
            muShare: signConvertS12.muShare,
            bShare: signConvertS21.bShare,
        });
        const [signCombineOne, signCombineTwo] = [
            MPC.signCombine({
                gShare: signConvertS12.gShare,
                signIndex: {
                    i: signConvertS12.muShare.i,
                    j: signConvertS12.muShare.j,
                },
            }),
            MPC.signCombine({
                gShare: signConvertS21_2.gShare,
                signIndex: {
                    i: signConvertS21_2.signIndex.i,
                    j: signConvertS21_2.signIndex.j,
                },
            }),
        ];
        const MESSAGE = buffer_1.Buffer.from(txHex, 'hex');
        const [signA, signB] = [
            MPC.sign(MESSAGE, signCombineOne.oShare, signCombineTwo.dShare, crypto_1.createHash('sha256')),
            MPC.sign(MESSAGE, signCombineTwo.oShare, signCombineOne.dShare, crypto_1.createHash('sha256')),
        ];
        return MPC.constructSignature([signA, signB]);
    }
}
exports.Atom = Atom;
//# sourceMappingURL=data:application/json;base64,