"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
const sdk_coin_eth_1 = require("@bitgo/sdk-coin-eth");
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const stakingBuilder_1 = require("./stakingBuilder");
const utils_1 = require("./utils");
const transferBuilder_1 = require("./transferBuilder");
const ethereumjs_util_1 = require("ethereumjs-util");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
class TransactionBuilder extends sdk_coin_eth_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._common = utils_1.getCommon(this._coinConfig.network.type);
        this.transaction = new transaction_1.Transaction(this._coinConfig, this._common);
    }
    /** @inheritdoc */
    type(type) {
        super.type(type);
        this._stakingBuilder = undefined;
    }
    getTransactionData() {
        switch (this._type) {
            case sdk_core_1.TransactionType.StakingLock:
                return this.buildLockStakeTransaction();
            case sdk_core_1.TransactionType.StakingUnlock:
            case sdk_core_1.TransactionType.StakingVote:
            case sdk_core_1.TransactionType.StakingUnvote:
            case sdk_core_1.TransactionType.StakingActivate:
            case sdk_core_1.TransactionType.StakingWithdraw:
                return this.buildStakingTransaction();
        }
        return super.getTransactionData();
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        let tx;
        if (/^0x?[0-9a-f]{1,}$/.test(rawTransaction.toLowerCase())) {
            tx = transaction_1.Transaction.fromSerialized(this._coinConfig, this._common, rawTransaction);
            super.loadBuilderInput(tx.toJson());
        }
        else {
            const txData = JSON.parse(rawTransaction);
            tx = new transaction_1.Transaction(this._coinConfig, this._common, txData);
        }
        return tx;
    }
    setTransactionTypeFields(decodedType, transactionJson) {
        switch (decodedType) {
            case sdk_core_1.TransactionType.StakingLock:
                this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig)
                    .type(sdk_core_1.StakingOperationTypes.LOCK)
                    .amount(transactionJson.value);
                break;
            case sdk_core_1.TransactionType.StakingUnlock:
            case sdk_core_1.TransactionType.StakingVote:
            case sdk_core_1.TransactionType.StakingUnvote:
            case sdk_core_1.TransactionType.StakingActivate:
            case sdk_core_1.TransactionType.StakingWithdraw:
                this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig, transactionJson.data);
                break;
            default:
                super.setTransactionTypeFields(decodedType, transactionJson);
                break;
        }
    }
    /**
     * Returns the smart contract encoded data
     *
     * @param {string[]} addresses - the contract signers
     * @returns {string} - the smart contract encoded data
     */
    getContractData(addresses) {
        const params = [addresses];
        const resultEncodedParameters = ethereumjs_abi_1.default.rawEncode(sdk_coin_eth_1.walletSimpleConstructor, params)
            .toString('hex')
            .replace('0x', '');
        return utils_1.walletSimpleByteCode + resultEncodedParameters;
    }
    // region Stake methods
    /**
     * Gets the staking lock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    lock() {
        if (this._type !== sdk_core_1.TransactionType.StakingLock) {
            throw new sdk_core_1.BuildTransactionError('Lock can only be set for Staking Lock transactions type');
        }
        return this.getBuilder(sdk_core_1.StakingOperationTypes.LOCK);
    }
    /**
     * Gets the staking vote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    vote() {
        if (this._type !== sdk_core_1.TransactionType.StakingVote) {
            throw new sdk_core_1.BuildTransactionError('Votes can only be set for a staking transaction');
        }
        return this.getBuilder(sdk_core_1.StakingOperationTypes.VOTE);
    }
    /**
     * Gets the staking activate builder if exist, or creates a new one for this transaction and returns it
     * requires: group
     *
     * @returns {StakingBuilder} the staking builder
     */
    activate() {
        if (this._type !== sdk_core_1.TransactionType.StakingActivate) {
            throw new sdk_core_1.BuildTransactionError('Activation can only be set for a staking transaction');
        }
        return this.getBuilder(sdk_core_1.StakingOperationTypes.ACTIVATE);
    }
    /**
     * Gets the staking unlock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    unlock() {
        if (this._type !== sdk_core_1.TransactionType.StakingUnlock) {
            throw new sdk_core_1.BuildTransactionError('Unlock can only be set for Staking Unlock transactions type');
        }
        return this.getBuilder(sdk_core_1.StakingOperationTypes.UNLOCK);
    }
    /**
     * Gets the staking unvote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount, index
     *
     * @returns {StakingBuilder} the staking builder
     */
    unvote() {
        if (this._type !== sdk_core_1.TransactionType.StakingUnvote) {
            throw new sdk_core_1.BuildTransactionError('Unvote can only be set for a staking transaction');
        }
        return this.getBuilder(sdk_core_1.StakingOperationTypes.UNVOTE);
    }
    /**
     * Gets the staking withdraw builder if exist, or creates a new one for this transaction and returns it
     * requires: index (unlock list)
     *
     * @returns {StakingBuilder} the staking builder
     */
    withdraw() {
        if (this._type !== sdk_core_1.TransactionType.StakingWithdraw) {
            throw new sdk_core_1.BuildTransactionError('Withdraw can only be set for a staking transaction');
        }
        return this.getBuilder(sdk_core_1.StakingOperationTypes.WITHDRAW);
    }
    /** @inheritdoc */
    transfer(data) {
        if (this._type !== sdk_core_1.TransactionType.Send) {
            throw new sdk_core_1.BuildTransactionError('Transfers can only be set for send transactions');
        }
        if (!this._transfer) {
            this._transfer = new transferBuilder_1.TransferBuilder(data);
        }
        return this._transfer;
    }
    /**
     * Get the appropriate builder for the selected type
     *
     * @param {StakingOperationTypes} type the selected type for the staking builder
     * @returns {StakingBuilder} the staking builder for the selected type
     */
    getBuilder(type) {
        if (!this._stakingBuilder) {
            this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig).type(type);
        }
        return this._stakingBuilder;
    }
    getStaking() {
        if (!this._stakingBuilder) {
            throw new sdk_core_1.BuildTransactionError('No staking information set');
        }
        return this._stakingBuilder.build();
    }
    buildLockStakeTransaction() {
        const stake = this.getStaking();
        const data = this.buildBase(stake.serialize());
        data.to = stake.address;
        data.value = stake.amount;
        return data;
    }
    buildStakingTransaction() {
        const stake = this.getStaking();
        const data = this.buildBase(stake.serialize());
        data.to = stake.address;
        return data;
    }
    /**
     * Get the final v value. Final v is described in EIP-155.
     *
     * @protected for internal use when the enableFinalVField flag is true.
     */
    getFinalV() {
        return ethereumjs_util_1.addHexPrefix(this._common.chainIdBN().toString(16));
    }
    /**
     * The value to send along with this transaction. 0 by default
     *
     * @param {string} value The value to send along with this transaction
     */
    value(value) {
        this.validatePrecision(value, 'Value');
        this._value = value;
    }
    validatePrecision(value, context) {
        context = context ? context + ' ' : '';
        const valueNumber = Number(value);
        // the Celo library internally converts the string value to a number and converts to hex, which can result in a loss of precision for numbers with >= 15 significant digits
        const valueBigNumber = new bignumber_js_1.default(valueNumber.toString(16), 16);
        if (isNaN(valueNumber)) {
            throw new sdk_core_1.BuildTransactionError(`${context}${value} is not a valid number`);
        }
        else if (!valueBigNumber.isEqualTo(valueNumber)) {
            // TODO(BG-62714): remove this check once the celo library is fixed
            throw new sdk_core_1.BuildTransactionError(`${context}${value} cannot be represented by a JS number, please try using fewer significant digits. We are working to support all values in the future.`);
        }
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,