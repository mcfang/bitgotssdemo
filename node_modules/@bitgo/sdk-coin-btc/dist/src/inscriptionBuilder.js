"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InscriptionBuilder = void 0;
const abstract_utxo_1 = require("@bitgo/abstract-utxo");
const sdk_core_1 = require("@bitgo/sdk-core");
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const utxo_ord_1 = require("@bitgo/utxo-ord");
const assert_1 = __importDefault(require("assert"));
const SUPPLEMENTARY_UNSPENTS_MIN_VALUE_SATS = [0, 20000, 200000];
class InscriptionBuilder {
    constructor(wallet, coin) {
        this.wallet = wallet;
        this.coin = coin;
    }
    async prepareReveal(inscriptionData, contentType) {
        const user = await this.wallet.baseCoin.keychains().get({ id: this.wallet.keyIds()[sdk_core_1.KeyIndices.USER] });
        assert_1.default(user.pub);
        const derived = this.coin.deriveKeyWithSeed({ key: user.pub, seed: inscriptionData.toString() });
        const compressedPublicKey = sdk_core_1.xpubToCompressedPub(derived.key);
        const xOnlyPublicKey = utxolib.bitgo.outputScripts.toXOnlyPublicKey(Buffer.from(compressedPublicKey, 'hex'));
        return utxo_ord_1.inscriptions.createInscriptionRevealData(xOnlyPublicKey, contentType, inscriptionData, this.coin.network);
    }
    async prepareTransferWithExtraInputs(satPoint, feeRateSatKB, { signer, cosigner, inscriptionConstraints, }, rootWalletKeys, outputs, inscriptionUnspents, supplementaryUnspentsMinValue) {
        let supplementaryUnspents = [];
        if (supplementaryUnspentsMinValue > 0) {
            const response = await this.wallet.unspents({
                minValue: supplementaryUnspentsMinValue,
            });
            // Filter out the inscription unspent from the supplementary unspents
            supplementaryUnspents = response.unspents
                .filter((unspent) => unspent.id !== inscriptionUnspents[0].id)
                .slice(0, utxo_ord_1.MAX_UNSPENTS_FOR_OUTPUT_LAYOUT - 1)
                .map((unspent) => {
                unspent.value = BigInt(unspent.value);
                return unspent;
            });
        }
        const psbt = utxo_ord_1.createPsbtForSingleInscriptionPassingTransaction(this.coin.network, {
            walletKeys: rootWalletKeys,
            signer,
            cosigner,
        }, inscriptionUnspents, satPoint, outputs, { feeRateSatKB, ...inscriptionConstraints }, { supplementaryUnspents });
        if (!psbt) {
            throw new Error('Fee too high for the selected unspent with this fee rate');
        }
        const allUnspents = [...inscriptionUnspents, ...supplementaryUnspents];
        // TODO: Remove the call to this function because it's already called inside the createPsbt function above.
        // Create & use a getFee function inside the created PSBT instead, lack of which necessitates a duplicate call here.
        const outputLayout = utxo_ord_1.findOutputLayoutForWalletUnspents(allUnspents, satPoint, outputs, {
            feeRateSatKB,
            ...inscriptionConstraints,
        });
        if (!outputLayout) {
            throw new Error('Fee too high for the selected unspent with this fee rate');
        }
        return {
            walletId: this.wallet.id(),
            txHex: psbt.getUnsignedTx().toHex(),
            txInfo: { unspents: allUnspents },
            feeInfo: { fee: Number(outputLayout.layout.feeOutput), feeString: outputLayout.layout.feeOutput.toString() },
        };
    }
    /**
     * Build a transaction to send an inscription
     * @param satPoint Satpoint you want to send
     * @param recipient Address you want to send to
     * @param feeRateSatKB Fee rate for transaction
     * @param signer first signer of the transaction
     * @param cosigner second signer of the transaction
     * @param inscriptionConstraints.minChangeOutput (optional) the minimum size of the change output
     * @param inscriptionConstraints.minInscriptionOutput (optional) the minimum number of sats of the output containing the inscription
     * @param inscriptionConstraints.maxInscriptionOutput (optional) the maximum number of sats of the output containing the inscription
     * @param changeAddressType Address type of the change address
     */
    async prepareTransfer(satPoint, recipient, feeRateSatKB, { signer = 'user', cosigner = 'bitgo', inscriptionConstraints = utxo_ord_1.DefaultInscriptionConstraints, changeAddressType = 'p2wsh', }) {
        assert_1.default(utxo_ord_1.isSatPoint(satPoint));
        const rootWalletKeys = await abstract_utxo_1.getWalletKeys(this.coin, this.wallet);
        const parsedSatPoint = utxo_ord_1.parseSatPoint(satPoint);
        const transaction = await this.wallet.getTransaction({ txHash: parsedSatPoint.txid });
        const unspents = [transaction.outputs[parsedSatPoint.vout]];
        unspents[0].value = BigInt(unspents[0].value);
        const changeAddress = await this.wallet.createAddress({
            chain: utxolib.bitgo.getInternalChainCode(changeAddressType),
        });
        const outputs = {
            inscriptionRecipient: recipient,
            changeOutputs: [
                { chain: changeAddress.chain, index: changeAddress.index },
                { chain: changeAddress.chain, index: changeAddress.index },
            ],
        };
        for (const supplementaryUnspentsMinValue of SUPPLEMENTARY_UNSPENTS_MIN_VALUE_SATS) {
            try {
                return await this.prepareTransferWithExtraInputs(satPoint, feeRateSatKB, { signer, cosigner, inscriptionConstraints }, rootWalletKeys, outputs, unspents, supplementaryUnspentsMinValue);
            }
            catch (error) {
                if (!(error instanceof utxo_ord_1.ErrorNoLayout)) {
                    throw error; // Propagate error if it's not an ErrorNoLayout
                } // Otherwise continue trying with higher minValue for supplementary unspents
            }
        }
        throw new Error('Fee too high for the selected unspent with this fee rate'); // Exhausted all tries to supplement
    }
    /**
     *
     * @param walletPassphrase
     * @param tapLeafScript
     * @param commitAddress
     * @param unsignedCommitTx
     * @param commitTransactionUnspents
     * @param recipientAddress
     * @param inscriptionData
     */
    async signAndSendReveal(walletPassphrase, tapLeafScript, commitAddress, unsignedCommitTx, commitTransactionUnspents, recipientAddress, inscriptionData) {
        const userKeychain = await this.wallet.baseCoin.keychains().get({ id: this.wallet.keyIds()[sdk_core_1.KeyIndices.USER] });
        const xprv = await this.wallet.getUserPrv({ keychain: userKeychain, walletPassphrase });
        const halfSignedCommitTransaction = (await this.wallet.signTransaction({
            prv: xprv,
            txPrebuild: {
                txHex: unsignedCommitTx.toString('hex'),
                txInfo: { unspents: commitTransactionUnspents },
            },
        }));
        const derived = this.coin.deriveKeyWithSeed({ key: xprv, seed: inscriptionData.toString() });
        const prv = sdk_core_1.xprvToRawPrv(derived.key);
        const fullySignedRevealTransaction = await utxo_ord_1.inscriptions.signRevealTransaction(Buffer.from(prv, 'hex'), tapLeafScript, commitAddress, recipientAddress, Buffer.from(halfSignedCommitTransaction.txHex, 'hex'), this.coin.network);
        return this.wallet.submitTransaction({
            halfSigned: {
                txHex: halfSignedCommitTransaction.txHex,
                signedChildPsbt: fullySignedRevealTransaction.toHex(),
            },
        });
    }
    /**
     * Sign and send a transaction that transfers an inscription
     * @param walletPassphrase passphrase to unlock your keys
     * @param txPrebuild this is the output of `inscription.prepareTransfer`
     */
    async signAndSendTransfer(walletPassphrase, txPrebuild) {
        const userKeychain = await this.wallet.baseCoin.keychains().get({ id: this.wallet.keyIds()[sdk_core_1.KeyIndices.USER] });
        const prv = this.wallet.getUserPrv({ keychain: userKeychain, walletPassphrase });
        const halfSigned = (await this.wallet.signTransaction({ prv, txPrebuild }));
        return this.wallet.submitTransaction({ halfSigned });
    }
}
exports.InscriptionBuilder = InscriptionBuilder;
//# sourceMappingURL=data:application/json;base64,