"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
/**
 * Ethereum keys and address management.
 */
class KeyPair extends sdk_core_1.BlsKeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     */
    constructor(source) {
        super(source);
    }
    /**
     * ETH2 default keys format is a pair of Uint8Array keys
     *
     * @returns { BlsKeys } The keys in the defined format
     */
    getKeys() {
        if (this.keyPair) {
            return this.keyPair;
        }
        throw new Error('Error getting keys. Check keyPair has been specified & private key is valid');
    }
    /**
     * Whether input is a valid BLS public key
     *
     * @param {string} pub the public key to validate
     * @returns {boolean} Whether input is a valid public key or not
     */
    static isValidPub(pub) {
        return sdk_core_1.isValidBLSPublicKey(pub);
    }
    /**
     * Whether the input is a valid BLS private key
     *
     * @param {string | Buffer | bigint} prv a private key to validate
     * @returns {boolean} Whether the input is a valid private key or not
     */
    static isValidPrv(prv) {
        if (typeof prv === 'string') {
            return sdk_core_1.isValidBLSPrivateKey(prv);
        }
        if (typeof prv === 'bigint') {
            return sdk_core_1.isValidBLSPrivateKey(sdk_core_1.bigIntToHex(prv));
        }
        try {
            const hexPrv = Array.from(prv)
                .map(function (val) {
                const hex = val.toString(16);
                return '0'.slice(0, hex.length % 2) + hex;
            })
                .join('');
            return sdk_core_1.isValidBLSPrivateKey(hexPrv);
        }
        catch (e) {
            return false;
        }
    }
}
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5UGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIva2V5UGFpci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FPeUI7QUFFekI7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxxQkFBVTtJQUNyQzs7O09BR0c7SUFDSCxZQUFZLE1BQXVCO1FBQ2pDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE9BQU87UUFDTCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3JCO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2RUFBNkUsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixPQUFPLDhCQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBNkI7UUFDN0MsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsT0FBTywrQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQztRQUNELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sK0JBQW9CLENBQUMsc0JBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSTtZQUNGLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2lCQUMzQixHQUFHLENBQUMsVUFBVSxHQUFHO2dCQUNoQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM3QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQzVDLENBQUMsQ0FBQztpQkFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDWixPQUFPLCtCQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3JDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztDQUNGO0FBeERELDBCQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGJpZ0ludFRvSGV4LFxuICBCbHNLZXlQYWlyLFxuICBCbHNLZXlzLFxuICBpc1ZhbGlkQkxTUHJpdmF0ZUtleSxcbiAgaXNWYWxpZEJMU1B1YmxpY0tleSxcbiAgS2V5UGFpck9wdGlvbnMsXG59IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5cbi8qKlxuICogRXRoZXJldW0ga2V5cyBhbmQgYWRkcmVzcyBtYW5hZ2VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgS2V5UGFpciBleHRlbmRzIEJsc0tleVBhaXIge1xuICAvKipcbiAgICogUHVibGljIGNvbnN0cnVjdG9yLiBCeSBkZWZhdWx0LCBjcmVhdGVzIGEga2V5IHBhaXIgd2l0aCBhIHJhbmRvbSBtYXN0ZXIgc2VlZC5cbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNvdXJjZT86IEtleVBhaXJPcHRpb25zKSB7XG4gICAgc3VwZXIoc291cmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFVEgyIGRlZmF1bHQga2V5cyBmb3JtYXQgaXMgYSBwYWlyIG9mIFVpbnQ4QXJyYXkga2V5c1xuICAgKlxuICAgKiBAcmV0dXJucyB7IEJsc0tleXMgfSBUaGUga2V5cyBpbiB0aGUgZGVmaW5lZCBmb3JtYXRcbiAgICovXG4gIGdldEtleXMoKTogQmxzS2V5cyB7XG4gICAgaWYgKHRoaXMua2V5UGFpcikge1xuICAgICAgcmV0dXJuIHRoaXMua2V5UGFpcjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBnZXR0aW5nIGtleXMuIENoZWNrIGtleVBhaXIgaGFzIGJlZW4gc3BlY2lmaWVkICYgcHJpdmF0ZSBrZXkgaXMgdmFsaWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGlucHV0IGlzIGEgdmFsaWQgQkxTIHB1YmxpYyBrZXlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHB1YiB0aGUgcHVibGljIGtleSB0byB2YWxpZGF0ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBpbnB1dCBpcyBhIHZhbGlkIHB1YmxpYyBrZXkgb3Igbm90XG4gICAqL1xuICBzdGF0aWMgaXNWYWxpZFB1YihwdWI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc1ZhbGlkQkxTUHVibGljS2V5KHB1Yik7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgaW5wdXQgaXMgYSB2YWxpZCBCTFMgcHJpdmF0ZSBrZXlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBCdWZmZXIgfCBiaWdpbnR9IHBydiBhIHByaXZhdGUga2V5IHRvIHZhbGlkYXRlXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBpbnB1dCBpcyBhIHZhbGlkIHByaXZhdGUga2V5IG9yIG5vdFxuICAgKi9cbiAgc3RhdGljIGlzVmFsaWRQcnYocHJ2OiBzdHJpbmcgfCBCdWZmZXIgfCBiaWdpbnQpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIHBydiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBpc1ZhbGlkQkxTUHJpdmF0ZUtleShwcnYpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBydiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgIHJldHVybiBpc1ZhbGlkQkxTUHJpdmF0ZUtleShiaWdJbnRUb0hleChwcnYpKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGhleFBydiA9IEFycmF5LmZyb20ocHJ2KVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICBjb25zdCBoZXggPSB2YWwudG9TdHJpbmcoMTYpO1xuICAgICAgICAgIHJldHVybiAnMCcuc2xpY2UoMCwgaGV4Lmxlbmd0aCAlIDIpICsgaGV4O1xuICAgICAgICB9KVxuICAgICAgICAuam9pbignJyk7XG4gICAgICByZXR1cm4gaXNWYWxpZEJMU1ByaXZhdGVLZXkoaGV4UHJ2KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=