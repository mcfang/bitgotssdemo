"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signAndVerifyWalletTransaction = exports.signAndVerifyPsbt = exports.TransactionSigningError = exports.InputSigningError = void 0;
/**
 * @prettier
 */
const utxolib = require("@bitgo/utxo-lib");
const { isWalletUnspent, signInputWithUnspent, toOutput } = utxolib.bitgo;
const debugLib = require("debug");
const replayProtection_1 = require("./replayProtection");
const debug = debugLib('bitgo:v2:utxo');
class InputSigningError extends Error {
    constructor(inputIndex, unspent, reason) {
        super(`signing error at input ${inputIndex}: unspentId=${unspent.id}: ${reason}`);
        this.inputIndex = inputIndex;
        this.unspent = unspent;
        this.reason = reason;
    }
    static expectedWalletUnspent(inputIndex, unspent) {
        return new InputSigningError(inputIndex, unspent, `not a wallet unspent, not a replay protection unspent`);
    }
}
exports.InputSigningError = InputSigningError;
class TransactionSigningError extends Error {
    constructor(signErrors, verifyError) {
        super(`sign errors at inputs: [${signErrors.join(',')}], ` +
            `verify errors at inputs: [${verifyError.join(',')}], see log for details`);
    }
}
exports.TransactionSigningError = TransactionSigningError;
/**
 * Sign all inputs of a psbt and verify signatures after signing.
 * Collects and logs signing errors and verification errors, throws error in the end if any of them
 * failed.
 *
 * If it is the last signature, finalize and extract the transaction from the psbt.
 *
 * This function mirrors signAndVerifyWalletTransaction, but is used for signing PSBTs instead of
 * using TransactionBuilder
 *
 * @param psbt
 * @param signerKeychain
 * @param isLastSignature
 */
function signAndVerifyPsbt(psbt, signerKeychain, { isLastSignature }) {
    const txInputs = psbt.txInputs;
    const outputIds = [];
    const scriptTypes = [];
    const signErrors = psbt.data.inputs
        .map((input, inputIndex) => {
        const outputId = utxolib.bitgo.formatOutputId(utxolib.bitgo.getOutputIdForInput(txInputs[inputIndex]));
        outputIds.push(outputId);
        const scriptType = utxolib.bitgo.getPsbtInputScriptType(input);
        scriptTypes.push(scriptType);
        if (scriptType === 'p2shP2pk') {
            debug('Skipping signature for input %d of %d (RP input?)', inputIndex + 1, psbt.data.inputs.length);
            return;
        }
        try {
            psbt.signInputHD(inputIndex, signerKeychain);
            debug('Successfully signed input %d of %d', inputIndex + 1, psbt.data.inputs.length);
        }
        catch (e) {
            return new InputSigningError(inputIndex, { id: outputId }, e);
        }
    })
        .filter((e) => e !== undefined);
    const verifyErrors = psbt.data.inputs
        .map((input, inputIndex) => {
        const scriptType = scriptTypes[inputIndex];
        if (scriptType === 'p2shP2pk') {
            debug('Skipping input signature %d of %d (unspent from replay protection address which is platform signed only)', inputIndex + 1, psbt.data.inputs.length);
            return;
        }
        const outputId = outputIds[inputIndex];
        try {
            if (!psbt.validateSignaturesOfInputHD(inputIndex, signerKeychain)) {
                return new InputSigningError(inputIndex, { id: outputId }, new Error(`invalid signature`));
            }
        }
        catch (e) {
            debug('Invalid signature');
            return new InputSigningError(inputIndex, { id: outputId }, e);
        }
    })
        .filter((e) => e !== undefined);
    if (signErrors.length || verifyErrors.length) {
        throw new TransactionSigningError(signErrors, verifyErrors);
    }
    if (isLastSignature) {
        psbt.finalizeAllInputs();
        return psbt.extractTransaction();
    }
    return psbt;
}
exports.signAndVerifyPsbt = signAndVerifyPsbt;
/**
 * Sign all inputs of a wallet transaction and verify signatures after signing.
 * Collects and logs signing errors and verification errors, throws error in the end if any of them
 * failed.
 *
 * @param transaction - wallet transaction (builder) to be signed
 * @param unspents - transaction unspents
 * @param walletSigner - signing parameters
 * @param isLastSignature - Returns full-signed transaction when true. Builds half-signed when false.
 */
function signAndVerifyWalletTransaction(transaction, unspents, walletSigner, { isLastSignature }) {
    const network = transaction.network;
    const prevOutputs = unspents.map((u) => toOutput(u, network));
    let txBuilder;
    if (transaction instanceof utxolib.bitgo.UtxoTransaction) {
        txBuilder = utxolib.bitgo.createTransactionBuilderFromTransaction(transaction, prevOutputs);
        if (transaction.ins.length !== unspents.length) {
            throw new Error(`transaction inputs must match unspents`);
        }
    }
    else if (transaction instanceof utxolib.bitgo.UtxoTransactionBuilder) {
        txBuilder = transaction;
    }
    else {
        throw new Error(`must pass UtxoTransaction or UtxoTransactionBuilder`);
    }
    const signErrors = unspents
        .map((unspent, inputIndex) => {
        if (replayProtection_1.isReplayProtectionUnspent(unspent, network)) {
            debug('Skipping signature for input %d of %d (RP input?)', inputIndex + 1, unspents.length);
            return;
        }
        if (!isWalletUnspent(unspent)) {
            return InputSigningError.expectedWalletUnspent(inputIndex, unspent);
        }
        try {
            signInputWithUnspent(txBuilder, inputIndex, unspent, walletSigner);
            debug('Successfully signed input %d of %d', inputIndex + 1, unspents.length);
        }
        catch (e) {
            return new InputSigningError(inputIndex, unspent, e);
        }
    })
        .filter((e) => e !== undefined);
    const signedTransaction = isLastSignature ? txBuilder.build() : txBuilder.buildIncomplete();
    const verifyErrors = signedTransaction.ins
        .map((input, inputIndex) => {
        const unspent = unspents[inputIndex];
        if (replayProtection_1.isReplayProtectionUnspent(unspent, network)) {
            debug('Skipping input signature %d of %d (unspent from replay protection address which is platform signed only)', inputIndex + 1, unspents.length);
            return;
        }
        if (!isWalletUnspent(unspent)) {
            return InputSigningError.expectedWalletUnspent(inputIndex, unspent);
        }
        try {
            const publicKey = walletSigner.deriveForChainAndIndex(unspent.chain, unspent.index).signer.publicKey;
            if (!utxolib.bitgo.verifySignatureWithPublicKey(signedTransaction, inputIndex, prevOutputs, publicKey)) {
                return new InputSigningError(inputIndex, unspent, new Error(`invalid signature`));
            }
        }
        catch (e) {
            debug('Invalid signature');
            return new InputSigningError(inputIndex, unspent, e);
        }
    })
        .filter((e) => e !== undefined);
    if (signErrors.length || verifyErrors.length) {
        throw new TransactionSigningError(signErrors, verifyErrors);
    }
    return signedTransaction;
}
exports.signAndVerifyWalletTransaction = signAndVerifyWalletTransaction;
//# sourceMappingURL=data:application/json;base64,