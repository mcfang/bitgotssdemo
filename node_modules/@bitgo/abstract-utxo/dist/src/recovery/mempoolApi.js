"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MempoolApi = void 0;
/**
 * @prettier
 */
const _ = require("lodash");
const baseApi_1 = require("./baseApi");
class MempoolApi extends baseApi_1.BaseApi {
    static forCoin(coinName) {
        switch (coinName) {
            case 'btc':
            case 'tbtc':
                // FIXME: tbtc is enabled here for legacy reasons;
                return new MempoolApi('https://mempool.space/api/v1');
        }
        throw new baseApi_1.ApiNotImplementedError(coinName);
    }
    constructor(baseUrl) {
        super(baseUrl);
    }
    async getRecoveryFeePerBytes() {
        const res = await this.get('/fees/recommended');
        return res.map((body) => {
            if (body.publicFeeData && body.publicFeeData.hourFee && _.isInteger(body.publicFeeData.hourFee)) {
                return body.publicFeeData.hourFee;
            }
            throw new Error('unexpected response');
        });
    }
}
exports.MempoolApi = MempoolApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtcG9vbEFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWNvdmVyeS9tZW1wb29sQXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOztHQUVHO0FBQ0gsNEJBQTRCO0FBRTVCLHVDQUE0RDtBQUU1RCxNQUFhLFVBQVcsU0FBUSxpQkFBTztJQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQWdCO1FBQzdCLFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxNQUFNO2dCQUNULGtEQUFrRDtnQkFDbEQsT0FBTyxJQUFJLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsTUFBTSxJQUFJLGdDQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsc0JBQXNCO1FBQzFCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBTSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3RCLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQy9GLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7YUFDbkM7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUF4QkQsZ0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBBcGlOb3RJbXBsZW1lbnRlZEVycm9yLCBCYXNlQXBpIH0gZnJvbSAnLi9iYXNlQXBpJztcblxuZXhwb3J0IGNsYXNzIE1lbXBvb2xBcGkgZXh0ZW5kcyBCYXNlQXBpIHtcbiAgc3RhdGljIGZvckNvaW4oY29pbk5hbWU6IHN0cmluZyk6IE1lbXBvb2xBcGkge1xuICAgIHN3aXRjaCAoY29pbk5hbWUpIHtcbiAgICAgIGNhc2UgJ2J0Yyc6XG4gICAgICBjYXNlICd0YnRjJzpcbiAgICAgICAgLy8gRklYTUU6IHRidGMgaXMgZW5hYmxlZCBoZXJlIGZvciBsZWdhY3kgcmVhc29ucztcbiAgICAgICAgcmV0dXJuIG5ldyBNZW1wb29sQXBpKCdodHRwczovL21lbXBvb2wuc3BhY2UvYXBpL3YxJyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBBcGlOb3RJbXBsZW1lbnRlZEVycm9yKGNvaW5OYW1lKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGJhc2VVcmw6IHN0cmluZykge1xuICAgIHN1cGVyKGJhc2VVcmwpO1xuICB9XG5cbiAgYXN5bmMgZ2V0UmVjb3ZlcnlGZWVQZXJCeXRlcygpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0PGFueT4oJy9mZWVzL3JlY29tbWVuZGVkJyk7XG4gICAgcmV0dXJuIHJlcy5tYXAoKGJvZHkpID0+IHtcbiAgICAgIGlmIChib2R5LnB1YmxpY0ZlZURhdGEgJiYgYm9keS5wdWJsaWNGZWVEYXRhLmhvdXJGZWUgJiYgXy5pc0ludGVnZXIoYm9keS5wdWJsaWNGZWVEYXRhLmhvdXJGZWUpKSB7XG4gICAgICAgIHJldHVybiBib2R5LnB1YmxpY0ZlZURhdGEuaG91ckZlZTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCByZXNwb25zZScpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=