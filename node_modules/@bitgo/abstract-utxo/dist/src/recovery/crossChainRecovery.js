"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recoverCrossChain = exports.getWalletKeys = exports.getWallet = void 0;
/**
 * @prettier
 */
const Bluebird = require("bluebird");
const utxolib = require("@bitgo/utxo-lib");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const { unspentSum, scriptTypeForChain, outputScripts } = utxolib.bitgo;
const unspents_1 = require("@bitgo/unspents");
const sdk_core_1 = require("@bitgo/sdk-core");
const sdk_api_1 = require("@bitgo/sdk-api");
const sign_1 = require("../sign");
async function getWallet(bitgo, coin, walletId) {
    try {
        return await coin.wallets().get({ id: walletId });
    }
    catch (e) {
        // TODO: BG-46364 handle errors more gracefully
        // The v2 endpoint coin.wallets().get() may throw 404 or 400 errors, but this should not prevent us from searching for the walletId in v1 wallets.
        if (e.status >= 500) {
            throw e;
        }
    }
    try {
        return await bitgo.wallets().get({ id: walletId });
    }
    catch (e) {
        throw new Error(`could not get wallet ${walletId} from v1 or v2: ${e.toString()}`);
    }
}
exports.getWallet = getWallet;
/**
 * @param recoveryCoin
 * @param wallet
 * @return wallet pubkeys
 */
async function getWalletKeys(recoveryCoin, wallet) {
    let xpubs;
    if (wallet instanceof sdk_core_1.Wallet) {
        const keychains = (await recoveryCoin.keychains().getKeysForSigning({ wallet }));
        if (keychains.length !== 3) {
            throw new Error(`expected triple got ${keychains.length}`);
        }
        xpubs = keychains.map((k) => k.pub);
    }
    else {
        xpubs = wallet.keychains.map((k) => k.xpub);
    }
    return new utxolib.bitgo.RootWalletKeys(xpubs.map((k) => utxo_lib_1.bip32.fromBase58(k)));
}
exports.getWalletKeys = getWalletKeys;
/**
 * @param coin
 * @param txid
 * @param apiKey - a blockchair api key
 * @return all unspents for transaction outputs, including outputs from other transactions
 */
async function getAllRecoveryOutputs(coin, txid, amountType = 'number', apiKey) {
    const api = coin.getRecoveryProvider(apiKey);
    const tx = await api.getTransactionIO(txid);
    const addresses = tx.outputs.map((output) => output.address);
    const unspents = await api.getUnspentsForAddresses(addresses);
    // the api may return cashaddr's instead of legacy for BCH and BCHA
    // downstream processes's only expect legacy addresses
    return unspents.map((recoveryOutput) => {
        return {
            ...recoveryOutput,
            address: coin.canonicalAddress(recoveryOutput.address),
            value: utxolib.bitgo.toTNumber(BigInt(recoveryOutput.value), amountType),
        };
    });
}
async function getScriptId(coin, wallet, script) {
    const address = utxolib.address.fromOutputScript(script, coin.network);
    let addressData;
    if (wallet instanceof sdk_core_1.Wallet) {
        addressData = await wallet.getAddress({ address });
    }
    else {
        addressData = await wallet.address({ address });
    }
    if (typeof addressData.chain === 'number' && typeof addressData.index === 'number') {
        return { chain: addressData.chain, index: addressData.index };
    }
    throw new Error(`invalid address data: ${JSON.stringify(addressData)}`);
}
/**
 * Lookup address data from unspents on sourceCoin in address database of recoveryCoin.
 * Return full walletUnspents including scriptId in sourceCoin format.
 *
 * @param sourceCoin
 * @param recoveryCoin
 * @param unspents
 * @param wallet
 * @return walletUnspents
 */
async function toWalletUnspents(sourceCoin, recoveryCoin, unspents, wallet) {
    const addresses = new Set(unspents.map((u) => u.address));
    return (await Bluebird.mapSeries(addresses, async (address) => {
        let scriptId;
        try {
            scriptId = await getScriptId(recoveryCoin, wallet, utxolib.address.toOutputScript(address, sourceCoin.network));
        }
        catch (e) {
            console.error(`error getting scriptId for ${address}:`, e);
            return [];
        }
        return unspents
            .filter((u) => u.address === address)
            .map((u) => ({
            ...u,
            ...scriptId,
        }));
    })).flat();
}
/**
 * @param coin
 * @return feeRate for transaction
 */
async function getFeeRateSatVB(coin) {
    // TODO: use feeRate API
    const feeRate = {
        bch: 20,
        tbch: 20,
        bcha: 20,
        tbcha: 20,
        bsv: 20,
        tbsv: 20,
        btc: 80,
        tbtc: 80,
        ltc: 100,
        tltc: 100,
        doge: 1000,
        tdoge: 1000,
    }[coin.getChain()];
    if (!feeRate) {
        throw new Error(`no feeRate for ${coin.getChain()}`);
    }
    return feeRate;
}
/**
 * @param xprv
 * @param passphrase
 * @param wallet
 * @return signing key
 */
async function getPrv(xprv, passphrase, wallet) {
    if (xprv) {
        const key = utxo_lib_1.bip32.fromBase58(xprv);
        if (key.isNeutered()) {
            throw new Error(`not a private key`);
        }
        return key;
    }
    if (!wallet || !passphrase) {
        throw new Error(`no xprv given: need wallet and passphrase to continue`);
    }
    let encryptedPrv;
    if (wallet instanceof sdk_core_1.Wallet) {
        encryptedPrv = (await wallet.getEncryptedUserKeychain()).encryptedPrv;
    }
    else {
        encryptedPrv = (await wallet.getEncryptedUserKeychain()).encryptedXprv;
    }
    return getPrv(sdk_api_1.decrypt(passphrase, encryptedPrv));
}
/**
 * @param network
 * @param unspents
 * @param targetAddress
 * @param feeRateSatVB
 * @param signer - if set, sign transaction
 * @param amountType
 * @return transaction spending full input amount to targetAddress
 */
function createSweepTransaction(network, unspents, targetAddress, feeRateSatVB, signer, amountType = 'number') {
    const inputValue = unspentSum(unspents, amountType);
    const vsize = unspents_1.Dimensions.fromUnspents(unspents)
        .plus(unspents_1.Dimensions.fromOutput({ script: utxolib.address.toOutputScript(targetAddress, network) }))
        .getVSize();
    const fee = vsize * feeRateSatVB;
    const transactionBuilder = utxolib.bitgo.createTransactionBuilderForNetwork(network);
    transactionBuilder.addOutput(targetAddress, utxolib.bitgo.toTNumber(BigInt(inputValue) - BigInt(fee), amountType));
    unspents.forEach((unspent) => {
        utxolib.bitgo.addToTransactionBuilder(transactionBuilder, unspent);
    });
    let transaction = transactionBuilder.buildIncomplete();
    if (signer) {
        transaction = sign_1.signAndVerifyWalletTransaction(transactionBuilder, unspents, signer, {
            isLastSignature: false,
        });
    }
    return transaction;
}
function getTxInfo(transaction, unspents, walletId, walletKeys, amountType = 'number') {
    const inputAmount = utxolib.bitgo.unspentSum(unspents, amountType);
    const outputAmount = utxolib.bitgo.toTNumber(transaction.outs.reduce((sum, o) => sum + BigInt(o.value), BigInt(0)), amountType);
    const outputs = transaction.outs.map((o) => ({
        address: utxolib.address.fromOutputScript(o.script, transaction.network),
        valueString: o.value.toString(),
        change: false,
    }));
    const inputs = unspents.map((u) => {
        // NOTE:
        // The `redeemScript` and `walletScript` properties are required for legacy versions of BitGoJS
        // which might require these scripts for signing. The Wallet Recovery Wizard (WRW) can create
        // unsigned prebuilds that are submitted to BitGoJS instances which are not necessarily the same
        // version.
        const addressKeys = walletKeys.deriveForChainAndIndex(u.chain, u.index);
        const scriptType = scriptTypeForChain(u.chain);
        const { redeemScript, witnessScript } = outputScripts.createOutputScript2of3(addressKeys.publicKeys, scriptType);
        return {
            ...u,
            wallet: walletId,
            fromWallet: walletId,
            redeemScript: redeemScript === null || redeemScript === void 0 ? void 0 : redeemScript.toString('hex'),
            witnessScript: witnessScript === null || witnessScript === void 0 ? void 0 : witnessScript.toString('hex'),
        };
    });
    return {
        inputAmount,
        outputAmount,
        minerFee: inputAmount - outputAmount,
        spendAmount: outputAmount,
        inputs,
        unspents: inputs,
        outputs,
        externalOutputs: outputs,
        changeOutputs: [],
        payGoFee: 0,
    } /* cast to TransactionInfo to allow extra fields may be required by legacy consumers of this data */;
}
function getFeeInfo(transaction, unspents, amountType = 'number') {
    const vsize = unspents_1.Dimensions.fromUnspents(unspents).plus(unspents_1.Dimensions.fromOutputs(transaction.outs)).getVSize();
    const inputAmount = utxolib.bitgo.unspentSum(unspents, amountType);
    const outputAmount = transaction.outs.reduce((sum, o) => sum + BigInt(o.value), BigInt(0));
    const fee = Number(BigInt(inputAmount) - outputAmount);
    return {
        size: vsize,
        fee,
        feeRate: fee / vsize,
        payGoFee: 0,
    };
}
/**
 * Recover wallet deposits that were received on the wrong blockchain
 * (for instance bitcoin deposits that were received for a litecoin wallet).
 *
 * Fetches the unspent data from BitGo's public blockchain API and the script data from the user's
 * wallet.
 *
 * @param {BitGoBase} bitgo
 * @param {RecoverParams} params
 */
async function recoverCrossChain(bitgo, params) {
    const wallet = await getWallet(bitgo, params.recoveryCoin, params.walletId);
    const unspents = await getAllRecoveryOutputs(params.sourceCoin, params.txid, params.sourceCoin.amountType, params.apiKey);
    const walletUnspents = await toWalletUnspents(params.sourceCoin, params.recoveryCoin, unspents, wallet);
    const walletKeys = await getWalletKeys(params.recoveryCoin, wallet);
    const prv = params.xprv || params.walletPassphrase ? await getPrv(params.xprv, params.walletPassphrase, wallet) : undefined;
    const signer = prv
        ? new utxolib.bitgo.WalletUnspentSigner(walletKeys, prv, walletKeys.bitgo)
        : undefined;
    const feeRateSatVB = await getFeeRateSatVB(params.sourceCoin);
    const transaction = createSweepTransaction(params.sourceCoin.network, walletUnspents, params.recoveryAddress, feeRateSatVB, signer, params.sourceCoin.amountType);
    const recoveryAmount = transaction.outs[0].value;
    const txHex = transaction.toBuffer().toString('hex');
    const txInfo = getTxInfo(transaction, walletUnspents, params.walletId, walletKeys, params.sourceCoin.amountType);
    if (prv) {
        return {
            version: wallet instanceof sdk_core_1.Wallet ? 2 : 1,
            walletId: params.walletId,
            txHex,
            txInfo,
            sourceCoin: params.sourceCoin.getChain(),
            recoveryCoin: params.recoveryCoin.getChain(),
            recoveryAmount,
        };
    }
    else {
        return {
            txHex,
            txInfo,
            walletId: params.walletId,
            feeInfo: getFeeInfo(transaction, walletUnspents, params.sourceCoin.amountType),
            address: params.recoveryAddress,
            coin: params.sourceCoin.getChain(),
        };
    }
}
exports.recoverCrossChain = recoverCrossChain;
//# sourceMappingURL=data:application/json;base64,