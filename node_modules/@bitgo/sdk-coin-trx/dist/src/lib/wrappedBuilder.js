"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const keyPair_1 = require("./keyPair");
const utils_1 = require("./utils");
const enum_1 = require("./enum");
const contractCallBuilder_1 = require("./contractCallBuilder");
const tokenTransferBuilder_1 = require("./tokenTransferBuilder");
/**
 * Wrapped Builder class
 * This builder is created to maintain compatibility with the current uses of account-lib
 * It has an instance of Transaction Builder or Contract Call Builder as required.
 */
class WrappedBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        // defaults to old builder
        this._builder = new transactionBuilder_1.TransactionBuilder(_coinConfig);
    }
    /**
     * Returns a specific builder to create a contract call transaction
     *
     * @param {Transaction} [tx] The transaction to initialize builder
     * @returns {ContractCallBuilder} The specific contract call builder
     */
    getContractCallBuilder(tx) {
        return this.initializeBuilder(tx, new contractCallBuilder_1.ContractCallBuilder(this._coinConfig));
    }
    getTransactionBuilder(tx) {
        return this.initializeBuilder(tx, new transactionBuilder_1.TransactionBuilder(this._coinConfig));
    }
    getTokenTransferBuilder(tx) {
        return this.initializeBuilder(tx, new tokenTransferBuilder_1.TokenTransferBuilder(this._coinConfig));
    }
    initializeBuilder(tx, builder) {
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    }
    /** @inheritdoc */
    extendValidTo(extensionMs) {
        this._builder.extendValidTo(extensionMs);
    }
    /** @inheritdoc */
    sign(key) {
        this._builder.sign(key);
    }
    /** @inheritdoc */
    async build() {
        return this._builder.build();
    }
    /** @inheritdoc */
    from(raw) {
        this.validateRawTransaction(raw);
        const rawDataHex = this.getTxReceipt(raw);
        const decodedTx = utils_1.decodeTransaction(rawDataHex);
        const contractType = decodedTx.contractType;
        switch (contractType) {
            case enum_1.ContractType.Transfer:
            case enum_1.ContractType.AccountPermissionUpdate:
                this._builder = this.getTransactionBuilder(raw);
                return this._builder;
            case enum_1.ContractType.TriggerSmartContract:
                return this.getContractCallBuilder(raw);
            default:
                throw new sdk_core_1.InvalidTransactionError('Invalid transaction type: ' + contractType);
        }
    }
    /**
     * Get the raw data hex from a raw transaction
     *
     * @param {string | { [key: string]: any }} raw the raw transaction as a string or as an object
     * @returns {string} the raw data hex
     */
    getTxReceipt(raw) {
        return raw['raw_data_hex'] || this.getTxReceipt(JSON.parse(raw));
    }
    /** @inheritdoc */
    validateAddress(address) {
        this._builder.validateAddress(address);
    }
    /** @inheritdoc */
    validateKey(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
        }
        catch (err) {
            throw new Error('The provided key is not valid');
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        this._builder.validateRawTransaction(rawTransaction);
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        this._builder.validateTransaction(transaction);
    }
    /** @inheritdoc */
    validateValue(value) {
        this._builder.validateValue(value);
    }
}
exports.WrappedBuilder = WrappedBuilder;
//# sourceMappingURL=data:application/json;base64,