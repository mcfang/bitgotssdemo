"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeDataParams = exports.encodeDataParams = exports.toHex = exports.isValidRawTransactionFormat = exports.isValidTxJsonString = exports.decodeAccountPermissionUpdateContract = exports.decodeTriggerSmartContract = exports.decodeTransferContract = exports.isValidHex = exports.decodeRawTransaction = exports.decodeTransaction = exports.getRawAddressFromPubKey = exports.signString = exports.signTransaction = exports.getBase58AddressFromHex = exports.getBase58AddressFromByteArray = exports.getAddressFromPriKey = exports.getPubKeyFromPriKey = exports.getHexAddressFromBase58Address = exports.verifySignature = exports.getHexAddressFromByteArray = exports.getByteArrayFromHexAddress = exports.isBase58Address = exports.tokenTestnetContractAddresses = exports.tokenMainnetContractAddresses = void 0;
const assert_1 = __importDefault(require("assert"));
const hex = __importStar(require("@stablelib/hex"));
const tronweb = __importStar(require("tronweb"));
const tron_1 = require("../../resources/protobuf/tron");
const sdk_core_1 = require("@bitgo/sdk-core");
const enum_1 = require("./enum");
const utils_1 = require("ethers/lib/utils");
const ADDRESS_PREFIX_REGEX = /^(41)/;
const ADDRESS_PREFIX = '41';
exports.tokenMainnetContractAddresses = [
    'TEkxiTehnzSmSe2XqrBj4w32RUN966rdz8',
    'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',
];
exports.tokenTestnetContractAddresses = [
    'TSdZwNqpHofzP6BsBKGQUWdBeJphLmF6id',
    'TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs',
];
/**
 * @param address
 */
function isBase58Address(address) {
    return tronweb.utils.crypto.isAddressValid(address);
}
exports.isBase58Address = isBase58Address;
/**
 * @param str
 */
function getByteArrayFromHexAddress(str) {
    return tronweb.utils.code.hexStr2byteArray(str.replace('0x', ''));
}
exports.getByteArrayFromHexAddress = getByteArrayFromHexAddress;
/**
 * @param arr
 */
function getHexAddressFromByteArray(arr) {
    return tronweb.utils.code.byteArray2hexStr(arr);
}
exports.getHexAddressFromByteArray = getHexAddressFromByteArray;
/**
 * @param messageToVerify
 * @param base58Address
 * @param sigHex
 * @param useTronHeader
 */
function verifySignature(messageToVerify, base58Address, sigHex, useTronHeader = true) {
    if (!isValidHex(sigHex)) {
        throw new sdk_core_1.UtilsError('signature is not in a valid format, needs to be hexadecimal');
    }
    if (!isValidHex(messageToVerify)) {
        throw new sdk_core_1.UtilsError('message is not in a valid format, needs to be hexadecimal');
    }
    if (!isBase58Address(base58Address)) {
        throw new sdk_core_1.UtilsError('address needs to be base58 encoded');
    }
    return tronweb.Trx.verifySignature(messageToVerify, base58Address, sigHex, useTronHeader);
}
exports.verifySignature = verifySignature;
/**
 * @param base58
 */
function getHexAddressFromBase58Address(base58) {
    // pulled from: https://github.com/TRON-US/tronweb/blob/dcb8efa36a5ebb65c4dab3626e90256a453f3b0d/src/utils/help.js#L17
    // but they don't surface this call in index.js
    const bytes = tronweb.utils.crypto.decodeBase58Address(base58);
    return getHexAddressFromByteArray(bytes);
}
exports.getHexAddressFromBase58Address = getHexAddressFromBase58Address;
/**
 * @param privateKey
 */
function getPubKeyFromPriKey(privateKey) {
    return tronweb.utils.crypto.getPubKeyFromPriKey(privateKey);
}
exports.getPubKeyFromPriKey = getPubKeyFromPriKey;
/**
 * @param privateKey
 */
function getAddressFromPriKey(privateKey) {
    return tronweb.utils.crypto.getAddressFromPriKey(privateKey);
}
exports.getAddressFromPriKey = getAddressFromPriKey;
/**
 * @param address
 */
function getBase58AddressFromByteArray(address) {
    return tronweb.utils.crypto.getBase58CheckAddress(address);
}
exports.getBase58AddressFromByteArray = getBase58AddressFromByteArray;
/**
 * @param hex
 */
function getBase58AddressFromHex(hex) {
    const arr = getByteArrayFromHexAddress(hex);
    return getBase58AddressFromByteArray(arr);
}
exports.getBase58AddressFromHex = getBase58AddressFromHex;
/**
 * @param privateKey
 * @param transaction
 */
function signTransaction(privateKey, transaction) {
    return tronweb.utils.crypto.signTransaction(privateKey, transaction);
}
exports.signTransaction = signTransaction;
/**
 * @param message
 * @param privateKey
 * @param useTronHeader
 */
function signString(message, privateKey, useTronHeader = true) {
    return tronweb.Trx.signString(message, privateKey, useTronHeader);
}
exports.signString = signString;
/**
 * @param pubBytes
 */
function getRawAddressFromPubKey(pubBytes) {
    return tronweb.utils.crypto.computeAddress(pubBytes);
}
exports.getRawAddressFromPubKey = getRawAddressFromPubKey;
/**
 * Decodes a hex encoded transaction in its protobuf representation.
 *
 * @param hexString raw_data_hex field from tron transactions
 */
function decodeTransaction(hexString) {
    const rawTransaction = decodeRawTransaction(hexString);
    // there should not be multiple contracts in this data
    if (rawTransaction.contracts.length !== 1) {
        throw new sdk_core_1.UtilsError('Number of contracts is greater than 1.');
    }
    let contract;
    let contractType;
    // ensure the contract type is supported
    switch (rawTransaction.contracts[0].parameter.type_url) {
        case 'type.googleapis.com/protocol.TransferContract':
            contractType = enum_1.ContractType.Transfer;
            contract = exports.decodeTransferContract(rawTransaction.contracts[0].parameter.value);
            break;
        case 'type.googleapis.com/protocol.AccountPermissionUpdateContract':
            contractType = enum_1.ContractType.AccountPermissionUpdate;
            contract = exports.decodeAccountPermissionUpdateContract(rawTransaction.contracts[0].parameter.value);
            break;
        case 'type.googleapis.com/protocol.TriggerSmartContract':
            contractType = enum_1.ContractType.TriggerSmartContract;
            contract = exports.decodeTriggerSmartContract(rawTransaction.contracts[0].parameter.value);
            break;
        default:
            throw new sdk_core_1.UtilsError('Unsupported contract type');
    }
    return {
        contractType,
        contract,
        expiration: rawTransaction.expiration,
        timestamp: rawTransaction.timestamp,
        ref_block_bytes: rawTransaction.blockBytes,
        ref_block_hash: rawTransaction.blockHash,
        fee_limit: +rawTransaction.feeLimit,
    };
}
exports.decodeTransaction = decodeTransaction;
/**
 * Decodes a transaction's raw field from a base64 encoded string. This is a protobuf representation.
 *
 * @param hexString this is the raw hexadecimal encoded string. Doc found in the following link.
 * @example
 * @see {@link https://github.com/BitGo/bitgo-account-lib/blob/5f282588701778a4421c75fa61f42713f56e95b9/resources/protobuf/tron.proto#L319}
 */
function decodeRawTransaction(hexString) {
    const bytes = Buffer.from(hexString, 'hex');
    let raw;
    try {
        // we need to decode our raw_data_hex field first
        raw = tron_1.protocol.Transaction.raw.decode(bytes);
    }
    catch (e) {
        throw new sdk_core_1.UtilsError('There was an error decoding the initial raw_data_hex from the serialized tx.');
    }
    return {
        expiration: Number(raw.expiration),
        timestamp: Number(raw.timestamp),
        contracts: raw.contract,
        blockBytes: toHex(raw.refBlockBytes),
        feeLimit: raw.feeLimit,
        blockHash: toHex(raw.refBlockHash),
    };
}
exports.decodeRawTransaction = decodeRawTransaction;
/**
 * Indicates whether the passed string is a safe hex string for tron's purposes.
 *
 * @param hex A valid hex string must be a string made of numbers and characters and has an even length.
 */
function isValidHex(hex) {
    return /^(0x)?([0-9a-f]{2})+$/i.test(hex);
}
exports.isValidHex = isValidHex;
/** Deserialize the segment of the txHex which corresponds with the details of the transfer
 *
 * @param transferHex is the value property of the "parameter" field of contractList[0]
 * */
function decodeTransferContract(transferHex) {
    const contractBytes = Buffer.from(transferHex, 'base64');
    let transferContract;
    try {
        transferContract = tron_1.protocol.TransferContract.decode(contractBytes);
    }
    catch (e) {
        throw new sdk_core_1.UtilsError('There was an error decoding the transfer contract in the transaction.');
    }
    if (!transferContract.ownerAddress) {
        throw new sdk_core_1.UtilsError('Owner address does not exist in this transfer contract.');
    }
    if (!transferContract.toAddress) {
        throw new sdk_core_1.UtilsError('Destination address does not exist in this transfer contract.');
    }
    if (!transferContract.hasOwnProperty('amount')) {
        throw new sdk_core_1.UtilsError('Amount does not exist in this transfer contract.');
    }
    // deserialize attributes
    const owner_address = getBase58AddressFromByteArray(getByteArrayFromHexAddress(Buffer.from(transferContract.ownerAddress, 'base64').toString('hex')));
    const to_address = getBase58AddressFromByteArray(getByteArrayFromHexAddress(Buffer.from(transferContract.toAddress, 'base64').toString('hex')));
    const amount = transferContract.amount;
    return [
        {
            parameter: {
                value: {
                    amount: Number(amount),
                    owner_address,
                    to_address,
                },
            },
        },
    ];
}
exports.decodeTransferContract = decodeTransferContract;
/**
 * Deserialize the segment of the txHex corresponding with trigger smart contract
 *
 * @param {string} base64
 * @returns {AccountPermissionUpdateContract}
 */
function decodeTriggerSmartContract(base64) {
    let contractCallDecoded;
    try {
        contractCallDecoded = tron_1.protocol.TriggerSmartContract.decode(Buffer.from(base64, 'base64')).toJSON();
    }
    catch (e) {
        throw new sdk_core_1.UtilsError('There was an error decoding the contract call in the transaction.');
    }
    if (!contractCallDecoded.ownerAddress) {
        throw new sdk_core_1.UtilsError('Owner address does not exist in this contract call.');
    }
    if (!contractCallDecoded.contractAddress) {
        throw new sdk_core_1.UtilsError('Destination contract address does not exist in this contract call.');
    }
    if (!contractCallDecoded.data) {
        throw new sdk_core_1.UtilsError('Data does not exist in this contract call.');
    }
    // deserialize attributes
    const owner_address = getBase58AddressFromByteArray(getByteArrayFromHexAddress(Buffer.from(contractCallDecoded.ownerAddress, 'base64').toString('hex')));
    const contract_address = getBase58AddressFromByteArray(getByteArrayFromHexAddress(Buffer.from(contractCallDecoded.contractAddress, 'base64').toString('hex')));
    const data = contractCallDecoded.data;
    return [
        {
            parameter: {
                value: {
                    data: data,
                    owner_address,
                    contract_address,
                },
            },
        },
    ];
}
exports.decodeTriggerSmartContract = decodeTriggerSmartContract;
/**
 * Deserialize the segment of the txHex corresponding with the details of the contract which updates
 * account permission
 *
 * @param {string} base64
 * @returns {AccountPermissionUpdateContract}
 */
function decodeAccountPermissionUpdateContract(base64) {
    const accountUpdateContract = tron_1.protocol.AccountPermissionUpdateContract.decode(Buffer.from(base64, 'base64')).toJSON();
    assert_1.default(accountUpdateContract.ownerAddress);
    assert_1.default(accountUpdateContract.owner);
    assert_1.default(accountUpdateContract.hasOwnProperty('actives'));
    const ownerAddress = getBase58AddressFromByteArray(getByteArrayFromHexAddress(Buffer.from(accountUpdateContract.ownerAddress, 'base64').toString('hex')));
    const owner = createPermission(accountUpdateContract.owner);
    let witness = undefined;
    if (accountUpdateContract.witness) {
        witness = createPermission(accountUpdateContract.witness);
    }
    const activeList = accountUpdateContract.actives.map((active) => createPermission(active));
    return {
        ownerAddress,
        owner,
        witness,
        actives: activeList,
    };
}
exports.decodeAccountPermissionUpdateContract = decodeAccountPermissionUpdateContract;
/**
 * @param raw
 */
function createPermission(raw) {
    let permissionType;
    const permission = raw.permissionName.toLowerCase().trim();
    if (permission === 'owner') {
        permissionType = enum_1.PermissionType.Owner;
    }
    else if (permission === 'witness') {
        permissionType = enum_1.PermissionType.Witness;
    }
    else if (permission.substr(0, 6) === 'active') {
        permissionType = enum_1.PermissionType.Active;
    }
    else {
        throw new sdk_core_1.UtilsError('Permission type not parseable.');
    }
    return { type: permissionType, threshold: raw.threshold };
}
/**
 * @param rawTransaction
 */
function isValidTxJsonString(rawTransaction) {
    const transaction = JSON.parse(rawTransaction);
    return transaction.hasOwnProperty('txID');
}
exports.isValidTxJsonString = isValidTxJsonString;
/**
 * Returns whether the provided raw transaction accommodates to bitgo's preferred format
 *
 * @param {any} rawTransaction - The raw transaction to be checked
 * @returns {boolean} the validation result
 */
function isValidRawTransactionFormat(rawTransaction) {
    if (typeof rawTransaction === 'string' && (isValidHex(rawTransaction) || isValidTxJsonString(rawTransaction))) {
        return true;
    }
    return false;
}
exports.isValidRawTransactionFormat = isValidRawTransactionFormat;
/**
 * Returns an hex string of the given buffer
 *
 * @param {Buffer | Uint8Array} buffer - the buffer to be converted to hex
 * @returns {string} - the hex value
 */
function toHex(buffer) {
    return hex.encode(buffer, true);
}
exports.toHex = toHex;
/**
 * Returns a Keccak-256 encoded string of the parameters
 *
 * @param types - strings describing the types of the values
 * @param values - value to encode
 * @param methodId - the first 4 bytes of the function selector
 */
function encodeDataParams(types, values, methodId) {
    types.forEach((type, index) => {
        if (type == 'address') {
            values[index] = values[index].replace(ADDRESS_PREFIX_REGEX, '0x');
        }
    });
    const abiCoder = new utils_1.AbiCoder();
    let data;
    try {
        data = abiCoder.encode(types, values);
    }
    catch (e) {
        throw new sdk_core_1.UtilsError('There was an error encoding the data params.');
    }
    if (methodId) {
        return utils_1.hexConcat([methodId, data]).replace(/^(0x)/, '');
    }
    else {
        return data.replace(/^(0x)/, '');
    }
}
exports.encodeDataParams = encodeDataParams;
/**
 * Returns the decoded values according to the array of types
 *
 * @param types - strings describing the types of the values
 * @param data - encoded string
 */
function decodeDataParams(types, data) {
    const abiCoder = new utils_1.AbiCoder();
    data = '0x' + data.substring(8);
    return abiCoder.decode(types, data).reduce((obj, arg, index) => {
        if (types[index] == 'address')
            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();
        obj.push(arg);
        return obj;
    }, []);
}
exports.decodeDataParams = decodeDataParams;
//# sourceMappingURL=data:application/json;base64,