"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenTransferBuilder = void 0;
const contractCallBuilder_1 = require("./contractCallBuilder");
const utils_1 = require("./utils");
// the first 4 bytes of the Keccak-256 encoded function selector used in token transfers, 'transfer(address,uint256)'
// this must be concatenated with the encoded parameters, recipientAddress and amount
const methodId = '0xa9059cbb';
class TokenTransferBuilder extends contractCallBuilder_1.ContractCallBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    async buildImplementation() {
        return await super.buildImplementation();
    }
    /**
     * Set the data with the transfer method call and parameters
     *
     * @param recipientAddress - recipient of token transfer
     * @param amount - token amount
     */
    tokenTransferData(recipientAddress, amount) {
        this.validateAddress({ address: recipientAddress });
        const recipientHex = utils_1.getHexAddressFromBase58Address(recipientAddress);
        const types = ['address', 'uint256'];
        const values = [recipientHex, amount];
        const tokenTransferData = utils_1.encodeDataParams(types, values, methodId);
        this.data(tokenTransferData);
        return this;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        return super.fromImplementation(rawTransaction);
    }
    /** @inheritdoc */
    signImplementation(key) {
        return super.signImplementation(key);
    }
}
exports.TokenTransferBuilder = TokenTransferBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5UcmFuc2ZlckJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Rva2VuVHJhbnNmZXJCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLCtEQUE0RDtBQUU1RCxtQ0FBMkU7QUFFM0UscUhBQXFIO0FBQ3JILHFGQUFxRjtBQUNyRixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFFOUIsTUFBYSxvQkFBcUIsU0FBUSx5Q0FBbUI7SUFJM0QsWUFBWSxXQUFpQztRQUMzQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELGtCQUFrQjtJQUNSLEtBQUssQ0FBQyxtQkFBbUI7UUFDakMsT0FBTyxNQUFNLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGlCQUFpQixDQUFDLGdCQUF3QixFQUFFLE1BQWM7UUFDeEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDcEQsTUFBTSxZQUFZLEdBQUcsc0NBQThCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV0RSxNQUFNLEtBQUssR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNyQyxNQUFNLE1BQU0sR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QyxNQUFNLGlCQUFpQixHQUFHLHdCQUFnQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGtCQUFrQjtJQUNSLGtCQUFrQixDQUFDLGNBQW1CO1FBQzlDLE9BQU8sS0FBSyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxrQkFBa0I7SUFDUixrQkFBa0IsQ0FBQyxHQUFZO1FBQ3ZDLE9BQU8sS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDRjtBQXZDRCxvREF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ29pbiBhcyBDb2luQ29uZmlnIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgQmFzZUtleSB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgeyBDb250cmFjdENhbGxCdWlsZGVyIH0gZnJvbSAnLi9jb250cmFjdENhbGxCdWlsZGVyJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBnZXRIZXhBZGRyZXNzRnJvbUJhc2U1OEFkZHJlc3MsIGVuY29kZURhdGFQYXJhbXMgfSBmcm9tICcuL3V0aWxzJztcblxuLy8gdGhlIGZpcnN0IDQgYnl0ZXMgb2YgdGhlIEtlY2Nhay0yNTYgZW5jb2RlZCBmdW5jdGlvbiBzZWxlY3RvciB1c2VkIGluIHRva2VuIHRyYW5zZmVycywgJ3RyYW5zZmVyKGFkZHJlc3MsdWludDI1NiknXG4vLyB0aGlzIG11c3QgYmUgY29uY2F0ZW5hdGVkIHdpdGggdGhlIGVuY29kZWQgcGFyYW1ldGVycywgcmVjaXBpZW50QWRkcmVzcyBhbmQgYW1vdW50XG5jb25zdCBtZXRob2RJZCA9ICcweGE5MDU5Y2JiJztcblxuZXhwb3J0IGNsYXNzIFRva2VuVHJhbnNmZXJCdWlsZGVyIGV4dGVuZHMgQ29udHJhY3RDYWxsQnVpbGRlciB7XG4gIHByaXZhdGUgX3JlY2lwaWVudEFkZHJlc3M7IC8vIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgMSB0b2tlbi90cmFuc2ZlclxuICBwcml2YXRlIF9hbW91bnQ7XG5cbiAgY29uc3RydWN0b3IoX2NvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+KSB7XG4gICAgc3VwZXIoX2NvaW5Db25maWcpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHByb3RlY3RlZCBhc3luYyBidWlsZEltcGxlbWVudGF0aW9uKCk6IFByb21pc2U8VHJhbnNhY3Rpb24+IHtcbiAgICByZXR1cm4gYXdhaXQgc3VwZXIuYnVpbGRJbXBsZW1lbnRhdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZGF0YSB3aXRoIHRoZSB0cmFuc2ZlciBtZXRob2QgY2FsbCBhbmQgcGFyYW1ldGVyc1xuICAgKlxuICAgKiBAcGFyYW0gcmVjaXBpZW50QWRkcmVzcyAtIHJlY2lwaWVudCBvZiB0b2tlbiB0cmFuc2ZlclxuICAgKiBAcGFyYW0gYW1vdW50IC0gdG9rZW4gYW1vdW50XG4gICAqL1xuICB0b2tlblRyYW5zZmVyRGF0YShyZWNpcGllbnRBZGRyZXNzOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy52YWxpZGF0ZUFkZHJlc3MoeyBhZGRyZXNzOiByZWNpcGllbnRBZGRyZXNzIH0pO1xuICAgIGNvbnN0IHJlY2lwaWVudEhleCA9IGdldEhleEFkZHJlc3NGcm9tQmFzZTU4QWRkcmVzcyhyZWNpcGllbnRBZGRyZXNzKTtcblxuICAgIGNvbnN0IHR5cGVzID0gWydhZGRyZXNzJywgJ3VpbnQyNTYnXTtcbiAgICBjb25zdCB2YWx1ZXMgPSBbcmVjaXBpZW50SGV4LCBhbW91bnRdO1xuICAgIGNvbnN0IHRva2VuVHJhbnNmZXJEYXRhID0gZW5jb2RlRGF0YVBhcmFtcyh0eXBlcywgdmFsdWVzLCBtZXRob2RJZCk7XG4gICAgdGhpcy5kYXRhKHRva2VuVHJhbnNmZXJEYXRhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBwcm90ZWN0ZWQgZnJvbUltcGxlbWVudGF0aW9uKHJhd1RyYW5zYWN0aW9uOiBhbnkpOiBUcmFuc2FjdGlvbiB7XG4gICAgcmV0dXJuIHN1cGVyLmZyb21JbXBsZW1lbnRhdGlvbihyYXdUcmFuc2FjdGlvbik7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcHJvdGVjdGVkIHNpZ25JbXBsZW1lbnRhdGlvbihrZXk6IEJhc2VLZXkpOiBUcmFuc2FjdGlvbiB7XG4gICAgcmV0dXJuIHN1cGVyLnNpZ25JbXBsZW1lbnRhdGlvbihrZXkpO1xuICB9XG59XG4iXX0=