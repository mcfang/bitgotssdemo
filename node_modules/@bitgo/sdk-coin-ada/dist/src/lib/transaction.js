"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const CardanoWasm = __importStar(require("@emurgo/cardano-serialization-lib-nodejs"));
const keyPair_1 = require("./keyPair");
var CertType;
(function (CertType) {
    CertType[CertType["StakeKeyRegistration"] = 0] = "StakeKeyRegistration";
    CertType[CertType["StakeKeyDelegation"] = 1] = "StakeKeyDelegation";
    CertType[CertType["StakeKeyDeregistration"] = 2] = "StakeKeyDeregistration";
    CertType[CertType["StakePoolRegistration"] = 3] = "StakePoolRegistration";
})(CertType || (CertType = {}));
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
    }
    get transaction() {
        return this._transaction;
    }
    set transaction(tx) {
        this._transaction = tx;
        this._id = Buffer.from(CardanoWasm.hash_transaction(tx.body()).to_bytes()).toString('hex');
    }
    /** @inheritdoc */
    canSign(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
            return true;
        }
        catch {
            return false;
        }
    }
    toBroadcastFormat() {
        if (!this._transaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        return Buffer.from(this._transaction.to_bytes()).toString('hex');
    }
    /** @inheritdoc */
    toJson() {
        if (!this._transaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        const result = {
            id: this.id,
            type: this._type,
            inputs: [],
            outputs: [],
            witnesses: [],
            certs: [],
            withdrawals: [],
        };
        for (let i = 0; i < this._transaction.body().inputs().len(); i++) {
            const input = this._transaction.body().inputs().get(i);
            result.inputs.push({
                transaction_id: Buffer.from(input.transaction_id().to_bytes()).toString('hex'),
                transaction_index: input.index(),
            });
        }
        for (let i = 0; i < this._transaction.body().outputs().len(); i++) {
            const output = this._transaction.body().outputs().get(i);
            result.outputs.push({
                address: output.address().to_bech32(),
                amount: output.amount().coin().to_str(),
                multiAssets: output.amount().multiasset() || undefined,
            });
        }
        if (this._transaction.body().certs()) {
            for (let i = 0; i < this._transaction.body().certs().len(); i++) {
                const cert = this._transaction.body().certs().get(i);
                if (cert.as_stake_registration() !== undefined) {
                    const stakeRegistration = cert.as_stake_registration();
                    result.certs.push({
                        type: CertType.StakeKeyRegistration,
                        stakeCredentialHash: Buffer.from(stakeRegistration.stake_credential().to_bytes()).toString('hex'),
                    });
                }
                if (cert.as_stake_deregistration() !== undefined) {
                    const stakeDeregistration = cert.as_stake_deregistration();
                    result.certs.push({
                        type: CertType.StakeKeyDeregistration,
                        stakeCredentialHash: Buffer.from(stakeDeregistration.stake_credential().to_bytes()).toString('hex'),
                    });
                }
                if (cert.as_stake_delegation() !== undefined) {
                    const stakeDelegation = cert.as_stake_delegation();
                    result.certs.push({
                        type: CertType.StakeKeyDelegation,
                        stakeCredentialHash: Buffer.from(stakeDelegation.stake_credential().to_bytes()).toString('hex'),
                        poolKeyHash: Buffer.from(stakeDelegation.pool_keyhash().to_bytes()).toString('hex'),
                    });
                }
                if (cert.as_pool_registration() !== undefined) {
                    const stakePoolRegistration = cert.as_pool_registration();
                    result.certs.push({
                        type: CertType.StakePoolRegistration,
                        poolKeyHash: Buffer.from(stakePoolRegistration.pool_params().operator().to_bytes()).toString('hex'),
                    });
                }
            }
        }
        result.pledgeDetails = this._pledgeDetails;
        if (this._transaction.body().withdrawals()) {
            const withdrawals = this._transaction.body().withdrawals();
            const keys = withdrawals.keys();
            for (let i = 0; i < keys.len(); i++) {
                const rewardAddress = keys.get(i);
                const reward = withdrawals.get(rewardAddress);
                result.withdrawals.push({
                    stakeAddress: rewardAddress.to_address().to_bytes().toString(),
                    value: reward.to_str(),
                });
            }
        }
        if (this._transaction.witness_set().vkeys() !== undefined) {
            const vkeys = this._transaction.witness_set().vkeys();
            for (let i = 0; i < vkeys.len(); i++) {
                const vkey = this._transaction.witness_set().vkeys().get(i);
                result.witnesses.push({
                    publicKey: vkey === null || vkey === void 0 ? void 0 : vkey.vkey().public_key().to_hex(),
                    signature: vkey === null || vkey === void 0 ? void 0 : vkey.signature().to_hex(),
                });
            }
        }
        return result;
    }
    /**
     * Build input and output field for this transaction
     *
     */
    loadInputsAndOutputs() {
        const outputs = [];
        const inputs = [];
        const tx_outputs = this._transaction.body().outputs();
        for (let i = 0; i < tx_outputs.len(); i++) {
            const output = tx_outputs.get(i);
            outputs.push({
                address: output.address().to_bech32(),
                value: output.amount().coin().to_str(),
            });
        }
        this._outputs = outputs;
        this._inputs = inputs;
    }
    /** @inheritdoc */
    get signablePayload() {
        return Buffer.from(CardanoWasm.hash_transaction(this._transaction.body()).to_bytes());
    }
    /**
     * Sets this transaction payload
     *
     * @param rawTx
     */
    fromRawTransaction(rawTx) {
        if (CardanoWasm.Transaction === undefined) {
            // a temp fix until we solve import problem in webpack
            throw new sdk_core_1.NodeEnvironmentError('unable to load cardano serialization library');
        }
        const HEX_REGEX = /^[0-9a-fA-F]+$/;
        const bufferRawTransaction = HEX_REGEX.test(rawTx) ? Buffer.from(rawTx, 'hex') : Buffer.from(rawTx, 'base64');
        try {
            const txn = CardanoWasm.Transaction.from_bytes(bufferRawTransaction);
            this._transaction = txn;
            this._id = Buffer.from(CardanoWasm.hash_transaction(txn.body()).to_bytes()).toString('hex');
            this._type = sdk_core_1.TransactionType.Send;
            if (this._transaction.body().certs()) {
                const certs = [];
                for (let i = 0; i < this._transaction.body().certs().len(); i++) {
                    const cert = this._transaction.body().certs().get(i);
                    certs.push(cert);
                }
                if (certs.some((c) => c.as_pool_registration() !== undefined)) {
                    this._type = sdk_core_1.TransactionType.StakingPledge;
                    const stakeKeyRegistration = certs.find((c) => c.as_stake_registration() !== undefined);
                    const stakeKeyDelegation = certs.find((c) => c.as_stake_delegation() !== undefined);
                    const stakePoolRegistration = certs.find((c) => c.as_pool_registration() !== undefined);
                    this._pledgeDetails = {
                        stakeKeyRegistration: this.loadStakeKeyRegistration(stakeKeyRegistration),
                        stakeKeyDelegation: this.loadStakeKeyDelegation(stakeKeyDelegation),
                        stakePoolRegistration: this.loadStakePoolRegistration(stakePoolRegistration),
                    };
                }
                else if (certs.some((c) => c.as_stake_registration() !== undefined)) {
                    this._type = sdk_core_1.TransactionType.StakingActivate;
                }
                else if (certs.some((c) => c.as_stake_deregistration() !== undefined)) {
                    this._type = sdk_core_1.TransactionType.StakingDeactivate;
                }
            }
            if (this._transaction.body().withdrawals()) {
                this._type = sdk_core_1.TransactionType.StakingWithdraw;
            }
            this._fee = txn.body().fee().to_str();
            this.loadInputsAndOutputs();
            if (this._transaction.witness_set().vkeys()) {
                const vkeys = this._transaction.witness_set().vkeys();
                for (let i = 0; i < vkeys.len(); i++) {
                    const vkey = vkeys.get(i);
                    this._signatures.push(vkey.signature().to_hex());
                }
            }
        }
        catch (e) {
            throw new sdk_core_1.InvalidTransactionError('unable to build transaction from raw');
        }
    }
    loadStakeKeyRegistration(certificate) {
        if (certificate === undefined) {
            return undefined;
        }
        const stakeRegistration = certificate.as_stake_registration();
        if (stakeRegistration !== undefined && stakeRegistration.stake_credential().to_keyhash() !== undefined) {
            return {
                type: CertType.StakeKeyRegistration,
                stakeCredentialHash: stakeRegistration.stake_credential().to_keyhash().to_hex(),
            };
        }
        else {
            return undefined;
        }
    }
    loadStakeKeyDelegation(certificate) {
        if (certificate === undefined) {
            return undefined;
        }
        const stakeDelegation = certificate.as_stake_delegation();
        if (stakeDelegation !== undefined && stakeDelegation.stake_credential().to_keyhash() !== undefined) {
            return {
                type: CertType.StakeKeyDelegation,
                stakeCredentialHash: stakeDelegation.stake_credential().to_keyhash().to_hex(),
                poolKeyHash: stakeDelegation.pool_keyhash().to_hex(),
            };
        }
        else {
            return undefined;
        }
    }
    loadStakePoolRegistration(certificate) {
        const poolRegistration = certificate.as_pool_registration();
        const rewardAccount = poolRegistration.pool_params().reward_account();
        const networkId = rewardAccount.to_address().network_id();
        const owners = [];
        for (let i = 0; i < poolRegistration.pool_params().pool_owners().len(); i++) {
            const poolOwner = poolRegistration.pool_params().pool_owners().get(i);
            const ownerStakeKey = CardanoWasm.StakeCredential.from_keyhash(poolOwner);
            owners.push(CardanoWasm.RewardAddress.new(networkId, ownerStakeKey).to_address().to_bech32());
        }
        return {
            type: CertType.StakePoolRegistration,
            poolKeyHash: poolRegistration.pool_params().operator().to_hex(),
            vrfKeyHash: poolRegistration.pool_params().vrf_keyhash().to_hex(),
            pledge: poolRegistration.pool_params().pledge().to_str(),
            cost: poolRegistration.pool_params().cost().to_str(),
            marginNumerator: poolRegistration.pool_params().margin().numerator().to_str(),
            marginDenominator: poolRegistration.pool_params().margin().denominator().to_str(),
            rewardAccount: rewardAccount.to_address().to_bech32(),
            poolOwners: owners,
        };
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /** @inheritdoc */
    explainTransaction() {
        const txJson = this.toJson();
        const displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        const amount = txJson.outputs.map((o) => ({ amount: BigInt(o.amount) }));
        const outputAmount = amount.reduce((p, n) => p + BigInt(n.amount), BigInt('0')).toString();
        const type = this._type === sdk_core_1.TransactionType.Send
            ? 'Transfer'
            : this._type === sdk_core_1.TransactionType.StakingActivate
                ? 'StakingActivate'
                : this._type === sdk_core_1.TransactionType.StakingWithdraw
                    ? 'StakingWithdraw'
                    : this._type === sdk_core_1.TransactionType.StakingDeactivate
                        ? 'StakingDeactivate'
                        : this._type === sdk_core_1.TransactionType.StakingPledge
                            ? 'StakingPledge'
                            : 'undefined';
        return {
            displayOrder,
            id: txJson.id,
            outputs: txJson.outputs.map((o) => ({ address: o.address, amount: o.amount })),
            outputAmount: outputAmount,
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: this._fee },
            type,
            certificates: txJson.certs,
            withdrawals: txJson.withdrawals,
            pledgeDetails: this._pledgeDetails,
        };
    }
    getPledgeDetails() {
        return this._pledgeDetails;
    }
    /**
     * Get transaction fee
     */
    get getFee() {
        return this._fee;
    }
    /**
     * Set transaction fee
     *
     * @param fee
     */
    fee(fee) {
        this._fee = fee;
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4Q0FPeUI7QUFDekIsc0ZBQXdFO0FBQ3hFLHVDQUFvQztBQXdCcEMsSUFBSyxRQUtKO0FBTEQsV0FBSyxRQUFRO0lBQ1gsdUVBQW9CLENBQUE7SUFDcEIsbUVBQWtCLENBQUE7SUFDbEIsMkVBQXNCLENBQUE7SUFDdEIseUVBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQUxJLFFBQVEsS0FBUixRQUFRLFFBS1o7QUErQ0QsTUFBYSxXQUFZLFNBQVEsMEJBQWU7SUFLOUMsWUFBWSxVQUFnQztRQUMxQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsRUFBMkI7UUFDekMsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQsa0JBQWtCO0lBQ2xCLE9BQU8sQ0FBQyxHQUFZO1FBQ2xCLElBQUk7WUFDRixJQUFJLGlCQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDOUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE1BQU07WUFDTixPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxrQ0FBdUIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixNQUFNO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDdEIsTUFBTSxJQUFJLGtDQUF1QixDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDN0Q7UUFFRCxNQUFNLE1BQU0sR0FBVztZQUNyQixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDWCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQXdCO1lBQ25DLE1BQU0sRUFBRSxFQUFFO1lBQ1YsT0FBTyxFQUFFLEVBQUU7WUFDWCxTQUFTLEVBQUUsRUFBRTtZQUNiLEtBQUssRUFBRSxFQUFFO1lBQ1QsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQztRQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNqQixjQUFjLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO2dCQUM5RSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFO2FBQ2pDLENBQUMsQ0FBQztTQUNKO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ2xCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFO2dCQUNyQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRTtnQkFDdkMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxTQUFTO2FBQ3ZELENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3BDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNoRSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEQsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUUsS0FBSyxTQUFTLEVBQUU7b0JBQzlDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFtQyxDQUFDO29CQUN4RixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzt3QkFDaEIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxvQkFBb0I7d0JBQ25DLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7cUJBQ2xHLENBQUMsQ0FBQztpQkFDSjtnQkFDRCxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLFNBQVMsRUFBRTtvQkFDaEQsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQXFDLENBQUM7b0JBQzlGLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO3dCQUNoQixJQUFJLEVBQUUsUUFBUSxDQUFDLHNCQUFzQjt3QkFDckMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztxQkFDcEcsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFLEtBQUssU0FBUyxFQUFFO29CQUM1QyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQWlDLENBQUM7b0JBQ2xGLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO3dCQUNoQixJQUFJLEVBQUUsUUFBUSxDQUFDLGtCQUFrQjt3QkFDakMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7d0JBQy9GLFdBQVcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7cUJBQ3BGLENBQUMsQ0FBQztpQkFDSjtnQkFDRCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLFNBQVMsRUFBRTtvQkFDN0MsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQWtDLENBQUM7b0JBQzFGLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO3dCQUNoQixJQUFJLEVBQUUsUUFBUSxDQUFDLHFCQUFxQjt3QkFDcEMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO3FCQUNwRyxDQUFDLENBQUM7aUJBQ0o7YUFDRjtTQUNGO1FBRUQsTUFBTSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBRTNDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUMxQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBNkIsQ0FBQztZQUN0RixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQXVCLENBQUM7Z0JBQ3BFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO29CQUN0QixZQUFZLEVBQUUsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRTtvQkFDOUQsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUU7aUJBQ3ZCLENBQUMsQ0FBQzthQUNKO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ3pELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUErQixDQUFDO1lBQ25GLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BDLE1BQU0sSUFBSSxHQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFnQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0YsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7b0JBQ3BCLFNBQVMsRUFBRSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsSUFBSSxHQUFHLFVBQVUsR0FBRyxNQUFNLEVBQUU7b0JBQzdDLFNBQVMsRUFBRSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRTtpQkFDdEMsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxvQkFBb0I7UUFDbEIsTUFBTSxPQUFPLEdBQVksRUFBRSxDQUFDO1FBQzVCLE1BQU0sTUFBTSxHQUFZLEVBQUUsQ0FBQztRQUUzQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFO2dCQUNyQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRTthQUN2QyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxrQkFBa0IsQ0FBQyxLQUFhO1FBQzlCLElBQUksV0FBVyxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDekMsc0RBQXNEO1lBQ3RELE1BQU0sSUFBSSwrQkFBb0IsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDbkMsTUFBTSxvQkFBb0IsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUcsSUFBSTtZQUNGLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7WUFDeEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1RixJQUFJLENBQUMsS0FBSyxHQUFHLDBCQUFlLENBQUMsSUFBSSxDQUFDO1lBQ2xDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDcEMsTUFBTSxLQUFLLEdBQThCLEVBQUUsQ0FBQztnQkFDNUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ2hFLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNsQjtnQkFFRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLFNBQVMsQ0FBQyxFQUFFO29CQUM3RCxJQUFJLENBQUMsS0FBSyxHQUFHLDBCQUFlLENBQUMsYUFBYSxDQUFDO29CQUMzQyxNQUFNLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDO29CQUN4RixNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDO29CQUNwRixNQUFNLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDO29CQUV4RixJQUFJLENBQUMsY0FBYyxHQUFHO3dCQUNwQixvQkFBb0IsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsb0JBQW9CLENBQUM7d0JBQ3pFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQzt3QkFDbkUscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLHFCQUFzQixDQUFDO3FCQUM5RSxDQUFDO2lCQUNIO3FCQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLEtBQUssU0FBUyxDQUFDLEVBQUU7b0JBQ3JFLElBQUksQ0FBQyxLQUFLLEdBQUcsMEJBQWUsQ0FBQyxlQUFlLENBQUM7aUJBQzlDO3FCQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixFQUFFLEtBQUssU0FBUyxDQUFDLEVBQUU7b0JBQ3ZFLElBQUksQ0FBQyxLQUFLLEdBQUcsMEJBQWUsQ0FBQyxpQkFBaUIsQ0FBQztpQkFDaEQ7YUFDRjtZQUNELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRywwQkFBZSxDQUFDLGVBQWUsQ0FBQzthQUM5QztZQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBRTVCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQWdDLENBQUM7Z0JBQ3BGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2lCQUNsRDthQUNGO1NBQ0Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sSUFBSSxrQ0FBdUIsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1NBQzNFO0lBQ0gsQ0FBQztJQUVPLHdCQUF3QixDQUM5QixXQUFnRDtRQUVoRCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0IsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxNQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzlELElBQUksaUJBQWlCLEtBQUssU0FBUyxJQUFJLGlCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUMsVUFBVSxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ3ZHLE9BQU87Z0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxvQkFBb0I7Z0JBQ25DLG1CQUFtQixFQUFFLGlCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUMsVUFBVSxFQUFHLENBQUMsTUFBTSxFQUFFO2FBQ2xGLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRU8sc0JBQXNCLENBQUMsV0FBZ0Q7UUFDN0UsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQzdCLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDMUQsSUFBSSxlQUFlLEtBQUssU0FBUyxJQUFJLGVBQWdCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxTQUFTLEVBQUU7WUFDbkcsT0FBTztnQkFDTCxJQUFJLEVBQUUsUUFBUSxDQUFDLGtCQUFrQjtnQkFDakMsbUJBQW1CLEVBQUUsZUFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFVBQVUsRUFBRyxDQUFDLE1BQU0sRUFBRTtnQkFDL0UsV0FBVyxFQUFFLGVBQWdCLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxFQUFFO2FBQ3RELENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRU8seUJBQXlCLENBQUMsV0FBb0M7UUFDcEUsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM1RCxNQUFNLGFBQWEsR0FBRyxnQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2RSxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDMUQsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO1FBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1RSxNQUFNLFNBQVMsR0FBRyxnQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkUsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDMUUsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUMvRjtRQUNELE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUSxDQUFDLHFCQUFxQjtZQUNwQyxXQUFXLEVBQUUsZ0JBQWlCLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ2hFLFVBQVUsRUFBRSxnQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDbEUsTUFBTSxFQUFFLGdCQUFpQixDQUFDLFdBQVcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUN6RCxJQUFJLEVBQUUsZ0JBQWlCLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ3JELGVBQWUsRUFBRSxnQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDOUUsaUJBQWlCLEVBQUUsZ0JBQWlCLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ2xGLGFBQWEsRUFBRSxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFO1lBQ3JELFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGtCQUFrQixDQUFDLGVBQWdDO1FBQ2pELElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO0lBQy9CLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsa0JBQWtCO1FBYWhCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixNQUFNLFlBQVksR0FBRyxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZHLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekUsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzNGLE1BQU0sSUFBSSxHQUNSLElBQUksQ0FBQyxLQUFLLEtBQUssMEJBQWUsQ0FBQyxJQUFJO1lBQ2pDLENBQUMsQ0FBQyxVQUFVO1lBQ1osQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssMEJBQWUsQ0FBQyxlQUFlO2dCQUNoRCxDQUFDLENBQUMsaUJBQWlCO2dCQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSywwQkFBZSxDQUFDLGVBQWU7b0JBQ2hELENBQUMsQ0FBQyxpQkFBaUI7b0JBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLDBCQUFlLENBQUMsaUJBQWlCO3dCQUNsRCxDQUFDLENBQUMsbUJBQW1CO3dCQUNyQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSywwQkFBZSxDQUFDLGFBQWE7NEJBQzlDLENBQUMsQ0FBQyxlQUFlOzRCQUNqQixDQUFDLENBQUMsV0FBVyxDQUFDO1FBQ2xCLE9BQU87WUFDTCxZQUFZO1lBQ1osRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ2IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQzlFLFlBQVksRUFBRSxZQUFZO1lBQzFCLGFBQWEsRUFBRSxFQUFFO1lBQ2pCLFlBQVksRUFBRSxHQUFHO1lBQ2pCLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLElBQUk7WUFDSixZQUFZLEVBQUUsTUFBTSxDQUFDLEtBQUs7WUFDMUIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXO1lBQy9CLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxHQUFHLENBQUMsR0FBVztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLENBQUM7Q0FDRjtBQTFWRCxrQ0EwVkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYXNlS2V5LFxuICBCYXNlVHJhbnNhY3Rpb24sXG4gIEVudHJ5LFxuICBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvcixcbiAgTm9kZUVudmlyb25tZW50RXJyb3IsXG4gIFRyYW5zYWN0aW9uVHlwZSxcbn0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcbmltcG9ydCAqIGFzIENhcmRhbm9XYXNtIGZyb20gJ0BlbXVyZ28vY2FyZGFuby1zZXJpYWxpemF0aW9uLWxpYi1ub2RlanMnO1xuaW1wb3J0IHsgS2V5UGFpciB9IGZyb20gJy4va2V5UGFpcic7XG5pbXBvcnQgeyBCYXNlQ29pbiBhcyBDb2luQ29uZmlnIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uSW5wdXQge1xuICB0cmFuc2FjdGlvbl9pZDogc3RyaW5nO1xuICB0cmFuc2FjdGlvbl9pbmRleDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzc2V0IHtcbiAgcG9saWN5X2lkOiBzdHJpbmc7XG4gIGFzc2V0X25hbWU6IHN0cmluZztcbiAgcXVhbnRpdHk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2FjdGlvbk91dHB1dCB7XG4gIGFkZHJlc3M6IHN0cmluZztcbiAgYW1vdW50OiBzdHJpbmc7XG4gIG11bHRpQXNzZXRzPzogQ2FyZGFub1dhc20uTXVsdGlBc3NldDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaXRuZXNzIHtcbiAgcHVibGljS2V5OiBzdHJpbmc7XG4gIHNpZ25hdHVyZTogc3RyaW5nO1xufVxuZW51bSBDZXJ0VHlwZSB7XG4gIFN0YWtlS2V5UmVnaXN0cmF0aW9uLFxuICBTdGFrZUtleURlbGVnYXRpb24sXG4gIFN0YWtlS2V5RGVyZWdpc3RyYXRpb24sXG4gIFN0YWtlUG9vbFJlZ2lzdHJhdGlvbixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDZXJ0IHtcbiAgdHlwZTogQ2VydFR5cGU7XG4gIHN0YWtlQ3JlZGVudGlhbEhhc2g/OiBzdHJpbmc7XG4gIHBvb2xLZXlIYXNoPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdpdGhkcmF3YWwge1xuICBzdGFrZUFkZHJlc3M6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU3Rha2VLZXlSZWdpc3RyYXRpb25DZXJ0ID0gQ2VydDtcblxuZXhwb3J0IHR5cGUgU3Rha2VLZXlEZWxlZ2F0aW9uQ2VydCA9IENlcnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3Rha2VQb29sUmVnaXN0cmF0aW9uQ2VydCBleHRlbmRzIENlcnQge1xuICB2cmZLZXlIYXNoOiBzdHJpbmc7XG4gIHBsZWRnZTogc3RyaW5nO1xuICBjb3N0OiBzdHJpbmc7XG4gIG1hcmdpbk51bWVyYXRvcjogc3RyaW5nO1xuICBtYXJnaW5EZW5vbWluYXRvcjogc3RyaW5nO1xuICByZXdhcmRBY2NvdW50OiBzdHJpbmc7XG4gIHBvb2xPd25lcnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsZWRnZURldGFpbHMge1xuICBzdGFrZUtleVJlZ2lzdHJhdGlvbj86IFN0YWtlS2V5UmVnaXN0cmF0aW9uQ2VydDtcbiAgc3Rha2VLZXlEZWxlZ2F0aW9uPzogU3Rha2VLZXlEZWxlZ2F0aW9uQ2VydDtcbiAgc3Rha2VQb29sUmVnaXN0cmF0aW9uOiBTdGFrZVBvb2xSZWdpc3RyYXRpb25DZXJ0O1xufVxuXG4vKipcbiAqIFRoZSB0cmFuc2FjdGlvbiBkYXRhIHJldHVybmVkIGZyb20gdGhlIHRvSnNvbigpIGZ1bmN0aW9uIG9mIGEgdHJhbnNhY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeERhdGEge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiBUcmFuc2FjdGlvblR5cGU7XG4gIGlucHV0czogVHJhbnNhY3Rpb25JbnB1dFtdO1xuICBvdXRwdXRzOiBUcmFuc2FjdGlvbk91dHB1dFtdO1xuICB3aXRuZXNzZXM6IFdpdG5lc3NbXTtcbiAgY2VydHM6IENlcnRbXTtcbiAgd2l0aGRyYXdhbHM6IFdpdGhkcmF3YWxbXTtcbiAgcGxlZGdlRGV0YWlscz86IFBsZWRnZURldGFpbHM7XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiBleHRlbmRzIEJhc2VUcmFuc2FjdGlvbiB7XG4gIHByaXZhdGUgX3RyYW5zYWN0aW9uOiBDYXJkYW5vV2FzbS5UcmFuc2FjdGlvbjtcbiAgcHJpdmF0ZSBfZmVlOiBzdHJpbmc7XG4gIHByaXZhdGUgX3BsZWRnZURldGFpbHM/OiBQbGVkZ2VEZXRhaWxzO1xuXG4gIGNvbnN0cnVjdG9yKGNvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+KSB7XG4gICAgc3VwZXIoY29pbkNvbmZpZyk7XG4gIH1cblxuICBnZXQgdHJhbnNhY3Rpb24oKTogQ2FyZGFub1dhc20uVHJhbnNhY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbjtcbiAgfVxuXG4gIHNldCB0cmFuc2FjdGlvbih0eDogQ2FyZGFub1dhc20uVHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl90cmFuc2FjdGlvbiA9IHR4O1xuICAgIHRoaXMuX2lkID0gQnVmZmVyLmZyb20oQ2FyZGFub1dhc20uaGFzaF90cmFuc2FjdGlvbih0eC5ib2R5KCkpLnRvX2J5dGVzKCkpLnRvU3RyaW5nKCdoZXgnKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBjYW5TaWduKGtleTogQmFzZUtleSk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICBuZXcgS2V5UGFpcih7IHBydjoga2V5LmtleSB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRvQnJvYWRjYXN0Rm9ybWF0KCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLl90cmFuc2FjdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRUcmFuc2FjdGlvbkVycm9yKCdFbXB0eSB0cmFuc2FjdGlvbiBkYXRhJyk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLl90cmFuc2FjdGlvbi50b19ieXRlcygpKS50b1N0cmluZygnaGV4Jyk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgdG9Kc29uKCk6IFR4RGF0YSB7XG4gICAgaWYgKCF0aGlzLl90cmFuc2FjdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRUcmFuc2FjdGlvbkVycm9yKCdFbXB0eSB0cmFuc2FjdGlvbiBkYXRhJyk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0OiBUeERhdGEgPSB7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIHR5cGU6IHRoaXMuX3R5cGUgYXMgVHJhbnNhY3Rpb25UeXBlLFxuICAgICAgaW5wdXRzOiBbXSxcbiAgICAgIG91dHB1dHM6IFtdLFxuICAgICAgd2l0bmVzc2VzOiBbXSxcbiAgICAgIGNlcnRzOiBbXSxcbiAgICAgIHdpdGhkcmF3YWxzOiBbXSxcbiAgICB9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90cmFuc2FjdGlvbi5ib2R5KCkuaW5wdXRzKCkubGVuKCk7IGkrKykge1xuICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLl90cmFuc2FjdGlvbi5ib2R5KCkuaW5wdXRzKCkuZ2V0KGkpO1xuICAgICAgcmVzdWx0LmlucHV0cy5wdXNoKHtcbiAgICAgICAgdHJhbnNhY3Rpb25faWQ6IEJ1ZmZlci5mcm9tKGlucHV0LnRyYW5zYWN0aW9uX2lkKCkudG9fYnl0ZXMoKSkudG9TdHJpbmcoJ2hleCcpLFxuICAgICAgICB0cmFuc2FjdGlvbl9pbmRleDogaW5wdXQuaW5kZXgoKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdHJhbnNhY3Rpb24uYm9keSgpLm91dHB1dHMoKS5sZW4oKTsgaSsrKSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB0aGlzLl90cmFuc2FjdGlvbi5ib2R5KCkub3V0cHV0cygpLmdldChpKTtcbiAgICAgIHJlc3VsdC5vdXRwdXRzLnB1c2goe1xuICAgICAgICBhZGRyZXNzOiBvdXRwdXQuYWRkcmVzcygpLnRvX2JlY2gzMigpLFxuICAgICAgICBhbW91bnQ6IG91dHB1dC5hbW91bnQoKS5jb2luKCkudG9fc3RyKCksXG4gICAgICAgIG11bHRpQXNzZXRzOiBvdXRwdXQuYW1vdW50KCkubXVsdGlhc3NldCgpIHx8IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl90cmFuc2FjdGlvbi5ib2R5KCkuY2VydHMoKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90cmFuc2FjdGlvbi5ib2R5KCkuY2VydHMoKSEubGVuKCk7IGkrKykge1xuICAgICAgICBjb25zdCBjZXJ0ID0gdGhpcy5fdHJhbnNhY3Rpb24uYm9keSgpLmNlcnRzKCkhLmdldChpKTtcbiAgICAgICAgaWYgKGNlcnQuYXNfc3Rha2VfcmVnaXN0cmF0aW9uKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnN0IHN0YWtlUmVnaXN0cmF0aW9uID0gY2VydC5hc19zdGFrZV9yZWdpc3RyYXRpb24oKSBhcyBDYXJkYW5vV2FzbS5TdGFrZVJlZ2lzdHJhdGlvbjtcbiAgICAgICAgICByZXN1bHQuY2VydHMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBDZXJ0VHlwZS5TdGFrZUtleVJlZ2lzdHJhdGlvbixcbiAgICAgICAgICAgIHN0YWtlQ3JlZGVudGlhbEhhc2g6IEJ1ZmZlci5mcm9tKHN0YWtlUmVnaXN0cmF0aW9uLnN0YWtlX2NyZWRlbnRpYWwoKS50b19ieXRlcygpKS50b1N0cmluZygnaGV4JyksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNlcnQuYXNfc3Rha2VfZGVyZWdpc3RyYXRpb24oKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc3Qgc3Rha2VEZXJlZ2lzdHJhdGlvbiA9IGNlcnQuYXNfc3Rha2VfZGVyZWdpc3RyYXRpb24oKSBhcyBDYXJkYW5vV2FzbS5TdGFrZURlcmVnaXN0cmF0aW9uO1xuICAgICAgICAgIHJlc3VsdC5jZXJ0cy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IENlcnRUeXBlLlN0YWtlS2V5RGVyZWdpc3RyYXRpb24sXG4gICAgICAgICAgICBzdGFrZUNyZWRlbnRpYWxIYXNoOiBCdWZmZXIuZnJvbShzdGFrZURlcmVnaXN0cmF0aW9uLnN0YWtlX2NyZWRlbnRpYWwoKS50b19ieXRlcygpKS50b1N0cmluZygnaGV4JyksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNlcnQuYXNfc3Rha2VfZGVsZWdhdGlvbigpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBzdGFrZURlbGVnYXRpb24gPSBjZXJ0LmFzX3N0YWtlX2RlbGVnYXRpb24oKSBhcyBDYXJkYW5vV2FzbS5TdGFrZURlbGVnYXRpb247XG4gICAgICAgICAgcmVzdWx0LmNlcnRzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogQ2VydFR5cGUuU3Rha2VLZXlEZWxlZ2F0aW9uLFxuICAgICAgICAgICAgc3Rha2VDcmVkZW50aWFsSGFzaDogQnVmZmVyLmZyb20oc3Rha2VEZWxlZ2F0aW9uLnN0YWtlX2NyZWRlbnRpYWwoKS50b19ieXRlcygpKS50b1N0cmluZygnaGV4JyksXG4gICAgICAgICAgICBwb29sS2V5SGFzaDogQnVmZmVyLmZyb20oc3Rha2VEZWxlZ2F0aW9uLnBvb2xfa2V5aGFzaCgpLnRvX2J5dGVzKCkpLnRvU3RyaW5nKCdoZXgnKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2VydC5hc19wb29sX3JlZ2lzdHJhdGlvbigpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBzdGFrZVBvb2xSZWdpc3RyYXRpb24gPSBjZXJ0LmFzX3Bvb2xfcmVnaXN0cmF0aW9uKCkgYXMgQ2FyZGFub1dhc20uUG9vbFJlZ2lzdHJhdGlvbjtcbiAgICAgICAgICByZXN1bHQuY2VydHMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBDZXJ0VHlwZS5TdGFrZVBvb2xSZWdpc3RyYXRpb24sXG4gICAgICAgICAgICBwb29sS2V5SGFzaDogQnVmZmVyLmZyb20oc3Rha2VQb29sUmVnaXN0cmF0aW9uLnBvb2xfcGFyYW1zKCkub3BlcmF0b3IoKS50b19ieXRlcygpKS50b1N0cmluZygnaGV4JyksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQucGxlZGdlRGV0YWlscyA9IHRoaXMuX3BsZWRnZURldGFpbHM7XG5cbiAgICBpZiAodGhpcy5fdHJhbnNhY3Rpb24uYm9keSgpLndpdGhkcmF3YWxzKCkpIHtcbiAgICAgIGNvbnN0IHdpdGhkcmF3YWxzID0gdGhpcy5fdHJhbnNhY3Rpb24uYm9keSgpLndpdGhkcmF3YWxzKCkgYXMgQ2FyZGFub1dhc20uV2l0aGRyYXdhbHM7XG4gICAgICBjb25zdCBrZXlzID0gd2l0aGRyYXdhbHMua2V5cygpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbigpOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmV3YXJkQWRkcmVzcyA9IGtleXMuZ2V0KGkpO1xuICAgICAgICBjb25zdCByZXdhcmQgPSB3aXRoZHJhd2Fscy5nZXQocmV3YXJkQWRkcmVzcykgYXMgQ2FyZGFub1dhc20uQmlnTnVtO1xuICAgICAgICByZXN1bHQud2l0aGRyYXdhbHMucHVzaCh7XG4gICAgICAgICAgc3Rha2VBZGRyZXNzOiByZXdhcmRBZGRyZXNzLnRvX2FkZHJlc3MoKS50b19ieXRlcygpLnRvU3RyaW5nKCksXG4gICAgICAgICAgdmFsdWU6IHJld2FyZC50b19zdHIoKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RyYW5zYWN0aW9uLndpdG5lc3Nfc2V0KCkudmtleXMoKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB2a2V5cyA9IHRoaXMuX3RyYW5zYWN0aW9uLndpdG5lc3Nfc2V0KCkudmtleXMoKSBhcyBDYXJkYW5vV2FzbS5Wa2V5d2l0bmVzc2VzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2a2V5cy5sZW4oKTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHZrZXkgPSAodGhpcy5fdHJhbnNhY3Rpb24ud2l0bmVzc19zZXQoKS52a2V5cygpIGFzIENhcmRhbm9XYXNtLlZrZXl3aXRuZXNzZXMpLmdldChpKTtcbiAgICAgICAgcmVzdWx0LndpdG5lc3Nlcy5wdXNoKHtcbiAgICAgICAgICBwdWJsaWNLZXk6IHZrZXk/LnZrZXkoKS5wdWJsaWNfa2V5KCkudG9faGV4KCksXG4gICAgICAgICAgc2lnbmF0dXJlOiB2a2V5Py5zaWduYXR1cmUoKS50b19oZXgoKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgaW5wdXQgYW5kIG91dHB1dCBmaWVsZCBmb3IgdGhpcyB0cmFuc2FjdGlvblxuICAgKlxuICAgKi9cbiAgbG9hZElucHV0c0FuZE91dHB1dHMoKTogdm9pZCB7XG4gICAgY29uc3Qgb3V0cHV0czogRW50cnlbXSA9IFtdO1xuICAgIGNvbnN0IGlucHV0czogRW50cnlbXSA9IFtdO1xuXG4gICAgY29uc3QgdHhfb3V0cHV0cyA9IHRoaXMuX3RyYW5zYWN0aW9uLmJvZHkoKS5vdXRwdXRzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eF9vdXRwdXRzLmxlbigpOyBpKyspIHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IHR4X291dHB1dHMuZ2V0KGkpO1xuICAgICAgb3V0cHV0cy5wdXNoKHtcbiAgICAgICAgYWRkcmVzczogb3V0cHV0LmFkZHJlc3MoKS50b19iZWNoMzIoKSxcbiAgICAgICAgdmFsdWU6IG91dHB1dC5hbW91bnQoKS5jb2luKCkudG9fc3RyKCksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9vdXRwdXRzID0gb3V0cHV0cztcbiAgICB0aGlzLl9pbnB1dHMgPSBpbnB1dHM7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgZ2V0IHNpZ25hYmxlUGF5bG9hZCgpOiBCdWZmZXIge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShDYXJkYW5vV2FzbS5oYXNoX3RyYW5zYWN0aW9uKHRoaXMuX3RyYW5zYWN0aW9uLmJvZHkoKSkudG9fYnl0ZXMoKSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGlzIHRyYW5zYWN0aW9uIHBheWxvYWRcbiAgICpcbiAgICogQHBhcmFtIHJhd1R4XG4gICAqL1xuICBmcm9tUmF3VHJhbnNhY3Rpb24ocmF3VHg6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChDYXJkYW5vV2FzbS5UcmFuc2FjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBhIHRlbXAgZml4IHVudGlsIHdlIHNvbHZlIGltcG9ydCBwcm9ibGVtIGluIHdlYnBhY2tcbiAgICAgIHRocm93IG5ldyBOb2RlRW52aXJvbm1lbnRFcnJvcigndW5hYmxlIHRvIGxvYWQgY2FyZGFubyBzZXJpYWxpemF0aW9uIGxpYnJhcnknKTtcbiAgICB9XG4gICAgY29uc3QgSEVYX1JFR0VYID0gL15bMC05YS1mQS1GXSskLztcbiAgICBjb25zdCBidWZmZXJSYXdUcmFuc2FjdGlvbiA9IEhFWF9SRUdFWC50ZXN0KHJhd1R4KSA/IEJ1ZmZlci5mcm9tKHJhd1R4LCAnaGV4JykgOiBCdWZmZXIuZnJvbShyYXdUeCwgJ2Jhc2U2NCcpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0eG4gPSBDYXJkYW5vV2FzbS5UcmFuc2FjdGlvbi5mcm9tX2J5dGVzKGJ1ZmZlclJhd1RyYW5zYWN0aW9uKTtcbiAgICAgIHRoaXMuX3RyYW5zYWN0aW9uID0gdHhuO1xuICAgICAgdGhpcy5faWQgPSBCdWZmZXIuZnJvbShDYXJkYW5vV2FzbS5oYXNoX3RyYW5zYWN0aW9uKHR4bi5ib2R5KCkpLnRvX2J5dGVzKCkpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgIHRoaXMuX3R5cGUgPSBUcmFuc2FjdGlvblR5cGUuU2VuZDtcbiAgICAgIGlmICh0aGlzLl90cmFuc2FjdGlvbi5ib2R5KCkuY2VydHMoKSkge1xuICAgICAgICBjb25zdCBjZXJ0czogQ2FyZGFub1dhc20uQ2VydGlmaWNhdGVbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RyYW5zYWN0aW9uLmJvZHkoKS5jZXJ0cygpIS5sZW4oKTsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2VydCA9IHRoaXMuX3RyYW5zYWN0aW9uLmJvZHkoKS5jZXJ0cygpIS5nZXQoaSk7XG4gICAgICAgICAgY2VydHMucHVzaChjZXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjZXJ0cy5zb21lKChjKSA9PiBjLmFzX3Bvb2xfcmVnaXN0cmF0aW9uKCkgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICB0aGlzLl90eXBlID0gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdQbGVkZ2U7XG4gICAgICAgICAgY29uc3Qgc3Rha2VLZXlSZWdpc3RyYXRpb24gPSBjZXJ0cy5maW5kKChjKSA9PiBjLmFzX3N0YWtlX3JlZ2lzdHJhdGlvbigpICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgIGNvbnN0IHN0YWtlS2V5RGVsZWdhdGlvbiA9IGNlcnRzLmZpbmQoKGMpID0+IGMuYXNfc3Rha2VfZGVsZWdhdGlvbigpICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgIGNvbnN0IHN0YWtlUG9vbFJlZ2lzdHJhdGlvbiA9IGNlcnRzLmZpbmQoKGMpID0+IGMuYXNfcG9vbF9yZWdpc3RyYXRpb24oKSAhPT0gdW5kZWZpbmVkKTtcblxuICAgICAgICAgIHRoaXMuX3BsZWRnZURldGFpbHMgPSB7XG4gICAgICAgICAgICBzdGFrZUtleVJlZ2lzdHJhdGlvbjogdGhpcy5sb2FkU3Rha2VLZXlSZWdpc3RyYXRpb24oc3Rha2VLZXlSZWdpc3RyYXRpb24pLFxuICAgICAgICAgICAgc3Rha2VLZXlEZWxlZ2F0aW9uOiB0aGlzLmxvYWRTdGFrZUtleURlbGVnYXRpb24oc3Rha2VLZXlEZWxlZ2F0aW9uKSxcbiAgICAgICAgICAgIHN0YWtlUG9vbFJlZ2lzdHJhdGlvbjogdGhpcy5sb2FkU3Rha2VQb29sUmVnaXN0cmF0aW9uKHN0YWtlUG9vbFJlZ2lzdHJhdGlvbiEpLFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoY2VydHMuc29tZSgoYykgPT4gYy5hc19zdGFrZV9yZWdpc3RyYXRpb24oKSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIHRoaXMuX3R5cGUgPSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0FjdGl2YXRlO1xuICAgICAgICB9IGVsc2UgaWYgKGNlcnRzLnNvbWUoKGMpID0+IGMuYXNfc3Rha2VfZGVyZWdpc3RyYXRpb24oKSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIHRoaXMuX3R5cGUgPSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0RlYWN0aXZhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl90cmFuc2FjdGlvbi5ib2R5KCkud2l0aGRyYXdhbHMoKSkge1xuICAgICAgICB0aGlzLl90eXBlID0gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdXaXRoZHJhdztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZmVlID0gdHhuLmJvZHkoKS5mZWUoKS50b19zdHIoKTtcbiAgICAgIHRoaXMubG9hZElucHV0c0FuZE91dHB1dHMoKTtcblxuICAgICAgaWYgKHRoaXMuX3RyYW5zYWN0aW9uLndpdG5lc3Nfc2V0KCkudmtleXMoKSkge1xuICAgICAgICBjb25zdCB2a2V5cyA9IHRoaXMuX3RyYW5zYWN0aW9uLndpdG5lc3Nfc2V0KCkudmtleXMoKSEgYXMgQ2FyZGFub1dhc20uVmtleXdpdG5lc3NlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2a2V5cy5sZW4oKTsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdmtleSA9IHZrZXlzLmdldChpKTtcbiAgICAgICAgICB0aGlzLl9zaWduYXR1cmVzLnB1c2godmtleS5zaWduYXR1cmUoKS50b19oZXgoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFRyYW5zYWN0aW9uRXJyb3IoJ3VuYWJsZSB0byBidWlsZCB0cmFuc2FjdGlvbiBmcm9tIHJhdycpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbG9hZFN0YWtlS2V5UmVnaXN0cmF0aW9uKFxuICAgIGNlcnRpZmljYXRlOiBDYXJkYW5vV2FzbS5DZXJ0aWZpY2F0ZSB8IHVuZGVmaW5lZFxuICApOiBTdGFrZUtleVJlZ2lzdHJhdGlvbkNlcnQgfCB1bmRlZmluZWQge1xuICAgIGlmIChjZXJ0aWZpY2F0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBzdGFrZVJlZ2lzdHJhdGlvbiA9IGNlcnRpZmljYXRlLmFzX3N0YWtlX3JlZ2lzdHJhdGlvbigpO1xuICAgIGlmIChzdGFrZVJlZ2lzdHJhdGlvbiAhPT0gdW5kZWZpbmVkICYmIHN0YWtlUmVnaXN0cmF0aW9uIS5zdGFrZV9jcmVkZW50aWFsKCkudG9fa2V5aGFzaCgpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IENlcnRUeXBlLlN0YWtlS2V5UmVnaXN0cmF0aW9uLFxuICAgICAgICBzdGFrZUNyZWRlbnRpYWxIYXNoOiBzdGFrZVJlZ2lzdHJhdGlvbiEuc3Rha2VfY3JlZGVudGlhbCgpLnRvX2tleWhhc2goKSEudG9faGV4KCksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbG9hZFN0YWtlS2V5RGVsZWdhdGlvbihjZXJ0aWZpY2F0ZTogQ2FyZGFub1dhc20uQ2VydGlmaWNhdGUgfCB1bmRlZmluZWQpOiBTdGFrZUtleURlbGVnYXRpb25DZXJ0IHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoY2VydGlmaWNhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3Qgc3Rha2VEZWxlZ2F0aW9uID0gY2VydGlmaWNhdGUuYXNfc3Rha2VfZGVsZWdhdGlvbigpO1xuICAgIGlmIChzdGFrZURlbGVnYXRpb24gIT09IHVuZGVmaW5lZCAmJiBzdGFrZURlbGVnYXRpb24hLnN0YWtlX2NyZWRlbnRpYWwoKS50b19rZXloYXNoKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogQ2VydFR5cGUuU3Rha2VLZXlEZWxlZ2F0aW9uLFxuICAgICAgICBzdGFrZUNyZWRlbnRpYWxIYXNoOiBzdGFrZURlbGVnYXRpb24hLnN0YWtlX2NyZWRlbnRpYWwoKS50b19rZXloYXNoKCkhLnRvX2hleCgpLFxuICAgICAgICBwb29sS2V5SGFzaDogc3Rha2VEZWxlZ2F0aW9uIS5wb29sX2tleWhhc2goKS50b19oZXgoKSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBsb2FkU3Rha2VQb29sUmVnaXN0cmF0aW9uKGNlcnRpZmljYXRlOiBDYXJkYW5vV2FzbS5DZXJ0aWZpY2F0ZSk6IFN0YWtlUG9vbFJlZ2lzdHJhdGlvbkNlcnQge1xuICAgIGNvbnN0IHBvb2xSZWdpc3RyYXRpb24gPSBjZXJ0aWZpY2F0ZS5hc19wb29sX3JlZ2lzdHJhdGlvbigpO1xuICAgIGNvbnN0IHJld2FyZEFjY291bnQgPSBwb29sUmVnaXN0cmF0aW9uIS5wb29sX3BhcmFtcygpLnJld2FyZF9hY2NvdW50KCk7XG4gICAgY29uc3QgbmV0d29ya0lkID0gcmV3YXJkQWNjb3VudC50b19hZGRyZXNzKCkubmV0d29ya19pZCgpO1xuICAgIGNvbnN0IG93bmVyczogc3RyaW5nW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvb2xSZWdpc3RyYXRpb24hLnBvb2xfcGFyYW1zKCkucG9vbF9vd25lcnMoKS5sZW4oKTsgaSsrKSB7XG4gICAgICBjb25zdCBwb29sT3duZXIgPSBwb29sUmVnaXN0cmF0aW9uIS5wb29sX3BhcmFtcygpLnBvb2xfb3duZXJzKCkuZ2V0KGkpO1xuICAgICAgY29uc3Qgb3duZXJTdGFrZUtleSA9IENhcmRhbm9XYXNtLlN0YWtlQ3JlZGVudGlhbC5mcm9tX2tleWhhc2gocG9vbE93bmVyKTtcbiAgICAgIG93bmVycy5wdXNoKENhcmRhbm9XYXNtLlJld2FyZEFkZHJlc3MubmV3KG5ldHdvcmtJZCwgb3duZXJTdGFrZUtleSkudG9fYWRkcmVzcygpLnRvX2JlY2gzMigpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IENlcnRUeXBlLlN0YWtlUG9vbFJlZ2lzdHJhdGlvbixcbiAgICAgIHBvb2xLZXlIYXNoOiBwb29sUmVnaXN0cmF0aW9uIS5wb29sX3BhcmFtcygpLm9wZXJhdG9yKCkudG9faGV4KCksXG4gICAgICB2cmZLZXlIYXNoOiBwb29sUmVnaXN0cmF0aW9uIS5wb29sX3BhcmFtcygpLnZyZl9rZXloYXNoKCkudG9faGV4KCksXG4gICAgICBwbGVkZ2U6IHBvb2xSZWdpc3RyYXRpb24hLnBvb2xfcGFyYW1zKCkucGxlZGdlKCkudG9fc3RyKCksXG4gICAgICBjb3N0OiBwb29sUmVnaXN0cmF0aW9uIS5wb29sX3BhcmFtcygpLmNvc3QoKS50b19zdHIoKSxcbiAgICAgIG1hcmdpbk51bWVyYXRvcjogcG9vbFJlZ2lzdHJhdGlvbiEucG9vbF9wYXJhbXMoKS5tYXJnaW4oKS5udW1lcmF0b3IoKS50b19zdHIoKSxcbiAgICAgIG1hcmdpbkRlbm9taW5hdG9yOiBwb29sUmVnaXN0cmF0aW9uIS5wb29sX3BhcmFtcygpLm1hcmdpbigpLmRlbm9taW5hdG9yKCkudG9fc3RyKCksXG4gICAgICByZXdhcmRBY2NvdW50OiByZXdhcmRBY2NvdW50LnRvX2FkZHJlc3MoKS50b19iZWNoMzIoKSxcbiAgICAgIHBvb2xPd25lcnM6IG93bmVycyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdHJhbnNhY3Rpb24gdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvblR5cGV9IHRyYW5zYWN0aW9uVHlwZSBUaGUgdHJhbnNhY3Rpb24gdHlwZSB0byBiZSBzZXQuXG4gICAqL1xuICBzZXRUcmFuc2FjdGlvblR5cGUodHJhbnNhY3Rpb25UeXBlOiBUcmFuc2FjdGlvblR5cGUpOiB2b2lkIHtcbiAgICB0aGlzLl90eXBlID0gdHJhbnNhY3Rpb25UeXBlO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIGV4cGxhaW5UcmFuc2FjdGlvbigpOiB7XG4gICAgb3V0cHV0czogeyBhbW91bnQ6IHN0cmluZzsgYWRkcmVzczogc3RyaW5nIH1bXTtcbiAgICBjZXJ0aWZpY2F0ZXM6IENlcnRbXTtcbiAgICBjaGFuZ2VPdXRwdXRzOiBzdHJpbmdbXTtcbiAgICBvdXRwdXRBbW91bnQ6IHN0cmluZztcbiAgICBmZWU6IHsgZmVlOiBzdHJpbmcgfTtcbiAgICBkaXNwbGF5T3JkZXI6IHN0cmluZ1tdO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgY2hhbmdlQW1vdW50OiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHdpdGhkcmF3YWxzOiBXaXRoZHJhd2FsW107XG4gICAgcGxlZGdlRGV0YWlscz86IFBsZWRnZURldGFpbHM7XG4gIH0ge1xuICAgIGNvbnN0IHR4SnNvbiA9IHRoaXMudG9Kc29uKCk7XG4gICAgY29uc3QgZGlzcGxheU9yZGVyID0gWydpZCcsICdvdXRwdXRBbW91bnQnLCAnY2hhbmdlQW1vdW50JywgJ291dHB1dHMnLCAnY2hhbmdlT3V0cHV0cycsICdmZWUnLCAndHlwZSddO1xuICAgIGNvbnN0IGFtb3VudCA9IHR4SnNvbi5vdXRwdXRzLm1hcCgobykgPT4gKHsgYW1vdW50OiBCaWdJbnQoby5hbW91bnQpIH0pKTtcbiAgICBjb25zdCBvdXRwdXRBbW91bnQgPSBhbW91bnQucmVkdWNlKChwLCBuKSA9PiBwICsgQmlnSW50KG4uYW1vdW50KSwgQmlnSW50KCcwJykpLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgdHlwZSA9XG4gICAgICB0aGlzLl90eXBlID09PSBUcmFuc2FjdGlvblR5cGUuU2VuZFxuICAgICAgICA/ICdUcmFuc2ZlcidcbiAgICAgICAgOiB0aGlzLl90eXBlID09PSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0FjdGl2YXRlXG4gICAgICAgID8gJ1N0YWtpbmdBY3RpdmF0ZSdcbiAgICAgICAgOiB0aGlzLl90eXBlID09PSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ1dpdGhkcmF3XG4gICAgICAgID8gJ1N0YWtpbmdXaXRoZHJhdydcbiAgICAgICAgOiB0aGlzLl90eXBlID09PSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0RlYWN0aXZhdGVcbiAgICAgICAgPyAnU3Rha2luZ0RlYWN0aXZhdGUnXG4gICAgICAgIDogdGhpcy5fdHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdQbGVkZ2VcbiAgICAgICAgPyAnU3Rha2luZ1BsZWRnZSdcbiAgICAgICAgOiAndW5kZWZpbmVkJztcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGxheU9yZGVyLFxuICAgICAgaWQ6IHR4SnNvbi5pZCxcbiAgICAgIG91dHB1dHM6IHR4SnNvbi5vdXRwdXRzLm1hcCgobykgPT4gKHsgYWRkcmVzczogby5hZGRyZXNzLCBhbW91bnQ6IG8uYW1vdW50IH0pKSxcbiAgICAgIG91dHB1dEFtb3VudDogb3V0cHV0QW1vdW50LFxuICAgICAgY2hhbmdlT3V0cHV0czogW10sXG4gICAgICBjaGFuZ2VBbW91bnQ6ICcwJyxcbiAgICAgIGZlZTogeyBmZWU6IHRoaXMuX2ZlZSB9LFxuICAgICAgdHlwZSxcbiAgICAgIGNlcnRpZmljYXRlczogdHhKc29uLmNlcnRzLFxuICAgICAgd2l0aGRyYXdhbHM6IHR4SnNvbi53aXRoZHJhd2FscyxcbiAgICAgIHBsZWRnZURldGFpbHM6IHRoaXMuX3BsZWRnZURldGFpbHMsXG4gICAgfTtcbiAgfVxuXG4gIGdldFBsZWRnZURldGFpbHMoKTogUGxlZGdlRGV0YWlscyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX3BsZWRnZURldGFpbHM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRyYW5zYWN0aW9uIGZlZVxuICAgKi9cbiAgZ2V0IGdldEZlZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9mZWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRyYW5zYWN0aW9uIGZlZVxuICAgKlxuICAgKiBAcGFyYW0gZmVlXG4gICAqL1xuICBmZWUoZmVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9mZWUgPSBmZWU7XG4gIH1cbn1cbiJdfQ==