"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bch = void 0;
const abstract_utxo_1 = require("@bitgo/abstract-utxo");
const utxolib = __importStar(require("@bitgo/utxo-lib"));
class Bch extends abstract_utxo_1.AbstractUtxoCoin {
    constructor(bitgo, network) {
        super(bitgo, network || utxolib.networks.bitcoincash);
    }
    static createInstance(bitgo) {
        return new Bch(bitgo);
    }
    getChain() {
        return 'bch';
    }
    getFamily() {
        return 'bch';
    }
    getFullName() {
        return 'Bitcoin Cash';
    }
    supportsBlockTarget() {
        return false;
    }
    /**
     * Canonicalize a Bitcoin Cash address for a specific version
     *
     * Starting on January 14th, 2018 Bitcoin Cash's bitcoin-abc node switched over to using cashaddr
     * encoding for all of their addresses in order to distinguish them from Bitcoin Core's.
     * https://www.bitcoinabc.org/cashaddr. We're sticking with the old base58 format because
     * migrating over to the new format will be laborious, and we want to see how the space evolves
     *
     * @param address may or may not be prefixed with the network, example bitcoincash:pppkt7q2axpsm2cajyjtu6x8fsh6ywauzgxmsru962 or pppkt7q2axpsm2cajyjtu6x8fsh6ywauzgxmsru962
     * @param version the version of the desired address, 'base58' or 'cashaddr', defaulting to 'base58'
     * @returns {*} address string
     */
    canonicalAddress(address, version = 'base58') {
        if (version === 'base58') {
            return utxolib.addressFormat.toCanonicalFormat(address, this.network);
        }
        if (version === 'cashaddr') {
            const script = utxolib.addressFormat.toOutputScriptTryFormats(address, this.network);
            return utxolib.addressFormat.fromOutputScriptWithFormat(script, version, this.network);
        }
        throw new Error(`invalid version ${version}`);
    }
}
exports.Bch = Bch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0RBQXFFO0FBRXJFLHlEQUEyQztBQUUzQyxNQUFhLEdBQUksU0FBUSxnQ0FBZ0I7SUFDdkMsWUFBc0IsS0FBZ0IsRUFBRSxPQUFxQjtRQUMzRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQWdCO1FBQ3BDLE9BQU8sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSCxnQkFBZ0IsQ0FBQyxPQUFlLEVBQUUsVUFBbUIsUUFBUTtRQUMzRCxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDeEIsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdkU7UUFFRCxJQUFJLE9BQU8sS0FBSyxVQUFVLEVBQUU7WUFDMUIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JGLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4RjtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNGO0FBakRELGtCQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0VXR4b0NvaW4sIFV0eG9OZXR3b3JrIH0gZnJvbSAnQGJpdGdvL2Fic3RyYWN0LXV0eG8nO1xuaW1wb3J0IHsgQml0R29CYXNlLCBCYXNlQ29pbiB9IGZyb20gJ0BiaXRnby9zZGstY29yZSc7XG5pbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5cbmV4cG9ydCBjbGFzcyBCY2ggZXh0ZW5kcyBBYnN0cmFjdFV0eG9Db2luIHtcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHb0Jhc2UsIG5ldHdvcms/OiBVdHhvTmV0d29yaykge1xuICAgIHN1cGVyKGJpdGdvLCBuZXR3b3JrIHx8IHV0eG9saWIubmV0d29ya3MuYml0Y29pbmNhc2gpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUluc3RhbmNlKGJpdGdvOiBCaXRHb0Jhc2UpOiBCYXNlQ29pbiB7XG4gICAgcmV0dXJuIG5ldyBCY2goYml0Z28pO1xuICB9XG5cbiAgZ2V0Q2hhaW4oKSB7XG4gICAgcmV0dXJuICdiY2gnO1xuICB9XG5cbiAgZ2V0RmFtaWx5KCkge1xuICAgIHJldHVybiAnYmNoJztcbiAgfVxuXG4gIGdldEZ1bGxOYW1lKCkge1xuICAgIHJldHVybiAnQml0Y29pbiBDYXNoJztcbiAgfVxuXG4gIHN1cHBvcnRzQmxvY2tUYXJnZXQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbm9uaWNhbGl6ZSBhIEJpdGNvaW4gQ2FzaCBhZGRyZXNzIGZvciBhIHNwZWNpZmljIHZlcnNpb25cbiAgICpcbiAgICogU3RhcnRpbmcgb24gSmFudWFyeSAxNHRoLCAyMDE4IEJpdGNvaW4gQ2FzaCdzIGJpdGNvaW4tYWJjIG5vZGUgc3dpdGNoZWQgb3ZlciB0byB1c2luZyBjYXNoYWRkclxuICAgKiBlbmNvZGluZyBmb3IgYWxsIG9mIHRoZWlyIGFkZHJlc3NlcyBpbiBvcmRlciB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gQml0Y29pbiBDb3JlJ3MuXG4gICAqIGh0dHBzOi8vd3d3LmJpdGNvaW5hYmMub3JnL2Nhc2hhZGRyLiBXZSdyZSBzdGlja2luZyB3aXRoIHRoZSBvbGQgYmFzZTU4IGZvcm1hdCBiZWNhdXNlXG4gICAqIG1pZ3JhdGluZyBvdmVyIHRvIHRoZSBuZXcgZm9ybWF0IHdpbGwgYmUgbGFib3Jpb3VzLCBhbmQgd2Ugd2FudCB0byBzZWUgaG93IHRoZSBzcGFjZSBldm9sdmVzXG4gICAqXG4gICAqIEBwYXJhbSBhZGRyZXNzIG1heSBvciBtYXkgbm90IGJlIHByZWZpeGVkIHdpdGggdGhlIG5ldHdvcmssIGV4YW1wbGUgYml0Y29pbmNhc2g6cHBwa3Q3cTJheHBzbTJjYWp5anR1Nng4ZnNoNnl3YXV6Z3htc3J1OTYyIG9yIHBwcGt0N3EyYXhwc20yY2FqeWp0dTZ4OGZzaDZ5d2F1emd4bXNydTk2MlxuICAgKiBAcGFyYW0gdmVyc2lvbiB0aGUgdmVyc2lvbiBvZiB0aGUgZGVzaXJlZCBhZGRyZXNzLCAnYmFzZTU4JyBvciAnY2FzaGFkZHInLCBkZWZhdWx0aW5nIHRvICdiYXNlNTgnXG4gICAqIEByZXR1cm5zIHsqfSBhZGRyZXNzIHN0cmluZ1xuICAgKi9cbiAgY2Fub25pY2FsQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcsIHZlcnNpb246IHVua25vd24gPSAnYmFzZTU4Jyk6IHN0cmluZyB7XG4gICAgaWYgKHZlcnNpb24gPT09ICdiYXNlNTgnKSB7XG4gICAgICByZXR1cm4gdXR4b2xpYi5hZGRyZXNzRm9ybWF0LnRvQ2Fub25pY2FsRm9ybWF0KGFkZHJlc3MsIHRoaXMubmV0d29yayk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gPT09ICdjYXNoYWRkcicpIHtcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHV0eG9saWIuYWRkcmVzc0Zvcm1hdC50b091dHB1dFNjcmlwdFRyeUZvcm1hdHMoYWRkcmVzcywgdGhpcy5uZXR3b3JrKTtcbiAgICAgIHJldHVybiB1dHhvbGliLmFkZHJlc3NGb3JtYXQuZnJvbU91dHB1dFNjcmlwdFdpdGhGb3JtYXQoc2NyaXB0LCB2ZXJzaW9uLCB0aGlzLm5ldHdvcmspO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCB2ZXJzaW9uICR7dmVyc2lvbn1gKTtcbiAgfVxufVxuIl19