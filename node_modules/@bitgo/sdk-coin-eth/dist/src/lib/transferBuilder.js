"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
const ethUtil = __importStar(require("ethereumjs-util"));
const ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
const bn_js_1 = __importDefault(require("bn.js"));
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
/** ETH transfer builder */
class TransferBuilder {
    constructor(serializedData) {
        this._EMPTY_HEX_VALUE = '0x';
        if (serializedData) {
            this.decodeTransferData(serializedData);
        }
        else {
            // initialize with default values for non mandatory fields
            this._expirationTime = this.getExpirationTime();
            this._data = this._EMPTY_HEX_VALUE;
            this._signature = this._EMPTY_HEX_VALUE;
        }
    }
    /**
     * A method to set the ERC20 token to be transferred.
     * This ERC20 token may not be compatible with the network.
     *
     * @param {string} coin the ERC20 coin to be set
     * @returns {TransferBuilder} the transfer builder instance modified
     */
    coin(coin) {
        this._coin = statics_1.coins.get(coin);
        if (this._coin instanceof statics_1.ContractAddressDefinedToken) {
            this._tokenContractAddress = this._coin.contractAddress.toString();
        }
        return this;
    }
    data(additionalData) {
        this._signature = this._EMPTY_HEX_VALUE;
        this._data = additionalData;
        return this;
    }
    amount(amount) {
        if (!utils_1.isValidAmount(amount)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid amount');
        }
        this._signature = this._EMPTY_HEX_VALUE;
        this._amount = amount;
        return this;
    }
    to(address) {
        if (utils_1.isValidEthAddress(address)) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._toAddress = address;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid address');
    }
    contractSequenceId(counter) {
        if (counter >= 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._sequenceId = counter;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid contract sequence id');
    }
    key(signKey) {
        this._signKey = signKey;
        return this;
    }
    expirationTime(date) {
        if (date > 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._expirationTime = date;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid expiration time');
    }
    signAndBuild() {
        if (this.hasMandatoryFields()) {
            if (this._tokenContractAddress !== undefined) {
                return utils_1.sendMultiSigTokenData(this._toAddress, this._amount, this._tokenContractAddress, this._expirationTime, this._sequenceId, this.getSignature());
            }
            else {
                return utils_1.sendMultiSigData(this._toAddress, this._amount, this._data, this._expirationTime, this._sequenceId, this.getSignature());
            }
        }
        throw new sdk_core_1.BuildTransactionError('Missing transfer mandatory fields. Amount, destination (to) address and sequenceID are mandatory');
    }
    hasMandatoryFields() {
        return this._amount !== undefined && this._toAddress !== undefined && this._sequenceId !== undefined;
    }
    /**
     * Obtains the proper operation hash to sign either a sendMultiSig data
     * or a sendMultiSigToken data
     *
     * @returns {string} the operation hash
     */
    getOperationHash() {
        const operationData = this.getOperationData();
        return ethUtil.bufferToHex(ethereumjs_abi_1.default.soliditySHA3(...operationData));
    }
    getOperationData() {
        let operationData;
        if (this._tokenContractAddress !== undefined) {
            operationData = [
                ['string', 'address', 'uint', 'address', 'uint', 'uint'],
                [
                    this.getTokenOperationHashPrefix(),
                    new bn_js_1.default(ethUtil.stripHexPrefix(this._toAddress), 16),
                    this._amount,
                    new bn_js_1.default(ethUtil.stripHexPrefix(this._tokenContractAddress), 16),
                    this._expirationTime,
                    this._sequenceId,
                ],
            ];
        }
        else {
            operationData = [
                ['string', 'address', 'uint', 'bytes', 'uint', 'uint'],
                [
                    this.getNativeOperationHashPrefix(),
                    new bn_js_1.default(ethUtil.stripHexPrefix(this._toAddress), 16),
                    this._amount,
                    Buffer.from(ethUtil.padToEven(ethUtil.stripHexPrefix(this._data)) || '', 'hex'),
                    this._expirationTime,
                    this._sequenceId,
                ],
            ];
        }
        return operationData;
    }
    /**
     * Get the prefix used in generating an operation hash for sending tokens
     *
     * @returns the string prefix
     */
    getTokenOperationHashPrefix() {
        return 'ERC20';
    }
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     *
     * @returns the string prefix
     */
    getNativeOperationHashPrefix() {
        return 'ETHER';
    }
    /** Return an expiration time, in seconds, set to one hour from now
     *
     * @returns {number} expiration time
     */
    getExpirationTime() {
        const currentDate = new Date();
        currentDate.setHours(currentDate.getHours() + 1);
        return currentDate.getTime() / 1000;
    }
    /**
     * If a signing key is set for this builder, recalculates the signature
     *
     * @returns {string} the signature value
     */
    getSignature() {
        if (this._signKey) {
            this._signature = this.ethSignMsgHash();
        }
        return this._signature;
    }
    ethSignMsgHash() {
        const data = this.getOperationHash();
        const keyBuffer = Buffer.from(ethUtil.padToEven(this._signKey), 'hex');
        if (keyBuffer.length != 32) {
            throw new Error('private key length is invalid');
        }
        const signatureInParts = ethUtil.ecsign(Buffer.from(ethUtil.padToEven(ethUtil.stripHexPrefix(data)), 'hex'), keyBuffer);
        // Assemble strings from r, s and v
        const r = ethUtil.setLengthLeft(signatureInParts.r, 32).toString('hex');
        const s = ethUtil.setLengthLeft(signatureInParts.s, 32).toString('hex');
        const v = ethUtil.stripHexPrefix(ethUtil.intToHex(signatureInParts.v));
        // Concatenate the r, s and v parts to make the signature string
        return ethUtil.addHexPrefix(r.concat(s, v));
    }
    decodeTransferData(data) {
        const transferData = utils_1.decodeTransferData(data);
        this._toAddress = transferData.to;
        this._amount = transferData.amount;
        this._expirationTime = transferData.expireTime;
        this._sequenceId = transferData.sequenceId;
        this._signature = transferData.signature;
        if (transferData.data) {
            this._data = transferData.data;
        }
        if (transferData.tokenContractAddress) {
            this._tokenContractAddress = transferData.tokenContractAddress;
        }
    }
}
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,