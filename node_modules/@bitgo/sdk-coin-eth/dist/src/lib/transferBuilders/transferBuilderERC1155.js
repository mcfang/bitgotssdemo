"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC1155TransferBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const contractCall_1 = require("../contractCall");
const utils_1 = require("../utils");
const walletUtil_1 = require("../walletUtil");
const baseNFTTransferBuilder_1 = require("./baseNFTTransferBuilder");
const utils_2 = require("ethers/lib/utils");
class ERC1155TransferBuilder extends baseNFTTransferBuilder_1.BaseNFTTransferBuilder {
    constructor(serializedData) {
        super(serializedData);
        this.bytes(0);
        if (serializedData) {
            this.decodeTransferData(serializedData);
        }
        else {
            this._tokenIds = [];
            this._values = [];
        }
    }
    tokenContractAddress(address) {
        if (utils_1.isValidEthAddress(address)) {
            this._tokenContractAddress = address;
            return this;
        }
        throw new sdk_core_1.InvalidParameterValueError('Invalid address');
    }
    entry(tokenId, value) {
        this._tokenIds.push(tokenId.toString());
        this._values.push(value.toString());
        return this;
    }
    bytes(bytesInNumber) {
        this._bytes = utils_2.hexZeroPad(utils_2.hexlify(bytesInNumber), 32);
        return this;
    }
    signAndBuild() {
        const hasMandatoryFields = this.hasMandatoryFields();
        if (hasMandatoryFields) {
            if (this._tokenIds.length === 1) {
                const values = [this._fromAddress, this._toAddress, this._tokenIds[0], this._values[0], this._bytes];
                const contractCall = new contractCall_1.ContractCall(walletUtil_1.ERC1155SafeTransferTypeMethodId, walletUtil_1.ERC1155SafeTransferTypes, values);
                this._data = contractCall.serialize();
            }
            else {
                const values = [this._fromAddress, this._toAddress, this._tokenIds, this._values, this._bytes];
                const contractCall = new contractCall_1.ContractCall(walletUtil_1.ERC1155BatchTransferTypeMethodId, walletUtil_1.ERC1155BatchTransferTypes, values);
                this._data = contractCall.serialize();
            }
            return utils_1.sendMultiSigData(this._tokenContractAddress, '0', // dummy amount value
            this._data, this._expirationTime, this._sequenceId, this.getSignature());
        }
        throw new sdk_core_1.BuildTransactionError(`Missing transfer mandatory fields. 
       Destination (to) address, source (from) address, sequenceID, the token contract address, tokenIDs and their values are mandatory`);
    }
    hasMandatoryFields() {
        return (this._tokenIds !== undefined &&
            this._tokenIds.length !== 0 &&
            this._values.length !== 0 &&
            this._tokenIds.length === this._values.length &&
            this._toAddress !== undefined &&
            this._fromAddress !== undefined &&
            this._tokenContractAddress !== undefined &&
            this._sequenceId !== undefined);
    }
    decodeTransferData(data) {
        const transferData = utils_1.decodeERC1155TransferData(data);
        this._toAddress = transferData.to;
        this._fromAddress = transferData.from;
        this._expirationTime = transferData.expireTime;
        this._sequenceId = transferData.sequenceId;
        this._signature = transferData.signature;
        this._tokenContractAddress = transferData.tokenContractAddress;
        this._tokenIds = transferData.tokenIds;
        this._values = transferData.values;
        if (transferData.data) {
            this._data = transferData.data;
        }
    }
}
exports.ERC1155TransferBuilder = ERC1155TransferBuilder;
//# sourceMappingURL=data:application/json;base64,