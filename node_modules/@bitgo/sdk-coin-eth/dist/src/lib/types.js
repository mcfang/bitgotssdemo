"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthTransactionData = void 0;
const assert_1 = __importDefault(require("assert"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const tx_1 = require("@ethereumjs/tx");
const ethereumjs_util_1 = require("ethereumjs-util");
const iface_1 = require("./iface");
// https://github.com/ethereumjs/ethereumjs-monorepo/blob/master/packages/tx/src/transactionFactory.ts#L31
const LEGACY_TX_TYPE = 0;
const EIP1559_TX_TYPE = 2;
/**
 * An Ethereum transaction with helpers for serialization and deserialization.
 */
class EthTransactionData {
    constructor(tx, args) {
        this.tx = tx;
        this.args = args;
    }
    /**
     * Build an thereum transaction from its JSON representation
     *
     * @param {TxData} tx The JSON representation of the transaction
     * @param {EthereumCommon} common Class to access chain and hardfork parameters
     * @returns {EthTransactionData} a new ethereum transaction object
     */
    static fromJson(tx, common) {
        const nonce = ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.nonce).toString(16));
        const value = ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.value).toString(16));
        const gasLimit = ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasLimit).toString(16));
        const chainId = tx.chainId ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.chainId).toString(16)) : undefined;
        const gasPrice = isLegacyTx(tx) ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasPrice).toString(16)) : undefined;
        const maxFeePerGas = isEIP1559Txn(tx) ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.maxFeePerGas).toString(16)) : undefined;
        const maxPriorityFeePerGas = isEIP1559Txn(tx)
            ? ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.maxPriorityFeePerGas).toString(16))
            : undefined;
        return new EthTransactionData(tx_1.TransactionFactory.fromTxData({
            type: isLegacyTx(tx) ? LEGACY_TX_TYPE : EIP1559_TX_TYPE,
            chainId,
            nonce,
            to: tx.to,
            gasPrice,
            gasLimit,
            maxFeePerGas,
            maxPriorityFeePerGas,
            value,
            data: tx.data,
            v: tx.v,
            r: tx.r,
            s: tx.s,
        }, { common: common }), {
            deployedAddress: tx.deployedAddress,
            chainId: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(Number(tx.chainId)).toString(16)),
        });
    }
    /**
     * Build an ethereum transaction from its string serialization
     *
     * @param tx The string serialization of the ethereum transaction
     * @param common
     */
    static fromSerialized(tx, common) {
        return new EthTransactionData(tx_1.TransactionFactory.fromSerializedData(ethereumjs_util_1.toBuffer(ethereumjs_util_1.addHexPrefix(tx)), { common: common }));
    }
    sign(keyPair) {
        const privateKey = Buffer.from(keyPair.getKeys().prv, 'hex');
        this.tx = this.tx.sign(privateKey);
    }
    /** @inheritdoc */
    toJson() {
        const result = {
            nonce: ethereumjs_util_1.bufferToInt(ethereumjs_util_1.toUnsigned(this.tx.nonce)),
            gasLimit: new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(ethereumjs_util_1.toUnsigned(this.tx.gasLimit)), 16).toString(10),
            value: this.tx.value.toString(10),
            data: ethereumjs_util_1.bufferToHex(this.tx.data),
        };
        if (this.tx.isSigned()) {
            result.id = ethereumjs_util_1.addHexPrefix(ethereumjs_util_1.bufferToHex(this.tx.hash()));
        }
        else {
            result.id = ethereumjs_util_1.addHexPrefix(ethereumjs_util_1.bufferToHex(this.tx.getMessageToSign()));
        }
        if (this.tx.to) {
            result.to = ethereumjs_util_1.bufferToHex(this.tx.to.toBuffer());
        }
        if (this.tx.verifySignature()) {
            result.from = ethereumjs_util_1.bufferToHex(this.tx.getSenderAddress().toBuffer());
            assert_1.default(this.tx.r != undefined);
            result.r = ethereumjs_util_1.bufferToHex(ethereumjs_util_1.toUnsigned(this.tx.r));
            assert_1.default(this.tx.s != undefined);
            result.s = ethereumjs_util_1.bufferToHex(ethereumjs_util_1.toUnsigned(this.tx.s));
        }
        if (this.tx.v) {
            result.v = ethereumjs_util_1.bufferToHex(ethereumjs_util_1.toUnsigned(this.tx.v));
        }
        result.chainId = ethereumjs_util_1.addHexPrefix(this.tx.common.chainIdBN().toString(16));
        if (this.args && this.args.deployedAddress) {
            result.deployedAddress = this.args.deployedAddress;
        }
        if (this.tx instanceof tx_1.Transaction) {
            const gasPrice = new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(ethereumjs_util_1.toUnsigned(this.tx.gasPrice)), 16).toString(10);
            return {
                ...result,
                _type: iface_1.ETHTransactionType.LEGACY,
                gasPrice,
            };
        }
        else if (this.tx instanceof tx_1.FeeMarketEIP1559Transaction) {
            const maxFeePerGas = new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(ethereumjs_util_1.toUnsigned(this.tx.maxFeePerGas)), 16).toString(10);
            const maxPriorityFeePerGas = new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(ethereumjs_util_1.toUnsigned(this.tx.maxPriorityFeePerGas)), 16).toString(10);
            return {
                ...result,
                _type: iface_1.ETHTransactionType.EIP1559,
                maxFeePerGas,
                maxPriorityFeePerGas,
            };
        }
        else {
            throw new Error(`Unsupported tx type: ${tx_1.AccessListEIP2930Transaction.name}`);
        }
    }
    /** @inheritdoc */
    toSerialized() {
        return ethereumjs_util_1.addHexPrefix(this.tx.serialize().toString('hex'));
    }
}
exports.EthTransactionData = EthTransactionData;
function isLegacyTx(tx) {
    return tx._type === iface_1.ETHTransactionType.LEGACY;
}
function isEIP1559Txn(tx) {
    return tx._type === iface_1.ETHTransactionType.EIP1559;
}
//# sourceMappingURL=data:application/json;base64,