"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const types_1 = require("./types");
const utils_1 = require("./utils");
const UNSUPPORTED_COIN_NAME = 'unsupported';
class Transaction extends sdk_core_1.BaseTransaction {
    /**
     * Public constructor.
     *
     * @param {Readonly<CoinConfig>} coinConfig
     * @param common the network commons
     * @param {TxData} txData The object transaction data or encoded transaction data
     */
    constructor(coinConfig, common, txData) {
        super(coinConfig);
        this._common = common;
        if (txData) {
            this.setTransactionData(txData);
        }
    }
    /**
     * return a new Transaction initialized with the serialized tx string
     *
     * @param coinConfig The coin configuration object
     * @param common network commons
     * @param serializedTx The serialized tx string with which to initialize the transaction
     * @returns a new transaction object
     */
    static fromSerialized(coinConfig, common, serializedTx) {
        return new Transaction(coinConfig, common, types_1.EthTransactionData.fromSerialized(serializedTx, common).toJson());
    }
    /**
     * Set the transaction data
     *
     * @param {TxData} txData The transaction data to set
     */
    setTransactionData(txData) {
        this._transactionData = types_1.EthTransactionData.fromJson(txData, this._common);
        this.updateFields();
    }
    /**
     * Update the internal fields based on the currently set transaction data, if there is any
     */
    updateFields() {
        if (!this._transactionData) {
            return;
        }
        const txData = this._transactionData.toJson();
        if (txData.id) {
            this._id = txData.id;
        }
        this._type = utils_1.classifyTransaction(txData.data);
        // reset arrays to empty to ensure that they are only set with one set of fresh values
        this._inputs = [];
        this._outputs = [];
        this._signatures = [];
        if (utils_1.hasSignature(txData)) {
            this._signatures.push(utils_1.toStringSig({ v: txData.v, r: txData.r, s: txData.s }));
        }
        // only send transactions have inputs / outputs / signatures to parse
        if (this._type === sdk_core_1.TransactionType.Send ||
            this._type === sdk_core_1.TransactionType.SendERC721 ||
            this._type === sdk_core_1.TransactionType.SendERC1155) {
            const { to, amount, tokenContractAddress, signature } = utils_1.decodeTransferData(txData.data);
            let coinName;
            if (tokenContractAddress) {
                const token = utils_1.getToken(tokenContractAddress, this._coinConfig.network);
                coinName = token ? token.name : UNSUPPORTED_COIN_NAME;
            }
            else {
                coinName = this._coinConfig.name;
            }
            this.outputs.push({
                address: to,
                value: amount,
                coin: coinName,
            });
            this.inputs.push({
                address: txData.to,
                value: amount,
                coin: coinName,
            });
            this._signatures.push(signature);
        }
    }
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /** @inheritdoc */
    canSign(key) {
        // TODO: implement this validation for the ethereum network
        return true;
    }
    /**
     * Sign the transaction with the provided key. It does not check if the signer is allowed to sign
     * it or not.
     *
     * @param {KeyPair} keyPair The key to sign the transaction with
     */
    async sign(keyPair) {
        if (!this._transactionData) {
            throw new sdk_core_1.InvalidTransactionError('No transaction data to sign');
        }
        if (!keyPair.getKeys().prv) {
            throw new sdk_core_1.SigningError('Missing private key');
        }
        await this._transactionData.sign(keyPair);
        const txData = this._transactionData.toJson();
        if (txData.id) {
            this._id = txData.id;
        }
        this._signatures.push(utils_1.toStringSig({ v: txData.v, r: txData.r, s: txData.s }));
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (this._transactionData) {
            return this._transactionData.toSerialized();
        }
        throw new sdk_core_1.InvalidTransactionError('No transaction data to format');
    }
    /** @inheritdoc */
    toJson() {
        if (this._transactionData) {
            return this._transactionData.toJson();
        }
        throw new sdk_core_1.InvalidTransactionError('Empty transaction');
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,