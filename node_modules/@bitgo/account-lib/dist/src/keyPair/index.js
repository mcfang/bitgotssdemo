"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const coinModules = __importStar(require(".."));
const sdk_core_1 = require("@bitgo/sdk-core");
const statics_1 = require("@bitgo/statics");
function register(coinName, source) {
    const sanitizedCoinName = statics_1.coins.get(coinName.trim().toLowerCase()).family;
    const key = Object.keys(coinModules)
        .filter((k) => coinModules[k].KeyPair)
        // TODO(BG-40990): eth2 BLS keypair init error
        .find((k) => k.trim().toLowerCase() !== 'eth2' && k.trim().toLowerCase() === sanitizedCoinName);
    if (key) {
        return new coinModules[key].KeyPair(source);
    }
    throw new sdk_core_1.NotSupported(`Coin ${coinName} not supported`);
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMva2V5UGFpci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0RBQWtDO0FBQ2xDLDhDQUE0RTtBQUM1RSw0Q0FBdUM7QUFFdkMsU0FBZ0IsUUFBUSxDQUFDLFFBQWdCLEVBQUUsTUFBdUI7SUFDaEUsTUFBTSxpQkFBaUIsR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMxRSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNqQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDdEMsOENBQThDO1NBQzdDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEtBQUssaUJBQWlCLENBQUMsQ0FBQztJQUNsRyxJQUFJLEdBQUcsRUFBRTtRQUNQLE9BQU8sSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzdDO0lBQ0QsTUFBTSxJQUFJLHVCQUFZLENBQUMsUUFBUSxRQUFRLGdCQUFnQixDQUFDLENBQUM7QUFDM0QsQ0FBQztBQVZELDRCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29pbk1vZHVsZXMgZnJvbSAnLi4nO1xuaW1wb3J0IHsgQmFzZUtleVBhaXIsIEtleVBhaXJPcHRpb25zLCBOb3RTdXBwb3J0ZWQgfSBmcm9tICdAYml0Z28vc2RrLWNvcmUnO1xuaW1wb3J0IHsgY29pbnMgfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlcihjb2luTmFtZTogc3RyaW5nLCBzb3VyY2U/OiBLZXlQYWlyT3B0aW9ucyk6IEJhc2VLZXlQYWlyIHtcbiAgY29uc3Qgc2FuaXRpemVkQ29pbk5hbWUgPSBjb2lucy5nZXQoY29pbk5hbWUudHJpbSgpLnRvTG93ZXJDYXNlKCkpLmZhbWlseTtcbiAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMoY29pbk1vZHVsZXMpXG4gICAgLmZpbHRlcigoaykgPT4gY29pbk1vZHVsZXNba10uS2V5UGFpcilcbiAgICAvLyBUT0RPKEJHLTQwOTkwKTogZXRoMiBCTFMga2V5cGFpciBpbml0IGVycm9yXG4gICAgLmZpbmQoKGspID0+IGsudHJpbSgpLnRvTG93ZXJDYXNlKCkgIT09ICdldGgyJyAmJiBrLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBzYW5pdGl6ZWRDb2luTmFtZSk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gbmV3IGNvaW5Nb2R1bGVzW2tleV0uS2V5UGFpcihzb3VyY2UpO1xuICB9XG4gIHRocm93IG5ldyBOb3RTdXBwb3J0ZWQoYENvaW4gJHtjb2luTmFtZX0gbm90IHN1cHBvcnRlZGApO1xufVxuIl19