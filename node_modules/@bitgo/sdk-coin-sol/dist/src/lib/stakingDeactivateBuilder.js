"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingDeactivateBuilder = void 0;
const assert_1 = __importDefault(require("assert"));
const sdk_core_1 = require("@bitgo/sdk-core");
const constants_1 = require("./constants");
const transactionBuilder_1 = require("./transactionBuilder");
const utils_1 = require("./utils");
class StakingDeactivateBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.StakingDeactivate;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const stakingAddresses = [];
        for (const instruction of this._instructionsData) {
            if (instruction.type === constants_1.InstructionBuilderTypes.StakingDeactivate) {
                const deactivateInstruction = instruction;
                this.sender(deactivateInstruction.params.fromAddress);
                stakingAddresses.push(deactivateInstruction.params.stakingAddress);
                if (deactivateInstruction.params.amount && deactivateInstruction.params.unstakingAddress) {
                    this.amount(deactivateInstruction.params.amount);
                    this.unstakingAddress(deactivateInstruction.params.unstakingAddress);
                }
            }
        }
        if (stakingAddresses.length > 1) {
            this.stakingAddresses(stakingAddresses);
        }
        else {
            this.stakingAddress(stakingAddresses[0]);
        }
    }
    /**
     * The staking address of the staking account.
     *
     * @param {string} stakingAddress public address of the staking account
     * @returns {StakingDeactivateBuilder} This staking deactivate builder.
     *
     * @see https://docs.solana.com/staking/stake-accounts#account-address
     */
    stakingAddress(stakingAddress) {
        utils_1.validateAddress(stakingAddress, 'stakingAddress');
        this._stakingAddress = stakingAddress;
        return this;
    }
    /**
     * The staking addresses of the staking account.
     *
     * @param {string[]} stakingAddresses public address of the staking accounts
     * @returns {StakingDeactivateBuilder} This staking deactivate builder.
     *
     * @see https://docs.solana.com/staking/stake-accounts#account-address
     */
    stakingAddresses(stakingAddresses) {
        for (const stakingAddress of stakingAddresses) {
            utils_1.validateAddress(stakingAddress, 'stakingAddress');
        }
        this._stakingAddresses = stakingAddresses;
        return this;
    }
    /**
     * Optional amount to unstake expressed in Lamports, 1 SOL = 1_000_000_000 lamports, to be used
     * when partially unstaking. If not given then the entire staked amount will be unstaked.
     *
     * @param {string} amount The partial amount to unstake, expressed in Lamports.
     * @returns {StakingDeactivateBuilder} This staking builder.
     *
     * @see https://docs.solana.com/cli/delegate-stake#split-stake
     */
    amount(amount) {
        if (!utils_1.isValidStakingAmount(amount)) {
            throw new sdk_core_1.BuildTransactionError('If given, amount cannot be zero or less');
        }
        this._amount = amount;
        return this;
    }
    /**
     * When partially unstaking move the amount to unstake to this account and initiate the
     * unstake process. The original stake account will continue staking.
     *
     * @param {string} unstakingAddress An account used to unstake a partial amount.
     * @returns {StakingDeactivateBuilder} This staking builder.
     *
     * @see https://docs.solana.com/cli/delegate-stake#split-stake
     */
    unstakingAddress(unstakingAddress) {
        utils_1.validateAddress(unstakingAddress, 'unstakingAddress');
        this._unstakingAddress = unstakingAddress;
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        assert_1.default(this._sender, 'Sender must be set before building the transaction');
        if (this._stakingAddresses && this._stakingAddresses.length > 0) {
            this._instructionsData = [];
            for (const stakingAddress of this._stakingAddresses) {
                const stakingDeactivateData = {
                    type: constants_1.InstructionBuilderTypes.StakingDeactivate,
                    params: {
                        fromAddress: this._sender,
                        stakingAddress: stakingAddress,
                    },
                };
                this._instructionsData.push(stakingDeactivateData);
            }
        }
        else {
            assert_1.default(this._stakingAddress, 'Staking address must be set before building the transaction');
            if (this._sender === this._stakingAddress) {
                throw new sdk_core_1.BuildTransactionError('Sender address cannot be the same as the Staking address');
            }
            if (this._amount) {
                assert_1.default(this._unstakingAddress, 'When partially unstaking the unstaking address must be set before building the transaction');
            }
            if (this._unstakingAddress) {
                assert_1.default(this._amount, 'If an unstaking address is given then a partial amount to unstake must also be set before building the transaction');
            }
            const stakingDeactivateData = {
                type: constants_1.InstructionBuilderTypes.StakingDeactivate,
                params: {
                    fromAddress: this._sender,
                    stakingAddress: this._stakingAddress,
                    amount: this._amount,
                    unstakingAddress: this._unstakingAddress,
                },
            };
            this._instructionsData = [stakingDeactivateData];
        }
        return await super.buildImplementation();
    }
}
exports.StakingDeactivateBuilder = StakingDeactivateBuilder;
//# sourceMappingURL=data:application/json;base64,