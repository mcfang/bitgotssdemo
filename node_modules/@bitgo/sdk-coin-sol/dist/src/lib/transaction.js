"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const sdk_core_1 = require("@bitgo/sdk-core");
const web3_js_1 = require("@solana/web3.js");
const bs58_1 = __importDefault(require("bs58"));
const utils_1 = require("./utils");
const instructionParamsFactory_1 = require("./instructionParamsFactory");
const constants_1 = require("./constants");
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    get solTransaction() {
        return this._solTransaction;
    }
    set solTransaction(tx) {
        this._solTransaction = tx;
    }
    get numberOfRequiredSignatures() {
        return this._solTransaction.compileMessage().header.numRequiredSignatures;
    }
    get numberOfATACreationInstructions() {
        return this._solTransaction.instructions.filter((instruction) => utils_1.getInstructionType(instruction) === constants_1.ValidInstructionTypesEnum.InitializeAssociatedTokenAccount).length;
    }
    /** @inheritDoc */
    get signablePayload() {
        return this._solTransaction.serializeMessage();
    }
    /** @inheritDoc **/
    get id() {
        // Solana transaction ID === first signature: https://docs.solana.com/terminology#transaction-id
        if (this._solTransaction.signature) {
            return bs58_1.default.encode(this._solTransaction.signature);
        }
        else {
            return constants_1.UNAVAILABLE_TEXT;
        }
    }
    get lamportsPerSignature() {
        return this._lamportsPerSignature;
    }
    set lamportsPerSignature(lamportsPerSignature) {
        this._lamportsPerSignature = lamportsPerSignature;
    }
    get tokenAccountRentExemptAmount() {
        return this._tokenAccountRentExemptAmount;
    }
    set tokenAccountRentExemptAmount(tokenAccountRentExemptAmount) {
        this._tokenAccountRentExemptAmount = tokenAccountRentExemptAmount;
    }
    /** @inheritDoc */
    get signature() {
        const signatures = [];
        for (const solSignature of this._solTransaction.signatures) {
            if (solSignature.signature) {
                signatures.push(bs58_1.default.encode(solSignature.signature));
            }
        }
        return signatures;
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /** @inheritdoc */
    canSign() {
        return true;
    }
    /**
     * Signs transaction.
     *
     * @param {KeyPair} keyPair Signer keys.
     */
    async sign(keyPair) {
        if (!this._solTransaction || !this._solTransaction.recentBlockhash) {
            throw new sdk_core_1.SigningError('Nonce is required before signing');
        }
        if (!this._solTransaction || !this._solTransaction.feePayer) {
            throw new sdk_core_1.SigningError('feePayer is required before signing');
        }
        const keyPairs = keyPair instanceof Array ? keyPair : [keyPair];
        const signers = [];
        for (const kp of keyPairs) {
            const keys = kp.getKeys(true);
            if (!keys.prv) {
                throw new sdk_core_1.SigningError('Missing private key');
            }
            signers.push({ publicKey: new web3_js_1.PublicKey(keys.pub), secretKey: keys.prv });
        }
        try {
            this._solTransaction.partialSign(...signers);
        }
        catch (e) {
            throw e;
        }
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._solTransaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        // The signatures can have null signatures (which means they are required but yet unsigned)
        // In order to be able to serializer the txs, we have to change the requireAllSignatures based
        // on if the TX is fully signed or not
        const requireAllSignatures = utils_1.requiresAllSignatures(this._solTransaction.signatures);
        try {
            // Based on the recomendation encoding found here https://docs.solana.com/developing/clients/jsonrpc-api#sendtransaction
            // We use base64 encoding
            return this._solTransaction.serialize({ requireAllSignatures }).toString('base64');
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * Sets this transaction payload
     *
     * @param rawTransaction
     */
    fromRawTransaction(rawTransaction) {
        try {
            utils_1.isValidRawTransaction(rawTransaction);
            this._solTransaction = web3_js_1.Transaction.from(Buffer.from(rawTransaction, 'base64'));
            if (this._solTransaction.signature && this._solTransaction.signature !== null) {
                this._id = bs58_1.default.encode(this._solTransaction.signature);
            }
            const transactionType = utils_1.getTransactionType(this._solTransaction);
            switch (transactionType) {
                case sdk_core_1.TransactionType.WalletInitialization:
                    this.setTransactionType(sdk_core_1.TransactionType.WalletInitialization);
                    break;
                case sdk_core_1.TransactionType.Send:
                    this.setTransactionType(sdk_core_1.TransactionType.Send);
                    break;
                case sdk_core_1.TransactionType.StakingActivate:
                    this.setTransactionType(sdk_core_1.TransactionType.StakingActivate);
                    break;
                case sdk_core_1.TransactionType.StakingDeactivate:
                    this.setTransactionType(sdk_core_1.TransactionType.StakingDeactivate);
                    break;
                case sdk_core_1.TransactionType.StakingWithdraw:
                    this.setTransactionType(sdk_core_1.TransactionType.StakingWithdraw);
                    break;
                case sdk_core_1.TransactionType.AssociatedTokenAccountInitialization:
                    this.setTransactionType(sdk_core_1.TransactionType.AssociatedTokenAccountInitialization);
                    break;
                case sdk_core_1.TransactionType.StakingAuthorize:
                    this.setTransactionType(sdk_core_1.TransactionType.StakingAuthorize);
                    break;
                case sdk_core_1.TransactionType.StakingAuthorizeRaw:
                    this.setTransactionType(sdk_core_1.TransactionType.StakingAuthorizeRaw);
                    break;
                case sdk_core_1.TransactionType.StakingDelegate:
                    this.setTransactionType(sdk_core_1.TransactionType.StakingDelegate);
                    break;
            }
            if (transactionType !== sdk_core_1.TransactionType.StakingAuthorizeRaw) {
                this.loadInputsAndOutputs();
            }
        }
        catch (e) {
            throw e;
        }
    }
    /** @inheritdoc */
    toJson() {
        var _a;
        if (!this._solTransaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        let durableNonce;
        if (this._solTransaction.nonceInfo) {
            const nonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(this._solTransaction.nonceInfo.nonceInstruction);
            durableNonce = {
                walletNonceAddress: nonceInstruction.noncePubkey.toString(),
                authWalletAddress: nonceInstruction.authorizedPubkey.toString(),
            };
        }
        const instructionData = instructionParamsFactory_1.instructionParamsFactory(this._type, this._solTransaction.instructions);
        if (this._type) {
            if (!durableNonce &&
                instructionData.length > 1 &&
                instructionData[0].type === constants_1.InstructionBuilderTypes.NonceAdvance) {
                durableNonce = instructionData[0].params;
            }
        }
        const result = {
            id: this._solTransaction.signature ? this.id : undefined,
            feePayer: (_a = this._solTransaction.feePayer) === null || _a === void 0 ? void 0 : _a.toString(),
            lamportsPerSignature: this.lamportsPerSignature,
            nonce: this.getNonce(),
            durableNonce: durableNonce,
            numSignatures: this.signature.length,
            instructionsData: instructionData,
        };
        return result;
    }
    /**
     * Get the nonce from the Solana Transaction
     * Throws if not set
     */
    getNonce() {
        if (this._solTransaction.recentBlockhash) {
            return this._solTransaction.recentBlockhash;
        }
        else if (this._solTransaction.nonceInfo) {
            return this._solTransaction.nonceInfo.nonce;
        }
        else {
            throw new sdk_core_1.InvalidTransactionError('Nonce is not set');
        }
    }
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs() {
        var _a;
        if (!this._solTransaction || ((_a = this._solTransaction.instructions) === null || _a === void 0 ? void 0 : _a.length) === 0) {
            return;
        }
        const outputs = [];
        const inputs = [];
        const instructionParams = instructionParamsFactory_1.instructionParamsFactory(this.type, this._solTransaction.instructions);
        for (const instruction of instructionParams) {
            switch (instruction.type) {
                case constants_1.InstructionBuilderTypes.CreateNonceAccount:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.Transfer:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: instruction.params.toAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.TokenTransfer:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: instruction.params.tokenName,
                    });
                    outputs.push({
                        address: instruction.params.toAddress,
                        value: instruction.params.amount,
                        coin: instruction.params.tokenName,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.StakingActivate:
                    inputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: instruction.params.stakingAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.StakingDeactivate:
                    if (instruction.params.amount && instruction.params.unstakingAddress) {
                        inputs.push({
                            address: instruction.params.stakingAddress,
                            value: instruction.params.amount,
                            coin: this._coinConfig.name,
                        });
                        outputs.push({
                            address: instruction.params.unstakingAddress,
                            value: instruction.params.amount,
                            coin: this._coinConfig.name,
                        });
                    }
                    break;
                case constants_1.InstructionBuilderTypes.StakingWithdraw:
                    inputs.push({
                        address: instruction.params.stakingAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: instruction.params.fromAddress,
                        value: instruction.params.amount,
                        coin: this._coinConfig.name,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount:
                    break;
                case constants_1.InstructionBuilderTypes.StakingAuthorize:
                    break;
                case constants_1.InstructionBuilderTypes.StakingDelegate:
                    break;
            }
        }
        this._outputs = outputs;
        this._inputs = inputs;
    }
    /** @inheritDoc */
    explainTransaction() {
        if (utils_1.validateRawMsgInstruction(this._solTransaction.instructions)) {
            return this.explainRawMsgAuthorizeTransaction();
        }
        const decodedInstructions = instructionParamsFactory_1.instructionParamsFactory(this._type, this._solTransaction.instructions);
        let memo = undefined;
        let durableNonce = undefined;
        let outputAmount = new bignumber_js_1.default(0);
        const outputs = [];
        for (const instruction of decodedInstructions) {
            switch (instruction.type) {
                case constants_1.InstructionBuilderTypes.NonceAdvance:
                    durableNonce = instruction.params;
                    break;
                case constants_1.InstructionBuilderTypes.Memo:
                    memo = instruction.params.memo;
                    break;
                case constants_1.InstructionBuilderTypes.Transfer:
                    const transferInstruction = instruction;
                    outputs.push({
                        address: transferInstruction.params.toAddress,
                        amount: transferInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(transferInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.TokenTransfer:
                    const tokenTransferInstruction = instruction;
                    outputs.push({
                        address: tokenTransferInstruction.params.toAddress,
                        amount: tokenTransferInstruction.params.amount,
                        tokenName: tokenTransferInstruction.params.tokenName,
                    });
                    break;
                case constants_1.InstructionBuilderTypes.CreateNonceAccount:
                    const createInstruction = instruction;
                    outputs.push({
                        address: createInstruction.params.nonceAddress,
                        amount: createInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(createInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.StakingActivate:
                    const stakingActivateInstruction = instruction;
                    outputs.push({
                        address: stakingActivateInstruction.params.stakingAddress,
                        amount: stakingActivateInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(stakingActivateInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.StakingWithdraw:
                    const stakingWithdrawInstruction = instruction;
                    outputs.push({
                        address: stakingWithdrawInstruction.params.fromAddress,
                        amount: stakingWithdrawInstruction.params.amount,
                    });
                    outputAmount = outputAmount.plus(stakingWithdrawInstruction.params.amount);
                    break;
                case constants_1.InstructionBuilderTypes.CreateAssociatedTokenAccount:
                    break;
                default:
                    continue;
            }
            // After deserializing a transaction, durable nonce details are populated in the nonceInfo field
            if (!durableNonce && this._solTransaction.nonceInfo) {
                const nonceAdvanceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(this._solTransaction.nonceInfo.nonceInstruction);
                durableNonce = {
                    authWalletAddress: nonceAdvanceInstruction.authorizedPubkey.toString(),
                    walletNonceAddress: nonceAdvanceInstruction.noncePubkey.toString(),
                };
            }
        }
        return this.getExplainedTransaction(outputAmount, outputs, memo, durableNonce);
    }
    calculateFee() {
        if (this.lamportsPerSignature || this.tokenAccountRentExemptAmount) {
            const signatureFees = this.lamportsPerSignature
                ? new bignumber_js_1.default(this.lamportsPerSignature).multipliedBy(this.numberOfRequiredSignatures).toFixed(0)
                : 0;
            const rentFees = this.tokenAccountRentExemptAmount
                ? new bignumber_js_1.default(this.tokenAccountRentExemptAmount).multipliedBy(this.numberOfATACreationInstructions).toFixed(0)
                : 0;
            return new bignumber_js_1.default(signatureFees).plus(rentFees).toFixed(0);
        }
        return constants_1.UNAVAILABLE_TEXT;
    }
    getExplainedTransaction(outputAmount, outputs, memo = undefined, durableNonce = undefined) {
        const feeString = this.calculateFee();
        return {
            displayOrder: [
                'id',
                'type',
                'blockhash',
                'durableNonce',
                'outputAmount',
                'changeAmount',
                'outputs',
                'changeOutputs',
                'fee',
                'memo',
            ],
            id: this.id,
            type: sdk_core_1.TransactionType[this.type].toString(),
            changeOutputs: [],
            changeAmount: '0',
            outputAmount: outputAmount.toFixed(0),
            outputs: outputs,
            fee: {
                fee: feeString,
                feeRate: this.lamportsPerSignature,
            },
            memo: memo,
            blockhash: this.getNonce(),
            durableNonce: durableNonce,
        };
    }
    explainRawMsgAuthorizeTransaction() {
        const { instructions } = this._solTransaction;
        const nonceInstruction = web3_js_1.SystemInstruction.decodeNonceAdvance(instructions[0]);
        const durableNonce = {
            walletNonceAddress: nonceInstruction.noncePubkey.toString(),
            authWalletAddress: nonceInstruction.authorizedPubkey.toString(),
        };
        const stakingAuthorizeParams = {
            stakingAddress: instructions[1].keys[0].pubkey.toString(),
            oldWithdrawAddress: instructions[1].keys[2].pubkey.toString(),
            newWithdrawAddress: instructions[1].keys[3].pubkey.toString(),
            custodianAddress: instructions[1].keys[4].pubkey.toString(),
        };
        const feeString = this.calculateFee();
        return {
            displayOrder: [
                'id',
                'type',
                'blockhash',
                'durableNonce',
                'outputAmount',
                'changeAmount',
                'outputs',
                'changeOutputs',
                'fee',
                'memo',
            ],
            id: this.id,
            type: sdk_core_1.TransactionType[this.type].toString(),
            changeOutputs: [],
            changeAmount: '0',
            outputAmount: 0,
            outputs: [],
            fee: {
                fee: feeString,
                feeRate: this.lamportsPerSignature,
            },
            blockhash: this.getNonce(),
            durableNonce: durableNonce,
            stakingAuthorize: stakingAuthorizeParams,
        };
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,