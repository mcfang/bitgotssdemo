"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOwnerAddress = exports.validateMintAddress = exports.getAssociatedTokenAccountAddress = exports.getSolTokenFromTokenName = exports.getSolTokenFromAddress = exports.validateAddress = exports.validateRawTransaction = exports.validateRawMsgInstruction = exports.validateIntructionTypes = exports.getInstructionType = exports.getTransactionType = exports.matchTransactionTypeByInstructionsOrder = exports.requiresAllSignatures = exports.countNotNullSignatures = exports.Uint8ArrayTobase58 = exports.base58ToUint8Array = exports.verifySignature = exports.isValidRawTransaction = exports.isValidMemo = exports.isValidStakingAmount = exports.isValidAmount = exports.isValidTransactionId = exports.isValidSignature = exports.isValidPublicKey = exports.isValidPrivateKey = exports.isValidBlockId = exports.isValidAddress = void 0;
const web3_js_1 = require("@solana/web3.js");
const bs58_1 = __importDefault(require("bs58"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const constants_1 = require("./constants");
const sdk_core_1 = require("@bitgo/sdk-core");
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const spl_token_1 = require("@solana/spl-token");
const statics_1 = require("@bitgo/statics");
const assert_1 = __importDefault(require("assert"));
const DECODED_BLOCK_HASH_LENGTH = 32; // https://docs.solana.com/developing/programming-model/transactions#blockhash-format
const DECODED_SIGNATURE_LENGTH = 64; // https://docs.solana.com/terminology#signature
const BASE_58_ENCONDING_REGEX = '[1-9A-HJ-NP-Za-km-z]';
/** @inheritdoc */
function isValidAddress(address) {
    return isValidPublicKey(address);
}
exports.isValidAddress = isValidAddress;
/** @inheritdoc */
function isValidBlockId(hash) {
    try {
        return (!!hash && new RegExp(BASE_58_ENCONDING_REGEX).test(hash) && bs58_1.default.decode(hash).length === DECODED_BLOCK_HASH_LENGTH);
    }
    catch (e) {
        return false;
    }
}
exports.isValidBlockId = isValidBlockId;
/** @inheritdoc */
function isValidPrivateKey(prvKey) {
    try {
        const key = typeof prvKey === 'string' ? base58ToUint8Array(prvKey) : prvKey;
        return !!web3_js_1.Keypair.fromSecretKey(key);
    }
    catch (e) {
        return false;
    }
}
exports.isValidPrivateKey = isValidPrivateKey;
/** @inheritdoc */
function isValidPublicKey(pubKey) {
    try {
        if (sdk_core_1.isValidXpub(pubKey))
            return true;
        new web3_js_1.PublicKey(pubKey);
        return true;
    }
    catch {
        return false;
    }
}
exports.isValidPublicKey = isValidPublicKey;
/** @inheritdoc */
function isValidSignature(signature) {
    try {
        return !!signature && bs58_1.default.decode(signature).length === DECODED_SIGNATURE_LENGTH;
    }
    catch (e) {
        return false;
    }
}
exports.isValidSignature = isValidSignature;
/** @inheritdoc */
// TransactionId are the first signature on a Transaction
function isValidTransactionId(txId) {
    return isValidSignature(txId);
}
exports.isValidTransactionId = isValidTransactionId;
/**
 * Returns whether or not the string is a valid amount of lamports number
 *
 * @param {string} amount - the string to validate
 * @returns {boolean} - the validation result
 */
function isValidAmount(amount) {
    const bigNumberAmount = new bignumber_js_1.default(amount);
    return bigNumberAmount.isInteger() && bigNumberAmount.isGreaterThanOrEqualTo(0);
}
exports.isValidAmount = isValidAmount;
/**
 * Check if the string is a valid amount of lamports number on staking
 *
 * @param {string} amount - the string to validate
 * @returns {boolean} - the validation result
 */
function isValidStakingAmount(amount) {
    const bigNumberAmount = new bignumber_js_1.default(amount);
    return bigNumberAmount.isInteger() && bigNumberAmount.isGreaterThan(0);
}
exports.isValidStakingAmount = isValidStakingAmount;
/**
 * Check if this is a valid memo or not.
 *
 * @param memo - the memo string
 * @returns {boolean} - the validation result
 */
function isValidMemo(memo) {
    return Buffer.from(memo).length <= constants_1.MAX_MEMO_LENGTH;
}
exports.isValidMemo = isValidMemo;
/**
 * Checks if raw transaction can be deserialized
 *
 * @param {string} rawTransaction - transaction in base64 string format
 * @returns {boolean} - the validation result
 */
function isValidRawTransaction(rawTransaction) {
    try {
        const tx = web3_js_1.Transaction.from(Buffer.from(rawTransaction, 'base64'));
        tx.serialize({ requireAllSignatures: false, verifySignatures: false });
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.isValidRawTransaction = isValidRawTransaction;
/**
 * Verifies if signature for message is valid.
 *
 * @param {Buffer} serializedTx - tx as a base64 string
 * @param {string} signature - signature as a string
 * @param {string} publicKey - public key as base 58
 * @returns {Boolean} true if signature is valid.
 */
function verifySignature(serializedTx, signature, publicKey) {
    if (!isValidRawTransaction(serializedTx)) {
        throw new sdk_core_1.UtilsError('Invalid serializedTx');
    }
    if (!isValidPublicKey(publicKey)) {
        throw new sdk_core_1.UtilsError('Invalid publicKey');
    }
    if (!isValidSignature(signature)) {
        throw new sdk_core_1.UtilsError('Invalid signature');
    }
    const msg = web3_js_1.Transaction.from(Buffer.from(serializedTx, 'base64')).serializeMessage();
    const sig = base58ToUint8Array(signature);
    const pub = new web3_js_1.PublicKey(publicKey);
    return tweetnacl_1.default.sign.detached.verify(msg, sig, pub.toBuffer());
}
exports.verifySignature = verifySignature;
/**
 * Converts a base58 string into a Uint8Array.
 *
 * @param {string} input - a string in base58
 * @returns {Uint8Array} - an Uint8Array
 */
function base58ToUint8Array(input) {
    return new Uint8Array(bs58_1.default.decode(input));
}
exports.base58ToUint8Array = base58ToUint8Array;
/**
 * Converts a Uint8Array to a base58 string.
 *
 * @param {Uint8Array} input - an Uint8Array
 * @returns {string} - a string in base58
 */
function Uint8ArrayTobase58(input) {
    return bs58_1.default.encode(input);
}
exports.Uint8ArrayTobase58 = Uint8ArrayTobase58;
/**
 * Count the amount of signatures are not null.
 *
 * @param {SignaturePubkeyPair[]} signatures - an array of SignaturePubkeyPair
 * @returns {number} - the amount of valid signatures
 */
function countNotNullSignatures(signatures) {
    return signatures.filter((sig) => !!sig.signature).length;
}
exports.countNotNullSignatures = countNotNullSignatures;
/**
 * Check if all signatures are completed.
 *
 * @param {SignaturePubkeyPair[]} signatures - signatures
 * @returns {boolean}
 */
function requiresAllSignatures(signatures) {
    return signatures.length > 0 && countNotNullSignatures(signatures) === signatures.length;
}
exports.requiresAllSignatures = requiresAllSignatures;
/**
 * Check the transaction type matching instructions by order. Memo and AdvanceNonceAccount instructions
 * are ignored.
 *
 * @param {TransactionInstruction[]} instructions - the array of supported Solana instructions to be parsed
 * @param {Record<string, number>} instructionIndexes - the instructions indexes of the current transaction
 * @returns true if it matches by order.
 */
function matchTransactionTypeByInstructionsOrder(instructions, instructionIndexes) {
    const instructionsCopy = [...instructions]; // Make a copy since we may modify the array below
    // AdvanceNonceAccount is optional and the first instruction added, it does not matter to match the type
    if (instructionsCopy.length > 0) {
        if (getInstructionType(instructions[0]) === 'AdvanceNonceAccount') {
            instructionsCopy.shift();
        }
    }
    // Memo is optional and the last instruction added, it does not matter to match the type
    // Why have it in instructionKeys if we are going to ignore it?
    const instructionsKeys = Object.keys(instructionIndexes);
    if (instructionsKeys[instructionsKeys.length - 1] === 'Memo') {
        instructionsKeys.pop();
    }
    // Check instructions by order using the index.
    for (const keyName of instructionsKeys) {
        const result = getInstructionType(instructionsCopy[instructionIndexes[keyName]]);
        if (result !== keyName) {
            return false;
        }
    }
    return true;
}
exports.matchTransactionTypeByInstructionsOrder = matchTransactionTypeByInstructionsOrder;
/**
 * Returns the transaction Type based on the  transaction instructions.
 * Wallet initialization, Transfer and Staking transactions are supported.
 *
 * @param {SolTransaction} transaction - the solana transaction
 * @returns {TransactionType} - the type of transaction
 */
function getTransactionType(transaction) {
    const { instructions } = transaction;
    if (validateRawMsgInstruction(instructions)) {
        return sdk_core_1.TransactionType.StakingAuthorizeRaw;
    }
    validateIntructionTypes(instructions);
    for (const instruction of instructions) {
        const instructionType = getInstructionType(instruction);
        if (instructionType === constants_1.ValidInstructionTypesEnum.Transfer ||
            instructionType === constants_1.ValidInstructionTypesEnum.TokenTransfer) {
            return sdk_core_1.TransactionType.Send;
        }
    }
    if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.walletInitInstructionIndexes)) {
        return sdk_core_1.TransactionType.WalletInitialization;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingActivateInstructionsIndexes)) {
        return sdk_core_1.TransactionType.StakingActivate;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingAuthorizeInstructionsIndexes)) {
        return sdk_core_1.TransactionType.StakingAuthorize;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingDelegateInstructionsIndexes)) {
        return sdk_core_1.TransactionType.StakingDelegate;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingDeactivateInstructionsIndexes) ||
        matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingPartialDeactivateInstructionsIndexes)) {
        return sdk_core_1.TransactionType.StakingDeactivate;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.stakingWithdrawInstructionsIndexes)) {
        return sdk_core_1.TransactionType.StakingWithdraw;
    }
    else if (matchTransactionTypeByInstructionsOrder(instructions, constants_1.ataInitInstructionIndexes)) {
        return sdk_core_1.TransactionType.AssociatedTokenAccountInitialization;
    }
    else {
        throw new sdk_core_1.NotSupported('Invalid transaction, transaction not supported or invalid');
    }
}
exports.getTransactionType = getTransactionType;
/**
 * Returns the instruction Type based on the solana instructions.
 * Throws if the solana instruction program is not supported
 *
 * @param {TransactionInstruction} instruction - a solana instruction
 * @returns {ValidInstructionTypes} - a solana instruction type
 */
function getInstructionType(instruction) {
    switch (instruction.programId.toString()) {
        case new web3_js_1.PublicKey(constants_1.MEMO_PROGRAM_PK).toString():
            return 'Memo';
        case web3_js_1.SystemProgram.programId.toString():
            return web3_js_1.SystemInstruction.decodeInstructionType(instruction);
        case spl_token_1.TOKEN_PROGRAM_ID.toString():
            return 'TokenTransfer';
        case web3_js_1.StakeProgram.programId.toString():
            return web3_js_1.StakeInstruction.decodeInstructionType(instruction);
        case spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID.toString():
            // TODO: change this when @spl-token supports decoding associated token instructions
            if (instruction.data.length === 0) {
                return 'InitializeAssociatedTokenAccount';
            }
            else {
                throw new sdk_core_1.NotSupported('Invalid transaction, instruction program id not supported: ' + instruction.programId.toString());
            }
        default:
            throw new sdk_core_1.NotSupported('Invalid transaction, instruction program id not supported: ' + instruction.programId.toString());
    }
}
exports.getInstructionType = getInstructionType;
/**
 * Validate solana instructions types to see if they are supported by the builder.
 * Throws if the instruction type is invalid.
 *
 * @param {TransactionInstruction} instructions - a solana instruction
 * @returns {void}
 */
function validateIntructionTypes(instructions) {
    for (const instruction of instructions) {
        if (!constants_1.VALID_SYSTEM_INSTRUCTION_TYPES.includes(getInstructionType(instruction))) {
            throw new sdk_core_1.NotSupported('Invalid transaction, instruction type not supported: ' + getInstructionType(instruction));
        }
    }
}
exports.validateIntructionTypes = validateIntructionTypes;
/**
 * Validate solana instructions match raw msg authorize transaction
 *
 * @param {TransactionInstruction} instructions - a solana instruction
 * @returns {boolean} true if the instructions match the raw msg authorize transaction
 */
function validateRawMsgInstruction(instructions) {
    // as web3.js cannot decode authorize instruction from CLI, we need to check it manually first
    if (instructions.length === 2) {
        const programId1 = instructions[0].programId.toString();
        const programId2 = instructions[1].programId.toString();
        if (programId1 === web3_js_1.SystemProgram.programId.toString() && programId2 === web3_js_1.StakeProgram.programId.toString()) {
            const instructionName1 = web3_js_1.SystemInstruction.decodeInstructionType(instructions[0]);
            const data = instructions[1].data.toString('hex');
            if (instructionName1 === constants_1.nonceAdvanceInstruction && data === constants_1.validInstructionData) {
                return true;
            }
        }
    }
    return false;
}
exports.validateRawMsgInstruction = validateRawMsgInstruction;
/**
 * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
 *
 * @param {string} rawTransaction - Transaction in base64 string  format
 */
function validateRawTransaction(rawTransaction) {
    if (!rawTransaction) {
        throw new sdk_core_1.ParseTransactionError('Invalid raw transaction: Undefined');
    }
    if (!isValidRawTransaction(rawTransaction)) {
        throw new sdk_core_1.ParseTransactionError('Invalid raw transaction');
    }
}
exports.validateRawTransaction = validateRawTransaction;
/**
 * Validates address to check if it exists and is a valid Solana public key
 *
 * @param {string} address The address to be validated
 * @param {string} fieldName Name of the field to validate, its needed to return which field is failing on case of error.
 */
function validateAddress(address, fieldName) {
    if (!address || !isValidPublicKey(address)) {
        throw new sdk_core_1.BuildTransactionError(`Invalid or missing ${fieldName}, got: ${address}`);
    }
}
exports.validateAddress = validateAddress;
/**
 * Get the statics coin object matching a given Solana token address if it exists
 *
 * @param tokenAddress The token address to match against
 * @param network Solana Mainnet or Testnet
 * @returns statics BaseCoin object for the matching token
 */
function getSolTokenFromAddress(tokenAddress, network) {
    const tokens = statics_1.coins.filter((coin) => {
        if (coin instanceof statics_1.SolCoin) {
            return coin.network.type === network.type && coin.tokenAddress.toLowerCase() === tokenAddress.toLowerCase();
        }
        return false;
    });
    const tokensArray = tokens.map((token) => token);
    if (tokensArray.length >= 1) {
        // there should never be two tokens with the same contract address, so we assert that here
        assert_1.default(tokensArray.length === 1);
        return tokensArray[0];
    }
    return undefined;
}
exports.getSolTokenFromAddress = getSolTokenFromAddress;
/**
 * Get the solana token object from token name
 * @param tokenName The token name to match against
 * */
function getSolTokenFromTokenName(tokenName) {
    try {
        const token = statics_1.coins.get(tokenName);
        if (!(token.isToken && token instanceof statics_1.SolCoin)) {
            return undefined;
        }
        return token;
    }
    catch (e) {
        if (!(e instanceof statics_1.CoinNotDefinedError)) {
            throw e;
        }
        return undefined;
    }
}
exports.getSolTokenFromTokenName = getSolTokenFromTokenName;
/**
 * Get the solana associated token account address
 * @param tokenAddress The token address
 * @param ownerAddress The owner of the associated token account
 * @returns The associated token account address
 * */
async function getAssociatedTokenAccountAddress(tokenAddress, ownerAddress) {
    const ownerPublicKey = new web3_js_1.PublicKey(ownerAddress);
    // tokenAddress are not on ed25519 curve, so they can't be used as ownerAddress
    if (!web3_js_1.PublicKey.isOnCurve(ownerPublicKey.toBuffer())) {
        throw new sdk_core_1.UtilsError('Invalid ownerAddress - address off ed25519 curve, got: ' + ownerAddress);
    }
    const ataAddress = await spl_token_1.getAssociatedTokenAddress(new web3_js_1.PublicKey(tokenAddress), ownerPublicKey);
    return ataAddress.toString();
}
exports.getAssociatedTokenAccountAddress = getAssociatedTokenAccountAddress;
function validateMintAddress(mintAddress) {
    if (!mintAddress || !isValidAddress(mintAddress)) {
        throw new sdk_core_1.BuildTransactionError('Invalid or missing mintAddress, got: ' + mintAddress);
    }
}
exports.validateMintAddress = validateMintAddress;
function validateOwnerAddress(ownerAddress) {
    if (!ownerAddress || !isValidAddress(ownerAddress)) {
        throw new sdk_core_1.BuildTransactionError('Invalid or missing ownerAddress, got: ' + ownerAddress);
    }
}
exports.validateOwnerAddress = validateOwnerAddress;
//# sourceMappingURL=data:application/json;base64,