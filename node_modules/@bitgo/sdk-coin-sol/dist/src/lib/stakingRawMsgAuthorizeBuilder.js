"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingRawMsgAuthorizeBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const web3_js_1 = require("@solana/web3.js");
const assert_1 = __importDefault(require("assert"));
const constants_1 = require("./constants");
class StakingRawMsgAuthorizeBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new transaction_1.Transaction(_coinConfig);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.StakingAuthorizeRaw;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        if (this.validateTransaction(tx)) {
            this.transactionMessage(tx.solTransaction.serializeMessage().toString('base64'));
        }
    }
    /**
     * The raw message generated by Solana CLI.
     *
     * @param {string} msg msg generated by 'solana stake-authorize-check.
     * @returns {StakeBuilder} This staking builder.
     *
     */
    transactionMessage(msg) {
        this.validateMessage(msg);
        this._transactionMessage = msg;
        return this;
    }
    /** @inheritdoc */
    async buildImplementation() {
        assert_1.default(this._transactionMessage, 'missing transaction message');
        this.validateMessage(this._transactionMessage);
        const solTransaction = web3_js_1.Transaction.populate(web3_js_1.Message.from(Buffer.from(this._transactionMessage, 'base64')), []);
        // this is workaround for solana web3.js generate wrong signing message
        const serialized = solTransaction.serialize({ requireAllSignatures: false }).toString('base64');
        this.transaction.fromRawTransaction(serialized);
        this.transaction.setTransactionType(this.transactionType);
        assert_1.default(this._transactionMessage === this.transaction.signablePayload.toString('base64'), 'wrong signing message');
        return this.transaction;
    }
    validateTransaction(tx) {
        return this.validateMessage(tx.solTransaction.serializeMessage().toString('base64'));
    }
    async build() {
        return this.buildImplementation();
    }
    validateMessage(msg) {
        const tx = web3_js_1.Transaction.populate(web3_js_1.Message.from(Buffer.from(msg, 'base64')), []);
        const instructions = tx.instructions;
        if (instructions.length !== 2) {
            throw new Error(`Invalid transaction, expected 2 instruction, got ${instructions.length}`);
        }
        for (const instruction of instructions) {
            switch (instruction.programId.toString()) {
                case web3_js_1.SystemProgram.programId.toString():
                    const instructionName = web3_js_1.SystemInstruction.decodeInstructionType(instruction);
                    if (instructionName !== constants_1.nonceAdvanceInstruction) {
                        throw new Error(`Invalid system instruction : ${instructionName}`);
                    }
                    break;
                case web3_js_1.StakeProgram.programId.toString():
                    const data = instruction.data.toString('hex');
                    if (data !== constants_1.validInstructionData) {
                        throw new Error(`Invalid staking instruction data: ${data}`);
                    }
                    break;
                default:
                    throw new Error(`Invalid transaction, instruction program id not supported: ${instruction.programId.toString()}`);
            }
        }
        return true;
    }
    fromImplementation(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    signImplementation(key) {
        throw new sdk_core_1.NotSupported('Method not supported on this builder');
    }
    get transaction() {
        return this._transaction;
    }
    validateAddress(address, addressFormat) {
        throw new sdk_core_1.NotSupported('Method not supported on this builder');
    }
    validateKey(key) {
        throw new sdk_core_1.NotSupported('Method not supported on this builder');
    }
    validateRawTransaction(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        tx.fromRawTransaction(rawTransaction);
        this.validateTransaction(tx);
    }
    validateValue(value) {
        throw new sdk_core_1.NotSupported('Method not supported on this builder');
    }
}
exports.StakingRawMsgAuthorizeBuilder = StakingRawMsgAuthorizeBuilder;
//# sourceMappingURL=data:application/json;base64,