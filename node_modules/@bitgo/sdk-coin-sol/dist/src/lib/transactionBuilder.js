"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("./utils");
const _1 = require(".");
const constants_1 = require("./constants");
const solInstructionFactory_1 = require("./solInstructionFactory");
const assert_1 = __importDefault(require("assert"));
const instructionParamsFactory_1 = require("./instructionParamsFactory");
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._signatures = [];
        this._instructionsData = [];
        this._signers = [];
        this.transaction = new transaction_1.Transaction(_coinConfig);
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        const txData = tx.toJson();
        const filteredTransferInstructionsData = txData.instructionsData.filter((data) => data.type === constants_1.InstructionBuilderTypes.Transfer);
        let sender;
        if (filteredTransferInstructionsData.length > 0) {
            const transferInstructionsData = filteredTransferInstructionsData[0];
            sender = transferInstructionsData.params.fromAddress;
        }
        else {
            sender = txData.feePayer;
        }
        this.sender(sender);
        this.feePayer(txData.feePayer);
        this.nonce(txData.nonce, txData.durableNonce);
        this._instructionsData = instructionParamsFactory_1.instructionParamsFactory(tx.type, tx.solTransaction.instructions);
        for (const instruction of this._instructionsData) {
            if (instruction.type === constants_1.InstructionBuilderTypes.Memo) {
                const memoInstruction = instruction;
                this.memo(memoInstruction.params.memo);
            }
            if (instruction.type === constants_1.InstructionBuilderTypes.NonceAdvance) {
                const advanceNonceInstruction = instruction;
                this.nonce(txData.nonce, advanceNonceInstruction.params);
            }
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.transaction.solTransaction = this.buildSolTransaction();
        this.transaction.setTransactionType(this.transactionType);
        this.transaction.loadInputsAndOutputs();
        this._transaction.tokenAccountRentExemptAmount = this._tokenAccountRentExemptAmount;
        return this.transaction;
    }
    /**
     * Builds the solana transaction.
     */
    buildSolTransaction() {
        var _a, _b, _c, _d;
        assert_1.default(this._sender, new sdk_core_1.BuildTransactionError('sender is required before building'));
        assert_1.default(this._recentBlockhash, new sdk_core_1.BuildTransactionError('recent blockhash is required before building'));
        const tx = new web3_js_1.Transaction();
        if ((_b = (_a = this._transaction) === null || _a === void 0 ? void 0 : _a.solTransaction) === null || _b === void 0 ? void 0 : _b.signatures) {
            tx.signatures = (_d = (_c = this._transaction) === null || _c === void 0 ? void 0 : _c.solTransaction) === null || _d === void 0 ? void 0 : _d.signatures;
        }
        tx.feePayer = this._feePayer ? new web3_js_1.PublicKey(this._feePayer) : new web3_js_1.PublicKey(this._sender);
        if (this._nonceInfo) {
            tx.nonceInfo = {
                nonce: this._recentBlockhash,
                nonceInstruction: solInstructionFactory_1.solInstructionFactory(this._nonceInfo)[0],
            };
        }
        else {
            tx.recentBlockhash = this._recentBlockhash;
        }
        for (const instruction of this._instructionsData) {
            tx.add(...solInstructionFactory_1.solInstructionFactory(instruction));
        }
        if (this._memo) {
            const memoData = {
                type: constants_1.InstructionBuilderTypes.Memo,
                params: {
                    memo: this._memo,
                },
            };
            this._instructionsData.push(memoData);
            tx.add(...solInstructionFactory_1.solInstructionFactory(memoData));
        }
        this._transaction.lamportsPerSignature = this._lamportsPerSignature;
        for (const signer of this._signers) {
            const publicKey = new web3_js_1.PublicKey(signer.getKeys().pub);
            const secretKey = signer.getKeys(true).prv;
            assert_1.default(secretKey instanceof Uint8Array);
            tx.partialSign({ publicKey, secretKey });
        }
        for (const signature of this._signatures) {
            const solPublicKey = new web3_js_1.PublicKey(signature.publicKey.pub);
            tx.addSignature(solPublicKey, signature.signature);
        }
        return tx;
    }
    // region Getters and Setters
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this.validateKey(key);
        this.checkDuplicatedSigner(key);
        const prv = key.key;
        const signer = new _1.KeyPair({ prv: prv });
        this._signers.push(signer);
        return this._transaction;
    }
    /** @inheritDoc */
    addSignature(publicKey, signature) {
        this._signatures.push({ publicKey, signature });
    }
    /**
     * Sets the sender of this transaction.
     * This account will be responsible for paying transaction fees.
     *
     * @param {string} senderAddress the account that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    sender(senderAddress) {
        utils_1.validateAddress(senderAddress, 'sender');
        this._sender = senderAddress;
        return this;
    }
    /**
     * Set the transaction nonce
     * Requires both optional params in order to use the durable nonce
     *
     * @param {Blockhash} blockHash The latest blockHash
     * @param {DurableNonceParams} [durableNonceParams] An object containing the walletNonceAddress and the authWalletAddress (required for durable nonce)
     * @returns {TransactionBuilder} This transaction builder
     */
    nonce(blockHash, durableNonceParams) {
        if (!blockHash || !utils_1.isValidBlockId(blockHash)) {
            throw new sdk_core_1.BuildTransactionError('Invalid or missing blockHash, got: ' + blockHash);
        }
        if (durableNonceParams) {
            utils_1.validateAddress(durableNonceParams.walletNonceAddress, 'walletNonceAddress');
            utils_1.validateAddress(durableNonceParams.authWalletAddress, 'authWalletAddress');
            if (durableNonceParams.walletNonceAddress === durableNonceParams.authWalletAddress) {
                throw new sdk_core_1.BuildTransactionError('Invalid params: walletNonceAddress cannot be equal to authWalletAddress');
            }
            this._nonceInfo = {
                type: constants_1.InstructionBuilderTypes.NonceAdvance,
                params: durableNonceParams,
            };
        }
        this._recentBlockhash = blockHash;
        return this;
    }
    /**
     *  Set the memo
     *
     * @param {string} memo
     * @returns {TransactionBuilder} This transaction builder
     */
    memo(memo) {
        this.validateMemo(memo);
        this._memo = memo;
        return this;
    }
    fee(feeOptions) {
        this._lamportsPerSignature = Number(feeOptions.amount);
        return this;
    }
    feePayer(feePayer) {
        this._feePayer = feePayer;
        return this;
    }
    /**
     * Used to set the minimum rent exempt amount for an ATA
     *
     * @param tokenAccountRentExemptAmount minimum rent exempt amount in lamports
     */
    associatedTokenAccountRent(tokenAccountRentExemptAmount) {
        this.validateRentExemptAmount(tokenAccountRentExemptAmount);
        this._tokenAccountRentExemptAmount = tokenAccountRentExemptAmount;
        return this;
    }
    validateRentExemptAmount(tokenAccountRentExemptAmount) {
        // _tokenAccountRentExemptAmount is allowed to be undefined or a valid amount if it's defined
        if (tokenAccountRentExemptAmount && !utils_1.isValidAmount(tokenAccountRentExemptAmount)) {
            throw new sdk_core_1.BuildTransactionError('Invalid tokenAccountRentExemptAmount, got: ' + tokenAccountRentExemptAmount);
        }
    }
    // endregion
    // region Validators
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        let keyPair;
        try {
            keyPair = new _1.KeyPair({ prv: key.key });
        }
        catch {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
        if (!keyPair.getKeys().prv) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        utils_1.validateRawTransaction(rawTransaction);
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        this.validateSender();
        this.validateNonce();
        this.validateRentExemptAmount(this._tokenAccountRentExemptAmount);
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    /** Validates the memo
     *
     * @param {string} memo - the memo as string
     */
    validateMemo(memo) {
        if (!memo) {
            throw new sdk_core_1.BuildTransactionError('Invalid memo, got: ' + memo);
        }
        if (!utils_1.isValidMemo(memo)) {
            throw new sdk_core_1.BuildTransactionError('Memo is too long');
        }
    }
    /**
     * Validates that the given key is not already in this._signers
     *
     * @param {BaseKey} key - The key to check
     */
    checkDuplicatedSigner(key) {
        this._signers.forEach((kp) => {
            if (kp.getKeys().prv === key.key) {
                throw new sdk_core_1.SigningError('Duplicated signer: ' + key.key);
            }
        });
    }
    /**
     * Validates that the sender field is defined
     */
    validateSender() {
        if (this._sender === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing sender');
        }
    }
    /**
     * Validates that the nonce field is defined
     */
    validateNonce() {
        if (this._recentBlockhash === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing nonce blockhash');
        }
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,