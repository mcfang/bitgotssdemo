"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidEthPublicKey = exports.isValidEthPrivateKey = exports.isValidEthAddress = exports.getCommon = exports.sign = void 0;
const statics_1 = require("@bitgo/statics");
const ethereumjs_util_1 = require("ethereumjs-util");
const sdk_coin_eth_1 = require("@bitgo/sdk-coin-eth");
const sdk_core_1 = require("@bitgo/sdk-core");
const resources_1 = require("./resources");
/**
 * Signs the transaction using the appropriate algorithm
 *
 * @param {TxData} transactionData the transaction data to sign
 * @param {KeyPair} keyPair the signer's keypair
 * @returns {string} the transaction signed and encoded
 */
async function sign(transactionData, keyPair) {
    return sdk_coin_eth_1.Utils.signInternal(transactionData, keyPair, resources_1.testnetCommon);
}
exports.sign = sign;
const commons = new Map([
    [statics_1.NetworkType.MAINNET, resources_1.mainnetCommon],
    [statics_1.NetworkType.TESTNET, resources_1.testnetCommon],
]);
/**
 * @param {NetworkType} network either mainnet or testnet
 * @returns {EthereumCommon} Ethereum common configuration object
 */
function getCommon(network) {
    const common = commons.get(network);
    if (!common) {
        throw new sdk_core_1.InvalidTransactionError('Missing network common configuration');
    }
    return common;
}
exports.getCommon = getCommon;
/**
 * Returns whether or not the string is a valid C-Chain address in Eth format
 *
 * @param {string} address - the address string
 * @returns {boolean} - the validation result
 */
function isValidEthAddress(address) {
    return ethereumjs_util_1.isValidAddress(address);
}
exports.isValidEthAddress = isValidEthAddress;
/**
 * Returns whether or not the string is a valid C-Chain private key in Eth format
 *
 * @param {string} privateKey - the string formatted key
 * @returns {boolean} - the validation result
 */
function isValidEthPrivateKey(privateKey) {
    if (privateKey.length !== 64) {
        return false;
    }
    const privateKeyBuffer = Buffer.from(privateKey, 'hex');
    if (privateKeyBuffer.length !== 32) {
        return false;
    }
    return ethereumjs_util_1.isValidPrivate(privateKeyBuffer);
}
exports.isValidEthPrivateKey = isValidEthPrivateKey;
/**
 * Returns whether or not the string is a valid C-Chain public key in Eth format
 *
 * @param {string} publicKey - the uncompressed public key string
 * @returns {boolean} - the validation result
 */
function isValidEthPublicKey(publicKey) {
    // Uncompressed Eth Public Keys have a 04 prefix that needs to be removed in order to validate it.
    const publicKeyWithoutPrefix = publicKey.slice(2);
    const publicKeyBuffer = Buffer.from(publicKeyWithoutPrefix, 'hex');
    return ethereumjs_util_1.isValidPublic(publicKeyBuffer);
}
exports.isValidEthPublicKey = isValidEthPublicKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRDQUE2QztBQUM3QyxxREFBZ0Y7QUFFaEYsc0RBQTZEO0FBQzdELDhDQUEwRDtBQUMxRCwyQ0FBMkQ7QUFFM0Q7Ozs7OztHQU1HO0FBQ0ksS0FBSyxVQUFVLElBQUksQ0FBQyxlQUF1QixFQUFFLE9BQWdCO0lBQ2xFLE9BQU8sb0JBQUssQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSx5QkFBYSxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUZELG9CQUVDO0FBRUQsTUFBTSxPQUFPLEdBQXFDLElBQUksR0FBRyxDQUE4QjtJQUNyRixDQUFDLHFCQUFXLENBQUMsT0FBTyxFQUFFLHlCQUFhLENBQUM7SUFDcEMsQ0FBQyxxQkFBVyxDQUFDLE9BQU8sRUFBRSx5QkFBYSxDQUFDO0NBQ3JDLENBQUMsQ0FBQztBQUVIOzs7R0FHRztBQUNILFNBQWdCLFNBQVMsQ0FBQyxPQUFvQjtJQUM1QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxNQUFNLElBQUksa0NBQXVCLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUMzRTtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFORCw4QkFNQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUMsT0FBZTtJQUMvQyxPQUFPLGdDQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUZELDhDQUVDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixvQkFBb0IsQ0FBQyxVQUFrQjtJQUNyRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXhELElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtRQUNsQyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxnQ0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDMUMsQ0FBQztBQVZELG9EQVVDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixtQkFBbUIsQ0FBQyxTQUFpQjtJQUNuRCxrR0FBa0c7SUFDbEcsTUFBTSxzQkFBc0IsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkUsT0FBTywrQkFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFMRCxrREFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5ldHdvcmtUeXBlIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgaXNWYWxpZEFkZHJlc3MsIGlzVmFsaWRQcml2YXRlLCBpc1ZhbGlkUHVibGljIH0gZnJvbSAnZXRoZXJldW1qcy11dGlsJztcbmltcG9ydCBFdGhlcmV1bUNvbW1vbiBmcm9tICdAZXRoZXJldW1qcy9jb21tb24nO1xuaW1wb3J0IHsgVXRpbHMsIEtleVBhaXIsIFR4RGF0YSB9IGZyb20gJ0BiaXRnby9zZGstY29pbi1ldGgnO1xuaW1wb3J0IHsgSW52YWxpZFRyYW5zYWN0aW9uRXJyb3IgfSBmcm9tICdAYml0Z28vc2RrLWNvcmUnO1xuaW1wb3J0IHsgdGVzdG5ldENvbW1vbiwgbWFpbm5ldENvbW1vbiB9IGZyb20gJy4vcmVzb3VyY2VzJztcblxuLyoqXG4gKiBTaWducyB0aGUgdHJhbnNhY3Rpb24gdXNpbmcgdGhlIGFwcHJvcHJpYXRlIGFsZ29yaXRobVxuICpcbiAqIEBwYXJhbSB7VHhEYXRhfSB0cmFuc2FjdGlvbkRhdGEgdGhlIHRyYW5zYWN0aW9uIGRhdGEgdG8gc2lnblxuICogQHBhcmFtIHtLZXlQYWlyfSBrZXlQYWlyIHRoZSBzaWduZXIncyBrZXlwYWlyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgdHJhbnNhY3Rpb24gc2lnbmVkIGFuZCBlbmNvZGVkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduKHRyYW5zYWN0aW9uRGF0YTogVHhEYXRhLCBrZXlQYWlyOiBLZXlQYWlyKTogUHJvbWlzZTxhbnk+IHtcbiAgcmV0dXJuIFV0aWxzLnNpZ25JbnRlcm5hbCh0cmFuc2FjdGlvbkRhdGEsIGtleVBhaXIsIHRlc3RuZXRDb21tb24pO1xufVxuXG5jb25zdCBjb21tb25zOiBNYXA8TmV0d29ya1R5cGUsIEV0aGVyZXVtQ29tbW9uPiA9IG5ldyBNYXA8TmV0d29ya1R5cGUsIEV0aGVyZXVtQ29tbW9uPihbXG4gIFtOZXR3b3JrVHlwZS5NQUlOTkVULCBtYWlubmV0Q29tbW9uXSxcbiAgW05ldHdvcmtUeXBlLlRFU1RORVQsIHRlc3RuZXRDb21tb25dLFxuXSk7XG5cbi8qKlxuICogQHBhcmFtIHtOZXR3b3JrVHlwZX0gbmV0d29yayBlaXRoZXIgbWFpbm5ldCBvciB0ZXN0bmV0XG4gKiBAcmV0dXJucyB7RXRoZXJldW1Db21tb259IEV0aGVyZXVtIGNvbW1vbiBjb25maWd1cmF0aW9uIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tbW9uKG5ldHdvcms6IE5ldHdvcmtUeXBlKTogRXRoZXJldW1Db21tb24ge1xuICBjb25zdCBjb21tb24gPSBjb21tb25zLmdldChuZXR3b3JrKTtcbiAgaWYgKCFjb21tb24pIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZFRyYW5zYWN0aW9uRXJyb3IoJ01pc3NpbmcgbmV0d29yayBjb21tb24gY29uZmlndXJhdGlvbicpO1xuICB9XG4gIHJldHVybiBjb21tb247XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgc3RyaW5nIGlzIGEgdmFsaWQgQy1DaGFpbiBhZGRyZXNzIGluIEV0aCBmb3JtYXRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIHRoZSBhZGRyZXNzIHN0cmluZ1xuICogQHJldHVybnMge2Jvb2xlYW59IC0gdGhlIHZhbGlkYXRpb24gcmVzdWx0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRXRoQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzVmFsaWRBZGRyZXNzKGFkZHJlc3MpO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHN0cmluZyBpcyBhIHZhbGlkIEMtQ2hhaW4gcHJpdmF0ZSBrZXkgaW4gRXRoIGZvcm1hdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcml2YXRlS2V5IC0gdGhlIHN0cmluZyBmb3JtYXR0ZWQga2V5XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSB0aGUgdmFsaWRhdGlvbiByZXN1bHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRFdGhQcml2YXRlS2V5KHByaXZhdGVLZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBpZiAocHJpdmF0ZUtleS5sZW5ndGggIT09IDY0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHByaXZhdGVLZXlCdWZmZXIgPSBCdWZmZXIuZnJvbShwcml2YXRlS2V5LCAnaGV4Jyk7XG5cbiAgaWYgKHByaXZhdGVLZXlCdWZmZXIubGVuZ3RoICE9PSAzMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNWYWxpZFByaXZhdGUocHJpdmF0ZUtleUJ1ZmZlcik7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgc3RyaW5nIGlzIGEgdmFsaWQgQy1DaGFpbiBwdWJsaWMga2V5IGluIEV0aCBmb3JtYXRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHVibGljS2V5IC0gdGhlIHVuY29tcHJlc3NlZCBwdWJsaWMga2V5IHN0cmluZ1xuICogQHJldHVybnMge2Jvb2xlYW59IC0gdGhlIHZhbGlkYXRpb24gcmVzdWx0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRXRoUHVibGljS2V5KHB1YmxpY0tleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIC8vIFVuY29tcHJlc3NlZCBFdGggUHVibGljIEtleXMgaGF2ZSBhIDA0IHByZWZpeCB0aGF0IG5lZWRzIHRvIGJlIHJlbW92ZWQgaW4gb3JkZXIgdG8gdmFsaWRhdGUgaXQuXG4gIGNvbnN0IHB1YmxpY0tleVdpdGhvdXRQcmVmaXggPSBwdWJsaWNLZXkuc2xpY2UoMik7XG4gIGNvbnN0IHB1YmxpY0tleUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHB1YmxpY0tleVdpdGhvdXRQcmVmaXgsICdoZXgnKTtcbiAgcmV0dXJuIGlzVmFsaWRQdWJsaWMocHVibGljS2V5QnVmZmVyKTtcbn1cbiJdfQ==