"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuiSystemStateSummary = exports.SuiValidatorSummary = exports.CommitteeInfo = exports.DelegationStakingPool = exports.DelegationStakingPoolFields = exports.Contents = exports.ContentsFieldsWithdraw = exports.ContentsFields = exports.SuiSupplyFields = exports.StakeSubsidy = exports.StakeSubsidyFields = exports.DelegatedStake = exports.StakeObject = exports.Balance = void 0;
const superstruct_1 = require("superstruct");
const common_1 = require("./common");
const transactions_1 = require("./transactions");
// Staking
exports.Balance = superstruct_1.object({
    value: superstruct_1.number(),
});
exports.StakeObject = superstruct_1.object({
    stakedSuiId: common_1.ObjectId,
    stakeRequestEpoch: transactions_1.EpochId,
    stakeActiveEpoch: transactions_1.EpochId,
    principal: superstruct_1.number(),
    status: superstruct_1.union([superstruct_1.literal('Active'), superstruct_1.literal('Pending'), superstruct_1.literal('Unstaked')]),
    estimatedReward: superstruct_1.optional(superstruct_1.number()),
});
exports.DelegatedStake = superstruct_1.object({
    validatorAddress: common_1.SuiAddress,
    stakingPool: common_1.ObjectId,
    stakes: superstruct_1.array(exports.StakeObject),
});
exports.StakeSubsidyFields = superstruct_1.object({
    balance: superstruct_1.object({ value: superstruct_1.number() }),
    distribution_counter: superstruct_1.number(),
    current_distribution_amount: superstruct_1.number(),
    stake_subsidy_period_length: superstruct_1.number(),
    stake_subsidy_decrease_rate: superstruct_1.number(),
});
exports.StakeSubsidy = superstruct_1.object({
    type: superstruct_1.string(),
    fields: exports.StakeSubsidyFields,
});
exports.SuiSupplyFields = superstruct_1.object({
    value: superstruct_1.number(),
});
exports.ContentsFields = superstruct_1.object({
    id: superstruct_1.string(),
    size: superstruct_1.number(),
    head: superstruct_1.object({ vec: superstruct_1.array() }),
    tail: superstruct_1.object({ vec: superstruct_1.array() }),
});
exports.ContentsFieldsWithdraw = superstruct_1.object({
    id: superstruct_1.string(),
    size: superstruct_1.number(),
});
exports.Contents = superstruct_1.object({
    type: superstruct_1.string(),
    fields: exports.ContentsFields,
});
exports.DelegationStakingPoolFields = superstruct_1.object({
    exchangeRates: superstruct_1.object({
        id: superstruct_1.string(),
        size: superstruct_1.number(),
    }),
    id: superstruct_1.string(),
    pendingStake: superstruct_1.number(),
    pendingPoolTokenWithdraw: superstruct_1.number(),
    pendingTotalSuiWithdraw: superstruct_1.number(),
    poolTokenBalance: superstruct_1.number(),
    rewardsPool: superstruct_1.object({ value: superstruct_1.number() }),
    activationEpoch: superstruct_1.object({ vec: superstruct_1.array() }),
    deactivationEpoch: superstruct_1.object({ vec: superstruct_1.array() }),
    suiBalance: superstruct_1.number(),
});
exports.DelegationStakingPool = superstruct_1.object({
    type: superstruct_1.string(),
    fields: exports.DelegationStakingPoolFields,
});
exports.CommitteeInfo = superstruct_1.object({
    epoch: superstruct_1.number(),
    /** Array of (validator public key, stake unit) tuple */
    validators: superstruct_1.optional(superstruct_1.array(superstruct_1.tuple([transactions_1.AuthorityName, superstruct_1.number()]))),
});
exports.SuiValidatorSummary = superstruct_1.object({
    suiAddress: common_1.SuiAddress,
    protocolPubkeyBytes: superstruct_1.string(),
    networkPubkeyBytes: superstruct_1.string(),
    workerPubkeyBytes: superstruct_1.string(),
    proofOfPossessionBytes: superstruct_1.string(),
    operationCapId: superstruct_1.string(),
    name: superstruct_1.string(),
    description: superstruct_1.string(),
    imageUrl: superstruct_1.string(),
    projectUrl: superstruct_1.string(),
    p2pAddress: superstruct_1.string(),
    netAddress: superstruct_1.string(),
    primaryAddress: superstruct_1.string(),
    workerAddress: superstruct_1.string(),
    nextEpochProtocolPubkeyBytes: superstruct_1.nullable(superstruct_1.string()),
    nextEpochProofOfPossession: superstruct_1.nullable(superstruct_1.string()),
    nextEpochNetworkPubkeyBytes: superstruct_1.nullable(superstruct_1.string()),
    nextEpochWorkerPubkeyBytes: superstruct_1.nullable(superstruct_1.string()),
    nextEpochNetAddress: superstruct_1.nullable(superstruct_1.string()),
    nextEpochP2pAddress: superstruct_1.nullable(superstruct_1.string()),
    nextEpochPrimaryAddress: superstruct_1.nullable(superstruct_1.string()),
    nextEpochWorkerAddress: superstruct_1.nullable(superstruct_1.string()),
    votingPower: superstruct_1.number(),
    gasPrice: superstruct_1.number(),
    commissionRate: superstruct_1.number(),
    nextEpochStake: superstruct_1.number(),
    nextEpochGasPrice: superstruct_1.number(),
    nextEpochCommissionRate: superstruct_1.number(),
    stakingPoolId: superstruct_1.string(),
    stakingPoolActivationEpoch: superstruct_1.nullable(superstruct_1.number()),
    stakingPoolDeactivationEpoch: superstruct_1.nullable(superstruct_1.number()),
    stakingPoolSuiBalance: superstruct_1.number(),
    rewardsPool: superstruct_1.number(),
    poolTokenBalance: superstruct_1.number(),
    pendingStake: superstruct_1.number(),
    pendingPoolTokenWithdraw: superstruct_1.number(),
    pendingTotalSuiWithdraw: superstruct_1.number(),
    exchangeRatesId: superstruct_1.string(),
    exchangeRatesSize: superstruct_1.number(),
});
exports.SuiSystemStateSummary = superstruct_1.object({
    epoch: superstruct_1.number(),
    protocolVersion: superstruct_1.number(),
    systemStateVersion: superstruct_1.number(),
    storageFundTotalObjectStorageRebates: superstruct_1.number(),
    storageFundNonRefundableBalance: superstruct_1.number(),
    referenceGasPrice: superstruct_1.number(),
    safeMode: superstruct_1.boolean(),
    safeModeStorageRewards: superstruct_1.number(),
    safeModeComputationRewards: superstruct_1.number(),
    safeModeStorageRebates: superstruct_1.number(),
    safeModeNonRefundableStorageFee: superstruct_1.number(),
    epochStartTimestampMs: superstruct_1.number(),
    epochDurationMs: superstruct_1.number(),
    stakeSubsidyStartEpoch: superstruct_1.number(),
    maxValidatorCount: superstruct_1.number(),
    minValidatorJoiningStake: superstruct_1.number(),
    validatorLowStakeThreshold: superstruct_1.number(),
    validatorVeryLowStakeThreshold: superstruct_1.number(),
    validatorLowStakeGracePeriod: superstruct_1.number(),
    stakeSubsidyBalance: superstruct_1.number(),
    stakeSubsidyDistributionCounter: superstruct_1.number(),
    stakeSubsidyCurrentDistributionAmount: superstruct_1.number(),
    stakeSubsidyPeriodLength: superstruct_1.number(),
    stakeSubsidyDecreaseRate: superstruct_1.number(),
    totalStake: superstruct_1.number(),
    activeValidators: superstruct_1.array(exports.SuiValidatorSummary),
    pendingActiveValidatorsId: superstruct_1.string(),
    pendingActiveValidatorsSize: superstruct_1.number(),
    pendingRemovals: superstruct_1.array(superstruct_1.number()),
    stakingPoolMappingsId: superstruct_1.string(),
    stakingPoolMappingsSize: superstruct_1.number(),
    inactivePoolsId: superstruct_1.string(),
    inactivePoolsSize: superstruct_1.number(),
    validatorCandidatesId: superstruct_1.string(),
    validatorCandidatesSize: superstruct_1.number(),
    atRiskValidators: superstruct_1.array(superstruct_1.tuple([common_1.SuiAddress, superstruct_1.number()])),
    validatorReportRecords: superstruct_1.array(superstruct_1.tuple([common_1.SuiAddress, superstruct_1.array(common_1.SuiAddress)])),
});
//# sourceMappingURL=data:application/json;base64,