"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExecutionStatusType = exports.getProgrammableTransaction = exports.getTransactionKindName = exports.getTransactionKind = exports.getConsensusCommitPrologueTransaction = exports.getChangeEpochTransaction = exports.getTransactionGasBudget = exports.getTransactionGasPrice = exports.getTransactionGasObject = exports.getGasData = exports.getTransactionSender = exports.getTransactionSignature = exports.getTransactionDigest = exports.getTransaction = exports.DryRunTransactionBlockResponse = exports.PaginatedTransactionResponse = exports.SuiTransactionBlockResponseOptions = exports.SuiTransactionBlockResponse = exports.BalanceChange = exports.SuiObjectChange = exports.SuiObjectChangeCreated = exports.SuiObjectChangeWrapped = exports.SuiObjectChangeDeleted = exports.SuiObjectChangeMutated = exports.SuiObjectChangeTransferred = exports.SuiObjectChangePublished = exports.SuiTransactionBlock = exports.AuthorityName = exports.DevInspectResults = exports.TransactionEvents = exports.TransactionEffects = exports.TransactionEffectsModifiedAtVersions = exports.OwnedObjectRef = exports.ExecutionStatus = exports.ExecutionStatusType = exports.GasCostSummary = exports.AuthorityQuorumSignInfo = exports.GenericAuthoritySignature = exports.AuthoritySignature = exports.SuiTransactionBlockData = exports.SuiTransactionBlockKind = exports.ProgrammableTransaction = exports.SuiCallArg = exports.SuiTransaction = exports.MoveCallSuiTransaction = exports.SuiArgument = exports.Genesis = exports.SuiConsensusCommitPrologue = exports.SuiChangeEpoch = exports.EpochId = void 0;
exports.getPublishedObjectChanges = exports.getObjectChanges = exports.getNewlyCreatedCoinRefsAfterSplit = exports.getTimestampFromTransactionResponse = exports.getCreatedObjects = exports.getEvents = exports.getTransactionEffects = exports.getTotalGasUsedUpperBound = exports.getTotalGasUsed = exports.getExecutionStatusGasSummary = exports.getExecutionStatusError = exports.getExecutionStatus = void 0;
const superstruct_1 = require("superstruct");
const common_1 = require("./common");
const events_1 = require("./events");
const objects_1 = require("./objects");
exports.EpochId = superstruct_1.string();
exports.SuiChangeEpoch = superstruct_1.object({
    epoch: exports.EpochId,
    storage_charge: superstruct_1.number(),
    computation_charge: superstruct_1.number(),
    storage_rebate: superstruct_1.number(),
    epoch_start_timestamp_ms: superstruct_1.optional(superstruct_1.number()),
});
exports.SuiConsensusCommitPrologue = superstruct_1.object({
    epoch: superstruct_1.number(),
    round: superstruct_1.number(),
    commit_timestamp_ms: superstruct_1.number(),
});
exports.Genesis = superstruct_1.object({
    objects: superstruct_1.array(common_1.ObjectId),
});
exports.SuiArgument = superstruct_1.union([
    superstruct_1.literal('GasCoin'),
    superstruct_1.object({ Input: superstruct_1.number() }),
    superstruct_1.object({ Result: superstruct_1.number() }),
    superstruct_1.object({ NestedResult: superstruct_1.tuple([superstruct_1.number(), superstruct_1.number()]) }),
]);
exports.MoveCallSuiTransaction = superstruct_1.object({
    arguments: superstruct_1.optional(superstruct_1.array(exports.SuiArgument)),
    type_arguments: superstruct_1.optional(superstruct_1.array(superstruct_1.string())),
    package: common_1.ObjectId,
    module: superstruct_1.string(),
    function: superstruct_1.string(),
});
exports.SuiTransaction = superstruct_1.union([
    superstruct_1.object({ MoveCall: exports.MoveCallSuiTransaction }),
    superstruct_1.object({ TransferObjects: superstruct_1.tuple([superstruct_1.array(exports.SuiArgument), exports.SuiArgument]) }),
    superstruct_1.object({ SplitCoins: superstruct_1.tuple([exports.SuiArgument, superstruct_1.array(exports.SuiArgument)]) }),
    superstruct_1.object({ MergeCoins: superstruct_1.tuple([exports.SuiArgument, superstruct_1.array(exports.SuiArgument)]) }),
    superstruct_1.object({ Publish: objects_1.SuiMovePackage }),
    superstruct_1.object({ MakeMoveVec: superstruct_1.tuple([superstruct_1.nullable(superstruct_1.string()), superstruct_1.array(exports.SuiArgument)]) }),
]);
exports.SuiCallArg = superstruct_1.union([
    superstruct_1.object({
        type: superstruct_1.literal('pure'),
        valueType: superstruct_1.optional(superstruct_1.string()),
        value: common_1.SuiJsonValue,
    }),
    superstruct_1.object({
        type: superstruct_1.literal('object'),
        objectType: superstruct_1.literal('immOrOwnedObject'),
        objectId: common_1.ObjectId,
        version: common_1.SequenceNumber,
        digest: objects_1.ObjectDigest,
    }),
    superstruct_1.object({
        type: superstruct_1.literal('object'),
        objectType: superstruct_1.literal('sharedObject'),
        objectId: common_1.ObjectId,
        initialSharedVersion: common_1.SequenceNumber,
        mutable: superstruct_1.boolean(),
    }),
]);
exports.ProgrammableTransaction = superstruct_1.object({
    transactions: superstruct_1.array(exports.SuiTransaction),
    inputs: superstruct_1.array(exports.SuiCallArg),
});
exports.SuiTransactionBlockKind = superstruct_1.union([
    superstruct_1.assign(exports.SuiChangeEpoch, superstruct_1.object({ kind: superstruct_1.literal('ChangeEpoch') })),
    superstruct_1.assign(exports.SuiConsensusCommitPrologue, superstruct_1.object({
        kind: superstruct_1.literal('ConsensusCommitPrologue'),
    })),
    superstruct_1.assign(exports.Genesis, superstruct_1.object({ kind: superstruct_1.literal('Genesis') })),
    superstruct_1.assign(exports.ProgrammableTransaction, superstruct_1.object({ kind: superstruct_1.literal('ProgrammableTransaction') })),
]);
exports.SuiTransactionBlockData = superstruct_1.object({
    // Eventually this will become union(literal('v1'), literal('v2'), ...)
    messageVersion: superstruct_1.literal('v1'),
    transaction: exports.SuiTransactionBlockKind,
    sender: common_1.SuiAddress,
    gasData: objects_1.SuiGasData,
});
exports.AuthoritySignature = superstruct_1.string();
exports.GenericAuthoritySignature = superstruct_1.union([exports.AuthoritySignature, superstruct_1.array(exports.AuthoritySignature)]);
exports.AuthorityQuorumSignInfo = superstruct_1.object({
    epoch: exports.EpochId,
    signature: exports.GenericAuthoritySignature,
    signers_map: superstruct_1.array(superstruct_1.number()),
});
exports.GasCostSummary = superstruct_1.object({
    computationCost: superstruct_1.string(),
    storageCost: superstruct_1.string(),
    storageRebate: superstruct_1.string(),
    nonRefundableStorageFee: superstruct_1.string(),
});
exports.ExecutionStatusType = superstruct_1.union([superstruct_1.literal('success'), superstruct_1.literal('failure')]);
exports.ExecutionStatus = superstruct_1.object({
    status: exports.ExecutionStatusType,
    error: superstruct_1.optional(superstruct_1.string()),
});
exports.OwnedObjectRef = superstruct_1.object({
    owner: common_1.ObjectOwner,
    reference: objects_1.SuiObjectRef,
});
exports.TransactionEffectsModifiedAtVersions = superstruct_1.object({
    objectId: common_1.ObjectId,
    sequenceNumber: common_1.SequenceNumber,
});
exports.TransactionEffects = superstruct_1.object({
    // Eventually this will become union(literal('v1'), literal('v2'), ...)
    messageVersion: superstruct_1.literal('v1'),
    /** The status of the execution */
    status: exports.ExecutionStatus,
    /** The epoch when this transaction was executed */
    executedEpoch: exports.EpochId,
    /** The version that every modified (mutated or deleted) object had before it was modified by this transaction. **/
    modifiedAtVersions: superstruct_1.optional(superstruct_1.array(exports.TransactionEffectsModifiedAtVersions)),
    gasUsed: exports.GasCostSummary,
    /** The object references of the shared objects used in this transaction. Empty if no shared objects were used. */
    sharedObjects: superstruct_1.optional(superstruct_1.array(objects_1.SuiObjectRef)),
    /** The transaction digest */
    transactionDigest: common_1.TransactionDigest,
    /** ObjectRef and owner of new objects created */
    created: superstruct_1.optional(superstruct_1.array(exports.OwnedObjectRef)),
    /** ObjectRef and owner of mutated objects, including gas object */
    mutated: superstruct_1.optional(superstruct_1.array(exports.OwnedObjectRef)),
    /**
     * ObjectRef and owner of objects that are unwrapped in this transaction.
     * Unwrapped objects are objects that were wrapped into other objects in the past,
     * and just got extracted out.
     */
    unwrapped: superstruct_1.optional(superstruct_1.array(exports.OwnedObjectRef)),
    /** Object Refs of objects now deleted (the old refs) */
    deleted: superstruct_1.optional(superstruct_1.array(objects_1.SuiObjectRef)),
    /** Object Refs of objects now deleted (the old refs) */
    unwrapped_then_deleted: superstruct_1.optional(superstruct_1.array(objects_1.SuiObjectRef)),
    /** Object refs of objects now wrapped in other objects */
    wrapped: superstruct_1.optional(superstruct_1.array(objects_1.SuiObjectRef)),
    /**
     * The updated gas object reference. Have a dedicated field for convenient access.
     * It's also included in mutated.
     */
    gasObject: exports.OwnedObjectRef,
    /** The events emitted during execution. Note that only successful transactions emit events */
    eventsDigest: superstruct_1.optional(common_1.TransactionEventDigest),
    /** The set of transaction digests this transaction depends on */
    dependencies: superstruct_1.optional(superstruct_1.array(common_1.TransactionDigest)),
});
exports.TransactionEvents = superstruct_1.array(events_1.SuiEvent);
const ReturnValueType = superstruct_1.tuple([superstruct_1.array(superstruct_1.number()), superstruct_1.string()]);
const MutableReferenceOutputType = superstruct_1.tuple([exports.SuiArgument, superstruct_1.array(superstruct_1.number()), superstruct_1.string()]);
const ExecutionResultType = superstruct_1.object({
    mutableReferenceOutputs: superstruct_1.optional(superstruct_1.array(MutableReferenceOutputType)),
    returnValues: superstruct_1.optional(superstruct_1.array(ReturnValueType)),
});
exports.DevInspectResults = superstruct_1.object({
    effects: exports.TransactionEffects,
    events: exports.TransactionEvents,
    results: superstruct_1.optional(superstruct_1.array(ExecutionResultType)),
    error: superstruct_1.optional(superstruct_1.string()),
});
exports.AuthorityName = superstruct_1.string();
exports.SuiTransactionBlock = superstruct_1.object({
    data: exports.SuiTransactionBlockData,
    txSignatures: superstruct_1.array(superstruct_1.string()),
});
exports.SuiObjectChangePublished = superstruct_1.object({
    type: superstruct_1.literal('published'),
    packageId: common_1.ObjectId,
    version: common_1.SequenceNumber,
    digest: objects_1.ObjectDigest,
    modules: superstruct_1.array(superstruct_1.string()),
});
exports.SuiObjectChangeTransferred = superstruct_1.object({
    type: superstruct_1.literal('transferred'),
    sender: common_1.SuiAddress,
    recipient: common_1.ObjectOwner,
    objectType: superstruct_1.string(),
    objectId: common_1.ObjectId,
    version: common_1.SequenceNumber,
    digest: objects_1.ObjectDigest,
});
exports.SuiObjectChangeMutated = superstruct_1.object({
    type: superstruct_1.literal('mutated'),
    sender: common_1.SuiAddress,
    owner: common_1.ObjectOwner,
    objectType: superstruct_1.string(),
    objectId: common_1.ObjectId,
    version: common_1.SequenceNumber,
    previousVersion: common_1.SequenceNumber,
    digest: objects_1.ObjectDigest,
});
exports.SuiObjectChangeDeleted = superstruct_1.object({
    type: superstruct_1.literal('deleted'),
    sender: common_1.SuiAddress,
    objectType: superstruct_1.string(),
    objectId: common_1.ObjectId,
    version: common_1.SequenceNumber,
});
exports.SuiObjectChangeWrapped = superstruct_1.object({
    type: superstruct_1.literal('wrapped'),
    sender: common_1.SuiAddress,
    objectType: superstruct_1.string(),
    objectId: common_1.ObjectId,
    version: common_1.SequenceNumber,
});
exports.SuiObjectChangeCreated = superstruct_1.object({
    type: superstruct_1.literal('created'),
    sender: common_1.SuiAddress,
    owner: common_1.ObjectOwner,
    objectType: superstruct_1.string(),
    objectId: common_1.ObjectId,
    version: common_1.SequenceNumber,
    digest: objects_1.ObjectDigest,
});
exports.SuiObjectChange = superstruct_1.union([
    exports.SuiObjectChangePublished,
    exports.SuiObjectChangeTransferred,
    exports.SuiObjectChangeMutated,
    exports.SuiObjectChangeDeleted,
    exports.SuiObjectChangeWrapped,
    exports.SuiObjectChangeCreated,
]);
exports.BalanceChange = superstruct_1.object({
    owner: common_1.ObjectOwner,
    coinType: superstruct_1.string(),
    /* Coin balance change(positive means receive, negative means send) */
    amount: superstruct_1.string(),
});
exports.SuiTransactionBlockResponse = superstruct_1.object({
    digest: common_1.TransactionDigest,
    transaction: superstruct_1.optional(exports.SuiTransactionBlock),
    effects: superstruct_1.optional(exports.TransactionEffects),
    events: superstruct_1.optional(exports.TransactionEvents),
    timestampMs: superstruct_1.optional(superstruct_1.number()),
    checkpoint: superstruct_1.optional(superstruct_1.number()),
    confirmedLocalExecution: superstruct_1.optional(superstruct_1.boolean()),
    objectChanges: superstruct_1.optional(superstruct_1.array(exports.SuiObjectChange)),
    balanceChanges: superstruct_1.optional(superstruct_1.array(exports.BalanceChange)),
    /* Errors that occurred in fetching/serializing the transaction. */
    errors: superstruct_1.optional(superstruct_1.array(superstruct_1.string())),
});
exports.SuiTransactionBlockResponseOptions = superstruct_1.object({
    /* Whether to show transaction input data. Default to be false. */
    showInput: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to show transaction effects. Default to be false. */
    showEffects: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to show transaction events. Default to be false. */
    showEvents: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to show object changes. Default to be false. */
    showObjectChanges: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to show coin balance changes. Default to be false. */
    showBalanceChanges: superstruct_1.optional(superstruct_1.boolean()),
});
exports.PaginatedTransactionResponse = superstruct_1.object({
    data: superstruct_1.array(exports.SuiTransactionBlockResponse),
    nextCursor: superstruct_1.union([common_1.TransactionDigest, superstruct_1.literal(null)]),
    hasNextPage: superstruct_1.boolean(),
});
exports.DryRunTransactionBlockResponse = superstruct_1.object({
    effects: exports.TransactionEffects,
    events: exports.TransactionEvents,
    objectChanges: superstruct_1.array(exports.SuiObjectChange),
    balanceChanges: superstruct_1.array(exports.BalanceChange),
});
/* -------------------------------------------------------------------------- */
/*                              Helper functions                              */
/* -------------------------------------------------------------------------- */
function getTransaction(tx) {
    return tx.transaction;
}
exports.getTransaction = getTransaction;
function getTransactionDigest(tx) {
    return tx.digest;
}
exports.getTransactionDigest = getTransactionDigest;
function getTransactionSignature(tx) {
    var _a;
    return (_a = tx.transaction) === null || _a === void 0 ? void 0 : _a.txSignatures;
}
exports.getTransactionSignature = getTransactionSignature;
/* ----------------------------- TransactionData ---------------------------- */
function getTransactionSender(tx) {
    var _a;
    return (_a = tx.transaction) === null || _a === void 0 ? void 0 : _a.data.sender;
}
exports.getTransactionSender = getTransactionSender;
function getGasData(tx) {
    var _a;
    return (_a = tx.transaction) === null || _a === void 0 ? void 0 : _a.data.gasData;
}
exports.getGasData = getGasData;
function getTransactionGasObject(tx) {
    var _a;
    return (_a = getGasData(tx)) === null || _a === void 0 ? void 0 : _a.payment;
}
exports.getTransactionGasObject = getTransactionGasObject;
function getTransactionGasPrice(tx) {
    var _a;
    return (_a = getGasData(tx)) === null || _a === void 0 ? void 0 : _a.price;
}
exports.getTransactionGasPrice = getTransactionGasPrice;
function getTransactionGasBudget(tx) {
    var _a;
    return (_a = getGasData(tx)) === null || _a === void 0 ? void 0 : _a.budget;
}
exports.getTransactionGasBudget = getTransactionGasBudget;
function getChangeEpochTransaction(data) {
    return data.kind === 'ChangeEpoch' ? data : undefined;
}
exports.getChangeEpochTransaction = getChangeEpochTransaction;
function getConsensusCommitPrologueTransaction(data) {
    return data.kind === 'ConsensusCommitPrologue' ? data : undefined;
}
exports.getConsensusCommitPrologueTransaction = getConsensusCommitPrologueTransaction;
function getTransactionKind(data) {
    var _a;
    return (_a = data.transaction) === null || _a === void 0 ? void 0 : _a.data.transaction;
}
exports.getTransactionKind = getTransactionKind;
function getTransactionKindName(data) {
    return data.kind;
}
exports.getTransactionKindName = getTransactionKindName;
function getProgrammableTransaction(data) {
    return data.kind === 'ProgrammableTransaction' ? data : undefined;
}
exports.getProgrammableTransaction = getProgrammableTransaction;
/* ----------------------------- ExecutionStatus ---------------------------- */
function getExecutionStatusType(data) {
    var _a;
    return (_a = getExecutionStatus(data)) === null || _a === void 0 ? void 0 : _a.status;
}
exports.getExecutionStatusType = getExecutionStatusType;
function getExecutionStatus(data) {
    var _a;
    return (_a = getTransactionEffects(data)) === null || _a === void 0 ? void 0 : _a.status;
}
exports.getExecutionStatus = getExecutionStatus;
function getExecutionStatusError(data) {
    var _a;
    return (_a = getExecutionStatus(data)) === null || _a === void 0 ? void 0 : _a.error;
}
exports.getExecutionStatusError = getExecutionStatusError;
function getExecutionStatusGasSummary(data) {
    var _a;
    if (superstruct_1.is(data, exports.TransactionEffects)) {
        return data.gasUsed;
    }
    return (_a = getTransactionEffects(data)) === null || _a === void 0 ? void 0 : _a.gasUsed;
}
exports.getExecutionStatusGasSummary = getExecutionStatusGasSummary;
function getTotalGasUsed(data) {
    const gasSummary = getExecutionStatusGasSummary(data);
    return gasSummary
        ? BigInt(gasSummary.computationCost) + BigInt(gasSummary.storageCost) - BigInt(gasSummary.storageRebate)
        : undefined;
}
exports.getTotalGasUsed = getTotalGasUsed;
function getTotalGasUsedUpperBound(data) {
    const gasSummary = getExecutionStatusGasSummary(data);
    return gasSummary ? BigInt(gasSummary.computationCost) + BigInt(gasSummary.storageCost) : undefined;
}
exports.getTotalGasUsedUpperBound = getTotalGasUsedUpperBound;
function getTransactionEffects(data) {
    return data.effects;
}
exports.getTransactionEffects = getTransactionEffects;
/* ---------------------------- Transaction Effects --------------------------- */
function getEvents(data) {
    return data.events;
}
exports.getEvents = getEvents;
function getCreatedObjects(data) {
    var _a;
    return (_a = getTransactionEffects(data)) === null || _a === void 0 ? void 0 : _a.created;
}
exports.getCreatedObjects = getCreatedObjects;
/* --------------------------- TransactionResponse -------------------------- */
function getTimestampFromTransactionResponse(data) {
    var _a;
    return (_a = data.timestampMs) !== null && _a !== void 0 ? _a : undefined;
}
exports.getTimestampFromTransactionResponse = getTimestampFromTransactionResponse;
/**
 * Get the newly created coin refs after a split.
 */
function getNewlyCreatedCoinRefsAfterSplit(data) {
    var _a, _b;
    return (_b = (_a = getTransactionEffects(data)) === null || _a === void 0 ? void 0 : _a.created) === null || _b === void 0 ? void 0 : _b.map((c) => c.reference);
}
exports.getNewlyCreatedCoinRefsAfterSplit = getNewlyCreatedCoinRefsAfterSplit;
function getObjectChanges(data) {
    return data.objectChanges;
}
exports.getObjectChanges = getObjectChanges;
function getPublishedObjectChanges(data) {
    var _a, _b;
    return (_b = (_a = data.objectChanges) === null || _a === void 0 ? void 0 : _a.filter((a) => superstruct_1.is(a, exports.SuiObjectChangePublished))) !== null && _b !== void 0 ? _b : [];
}
exports.getPublishedObjectChanges = getPublishedObjectChanges;
//# sourceMappingURL=data:application/json;base64,