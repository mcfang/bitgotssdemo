"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractStructTag = exports.extractReference = exports.extractMutableReference = exports.SuiMoveNormalizedModules = exports.SuiMoveNormalizedModule = exports.SuiMoveNormalizedStruct = exports.SuiMoveNormalizedField = exports.SuiMoveNormalizedFunction = exports.SuiMoveNormalizedStructType = exports.SuiMoveNormalizedType = exports.SuiMoveNormalizedTypeParameterType = exports.SuiMoveStructTypeParameter = exports.SuiMoveAbilitySet = exports.SuiMoveVisibility = exports.SuiMoveModuleId = exports.SuiMoveFunctionArgTypes = exports.SuiMoveFunctionArgType = void 0;
const superstruct_1 = require("superstruct");
exports.SuiMoveFunctionArgType = superstruct_1.union([superstruct_1.string(), superstruct_1.object({ Object: superstruct_1.string() })]);
exports.SuiMoveFunctionArgTypes = superstruct_1.array(exports.SuiMoveFunctionArgType);
exports.SuiMoveModuleId = superstruct_1.object({
    address: superstruct_1.string(),
    name: superstruct_1.string(),
});
exports.SuiMoveVisibility = superstruct_1.union([superstruct_1.literal('Private'), superstruct_1.literal('Public'), superstruct_1.literal('Friend')]);
exports.SuiMoveAbilitySet = superstruct_1.object({
    abilities: superstruct_1.array(superstruct_1.string()),
});
exports.SuiMoveStructTypeParameter = superstruct_1.object({
    constraints: exports.SuiMoveAbilitySet,
    isPhantom: superstruct_1.boolean(),
});
exports.SuiMoveNormalizedTypeParameterType = superstruct_1.object({
    TypeParameter: superstruct_1.number(),
});
function isSuiMoveNormalizedType(value) {
    if (!value)
        return false;
    if (typeof value === 'string')
        return true;
    if (superstruct_1.is(value, exports.SuiMoveNormalizedTypeParameterType))
        return true;
    if (isSuiMoveNormalizedStructType(value))
        return true;
    if (typeof value !== 'object')
        return false;
    const valueProperties = value;
    if (superstruct_1.is(valueProperties.Reference, exports.SuiMoveNormalizedType))
        return true;
    if (superstruct_1.is(valueProperties.MutableReference, exports.SuiMoveNormalizedType))
        return true;
    if (superstruct_1.is(valueProperties.Vector, exports.SuiMoveNormalizedType))
        return true;
    return false;
}
exports.SuiMoveNormalizedType = superstruct_1.define('SuiMoveNormalizedType', isSuiMoveNormalizedType);
function isSuiMoveNormalizedStructType(value) {
    if (!value || typeof value !== 'object')
        return false;
    const valueProperties = value;
    if (!valueProperties.Struct || typeof valueProperties.Struct !== 'object')
        return false;
    const structProperties = valueProperties.Struct;
    if (typeof structProperties.address !== 'string' ||
        typeof structProperties.module !== 'string' ||
        typeof structProperties.name !== 'string' ||
        !Array.isArray(structProperties.typeArguments) ||
        !structProperties.typeArguments.every((value) => isSuiMoveNormalizedType(value))) {
        return false;
    }
    return true;
}
// NOTE: This type is recursive, so we need to manually implement it:
exports.SuiMoveNormalizedStructType = superstruct_1.define('SuiMoveNormalizedStructType', isSuiMoveNormalizedStructType);
exports.SuiMoveNormalizedFunction = superstruct_1.object({
    visibility: exports.SuiMoveVisibility,
    isEntry: superstruct_1.boolean(),
    typeParameters: superstruct_1.array(exports.SuiMoveAbilitySet),
    parameters: superstruct_1.array(exports.SuiMoveNormalizedType),
    return: superstruct_1.array(exports.SuiMoveNormalizedType),
});
exports.SuiMoveNormalizedField = superstruct_1.object({
    name: superstruct_1.string(),
    type: exports.SuiMoveNormalizedType,
});
exports.SuiMoveNormalizedStruct = superstruct_1.object({
    abilities: exports.SuiMoveAbilitySet,
    typeParameters: superstruct_1.array(exports.SuiMoveStructTypeParameter),
    fields: superstruct_1.array(exports.SuiMoveNormalizedField),
});
exports.SuiMoveNormalizedModule = superstruct_1.object({
    fileFormatVersion: superstruct_1.number(),
    address: superstruct_1.string(),
    name: superstruct_1.string(),
    friends: superstruct_1.array(exports.SuiMoveModuleId),
    structs: superstruct_1.record(superstruct_1.string(), exports.SuiMoveNormalizedStruct),
    exposedFunctions: superstruct_1.record(superstruct_1.string(), exports.SuiMoveNormalizedFunction),
});
exports.SuiMoveNormalizedModules = superstruct_1.record(superstruct_1.string(), exports.SuiMoveNormalizedModule);
function extractMutableReference(normalizedType) {
    return typeof normalizedType === 'object' && 'MutableReference' in normalizedType
        ? normalizedType.MutableReference
        : undefined;
}
exports.extractMutableReference = extractMutableReference;
function extractReference(normalizedType) {
    return typeof normalizedType === 'object' && 'Reference' in normalizedType ? normalizedType.Reference : undefined;
}
exports.extractReference = extractReference;
function extractStructTag(normalizedType) {
    if (typeof normalizedType === 'object' && 'Struct' in normalizedType) {
        return normalizedType;
    }
    const ref = extractReference(normalizedType);
    const mutRef = extractMutableReference(normalizedType);
    if (typeof ref === 'object' && 'Struct' in ref) {
        return ref;
    }
    if (typeof mutRef === 'object' && 'Struct' in mutRef) {
        return mutRef;
    }
    return undefined;
}
exports.extractStructTag = extractStructTag;
//# sourceMappingURL=data:application/json;base64,