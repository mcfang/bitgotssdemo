"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEventPackage = exports.getEventSender = exports.SubscriptionEvent = exports.SubscriptionId = exports.PaginatedEvents = exports.SuiEvent = exports.EventId = void 0;
const superstruct_1 = require("superstruct");
const common_1 = require("./common");
exports.EventId = superstruct_1.object({
    txDigest: common_1.TransactionDigest,
    eventSeq: common_1.SequenceNumber,
});
// event types mirror those in "sui-json-rpc-types/src/sui_event.rs"
exports.SuiEvent = superstruct_1.object({
    id: exports.EventId,
    // Move package where this event was emitted.
    packageId: common_1.ObjectId,
    // Move module where this event was emitted.
    transactionModule: superstruct_1.string(),
    // Sender's Sui address.
    sender: common_1.SuiAddress,
    // Move event type.
    type: superstruct_1.string(),
    // Parsed json value of the event
    parsedJson: superstruct_1.optional(superstruct_1.record(superstruct_1.string(), superstruct_1.any())),
    // Base 58 encoded bcs bytes of the move event
    bcs: superstruct_1.optional(superstruct_1.string()),
    timestampMs: superstruct_1.optional(superstruct_1.integer()),
});
exports.PaginatedEvents = superstruct_1.object({
    data: superstruct_1.array(exports.SuiEvent),
    nextCursor: superstruct_1.union([exports.EventId, superstruct_1.literal(null)]),
    hasNextPage: superstruct_1.boolean(),
});
exports.SubscriptionId = superstruct_1.number();
exports.SubscriptionEvent = superstruct_1.object({
    subscription: exports.SubscriptionId,
    result: exports.SuiEvent,
});
/* ------------------------------- EventData ------------------------------ */
function getEventSender(event) {
    return event.sender;
}
exports.getEventSender = getEventSender;
function getEventPackage(event) {
    return event.packageId;
}
exports.getEventPackage = getEventPackage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9teXN0ZW5sYWIvdHlwZXMvZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQWFxQjtBQUNyQixxQ0FBaUc7QUFFcEYsUUFBQSxPQUFPLEdBQUcsb0JBQU0sQ0FBQztJQUM1QixRQUFRLEVBQUUsMEJBQWlCO0lBQzNCLFFBQVEsRUFBRSx1QkFBYztDQUN6QixDQUFDLENBQUM7QUFFSCxvRUFBb0U7QUFFdkQsUUFBQSxRQUFRLEdBQUcsb0JBQU0sQ0FBQztJQUM3QixFQUFFLEVBQUUsZUFBTztJQUNYLDZDQUE2QztJQUM3QyxTQUFTLEVBQUUsaUJBQVE7SUFDbkIsNENBQTRDO0lBQzVDLGlCQUFpQixFQUFFLG9CQUFNLEVBQUU7SUFDM0Isd0JBQXdCO0lBQ3hCLE1BQU0sRUFBRSxtQkFBVTtJQUNsQixtQkFBbUI7SUFDbkIsSUFBSSxFQUFFLG9CQUFNLEVBQUU7SUFDZCxpQ0FBaUM7SUFDakMsVUFBVSxFQUFFLHNCQUFRLENBQUMsb0JBQU0sQ0FBQyxvQkFBTSxFQUFFLEVBQUUsaUJBQUcsRUFBRSxDQUFDLENBQUM7SUFDN0MsOENBQThDO0lBQzlDLEdBQUcsRUFBRSxzQkFBUSxDQUFDLG9CQUFNLEVBQUUsQ0FBQztJQUN2QixXQUFXLEVBQUUsc0JBQVEsQ0FBQyxxQkFBTyxFQUFFLENBQUM7Q0FDakMsQ0FBQyxDQUFDO0FBdUNVLFFBQUEsZUFBZSxHQUFHLG9CQUFNLENBQUM7SUFDcEMsSUFBSSxFQUFFLG1CQUFLLENBQUMsZ0JBQVEsQ0FBQztJQUNyQixVQUFVLEVBQUUsbUJBQUssQ0FBQyxDQUFDLGVBQU8sRUFBRSxxQkFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0MsV0FBVyxFQUFFLHFCQUFPLEVBQUU7Q0FDdkIsQ0FBQyxDQUFDO0FBR1UsUUFBQSxjQUFjLEdBQUcsb0JBQU0sRUFBRSxDQUFDO0FBSTFCLFFBQUEsaUJBQWlCLEdBQUcsb0JBQU0sQ0FBQztJQUN0QyxZQUFZLEVBQUUsc0JBQWM7SUFDNUIsTUFBTSxFQUFFLGdCQUFRO0NBQ2pCLENBQUMsQ0FBQztBQUlILDhFQUE4RTtBQUU5RSxTQUFnQixjQUFjLENBQUMsS0FBZTtJQUM1QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDdEIsQ0FBQztBQUZELHdDQUVDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLEtBQWU7SUFDN0MsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ3pCLENBQUM7QUFGRCwwQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIG9iamVjdCxcbiAgbnVtYmVyLFxuICBzdHJpbmcsXG4gIHVuaW9uLFxuICBsaXRlcmFsLFxuICBJbmZlcixcbiAgYXJyYXksXG4gIHJlY29yZCxcbiAgYW55LFxuICBvcHRpb25hbCxcbiAgYm9vbGVhbixcbiAgaW50ZWdlcixcbn0gZnJvbSAnc3VwZXJzdHJ1Y3QnO1xuaW1wb3J0IHsgT2JqZWN0SWQsIFN1aUFkZHJlc3MsIFRyYW5zYWN0aW9uRGlnZXN0LCBTdWlKc29uVmFsdWUsIFNlcXVlbmNlTnVtYmVyIH0gZnJvbSAnLi9jb21tb24nO1xuXG5leHBvcnQgY29uc3QgRXZlbnRJZCA9IG9iamVjdCh7XG4gIHR4RGlnZXN0OiBUcmFuc2FjdGlvbkRpZ2VzdCxcbiAgZXZlbnRTZXE6IFNlcXVlbmNlTnVtYmVyLFxufSk7XG5cbi8vIGV2ZW50IHR5cGVzIG1pcnJvciB0aG9zZSBpbiBcInN1aS1qc29uLXJwYy10eXBlcy9zcmMvc3VpX2V2ZW50LnJzXCJcblxuZXhwb3J0IGNvbnN0IFN1aUV2ZW50ID0gb2JqZWN0KHtcbiAgaWQ6IEV2ZW50SWQsXG4gIC8vIE1vdmUgcGFja2FnZSB3aGVyZSB0aGlzIGV2ZW50IHdhcyBlbWl0dGVkLlxuICBwYWNrYWdlSWQ6IE9iamVjdElkLFxuICAvLyBNb3ZlIG1vZHVsZSB3aGVyZSB0aGlzIGV2ZW50IHdhcyBlbWl0dGVkLlxuICB0cmFuc2FjdGlvbk1vZHVsZTogc3RyaW5nKCksXG4gIC8vIFNlbmRlcidzIFN1aSBhZGRyZXNzLlxuICBzZW5kZXI6IFN1aUFkZHJlc3MsXG4gIC8vIE1vdmUgZXZlbnQgdHlwZS5cbiAgdHlwZTogc3RyaW5nKCksXG4gIC8vIFBhcnNlZCBqc29uIHZhbHVlIG9mIHRoZSBldmVudFxuICBwYXJzZWRKc29uOiBvcHRpb25hbChyZWNvcmQoc3RyaW5nKCksIGFueSgpKSksXG4gIC8vIEJhc2UgNTggZW5jb2RlZCBiY3MgYnl0ZXMgb2YgdGhlIG1vdmUgZXZlbnRcbiAgYmNzOiBvcHRpb25hbChzdHJpbmcoKSksXG4gIHRpbWVzdGFtcE1zOiBvcHRpb25hbChpbnRlZ2VyKCkpLFxufSk7XG5cbmV4cG9ydCB0eXBlIFN1aUV2ZW50ID0gSW5mZXI8dHlwZW9mIFN1aUV2ZW50PjtcblxuZXhwb3J0IHR5cGUgTW92ZUV2ZW50RmllbGQgPSB7XG4gIHBhdGg6IHN0cmluZztcbiAgdmFsdWU6IFN1aUpzb25WYWx1ZTtcbn07XG5cbi8qKlxuICogU2VxdWVudGlhbCBldmVudCBJRCwgaWUgKHRyYW5zYWN0aW9uIHNlcSBudW1iZXIsIGV2ZW50IHNlcSBudW1iZXIpLlxuICogMSkgU2VydmVzIGFzIGEgdW5pcXVlIGV2ZW50IElEIGZvciBlYWNoIGZ1bGxub2RlXG4gKiAyKSBBbHNvIHNlcnZlcyB0byBzZXF1ZW5jZSBldmVudHMgZm9yIHRoZSBwdXJwb3NlcyBvZiBwYWdpbmF0aW9uIGFuZCBxdWVyeWluZy5cbiAqICAgIEEgaGlnaGVyIGlkIGlzIGFuIGV2ZW50IHNlZW4gbGF0ZXIgYnkgdGhhdCBmdWxsbm9kZS5cbiAqIFRoaXMgSUQgaXMgdGhlIFwiY3Vyc29yXCIgZm9yIGV2ZW50IHF1ZXJ5aW5nLlxuICovXG5leHBvcnQgdHlwZSBFdmVudElkID0gSW5mZXI8dHlwZW9mIEV2ZW50SWQ+O1xuXG4vLyBtaXJyb3JzIHN1aV9qc29uX3JwY190eXBlczo6U3VpRXZlbnRGaWx0ZXJcbmV4cG9ydCB0eXBlIFN1aUV2ZW50RmlsdGVyID1cbiAgfCB7IFBhY2thZ2U6IE9iamVjdElkIH1cbiAgfCB7IE1vdmVNb2R1bGU6IHsgcGFja2FnZTogT2JqZWN0SWQ7IG1vZHVsZTogc3RyaW5nIH0gfVxuICB8IHsgTW92ZUV2ZW50VHlwZTogc3RyaW5nIH1cbiAgfCB7IE1vdmVFdmVudEZpZWxkOiBNb3ZlRXZlbnRGaWVsZCB9XG4gIHwgeyBUcmFuc2FjdGlvbjogVHJhbnNhY3Rpb25EaWdlc3QgfVxuICB8IHtcbiAgICAgIFRpbWVSYW5nZToge1xuICAgICAgICAvLyBsZWZ0IGVuZHBvaW50IG9mIHRpbWUgaW50ZXJ2YWwsIG1pbGxpc2Vjb25kcyBzaW5jZSBlcG9jaCwgaW5jbHVzaXZlXG4gICAgICAgIHN0YXJ0X3RpbWU6IG51bWJlcjtcbiAgICAgICAgLy8gcmlnaHQgZW5kcG9pbnQgb2YgdGltZSBpbnRlcnZhbCwgbWlsbGlzZWNvbmRzIHNpbmNlIGVwb2NoLCBleGNsdXNpdmVcbiAgICAgICAgZW5kX3RpbWU6IG51bWJlcjtcbiAgICAgIH07XG4gICAgfVxuICB8IHsgU2VuZGVyOiBTdWlBZGRyZXNzIH1cbiAgfCB7IEFsbDogU3VpRXZlbnRGaWx0ZXJbXSB9XG4gIHwgeyBBbnk6IFN1aUV2ZW50RmlsdGVyW10gfVxuICB8IHsgQW5kOiBbU3VpRXZlbnRGaWx0ZXIsIFN1aUV2ZW50RmlsdGVyXSB9XG4gIHwgeyBPcjogW1N1aUV2ZW50RmlsdGVyLCBTdWlFdmVudEZpbHRlcl0gfTtcblxuZXhwb3J0IGNvbnN0IFBhZ2luYXRlZEV2ZW50cyA9IG9iamVjdCh7XG4gIGRhdGE6IGFycmF5KFN1aUV2ZW50KSxcbiAgbmV4dEN1cnNvcjogdW5pb24oW0V2ZW50SWQsIGxpdGVyYWwobnVsbCldKSxcbiAgaGFzTmV4dFBhZ2U6IGJvb2xlYW4oKSxcbn0pO1xuZXhwb3J0IHR5cGUgUGFnaW5hdGVkRXZlbnRzID0gSW5mZXI8dHlwZW9mIFBhZ2luYXRlZEV2ZW50cz47XG5cbmV4cG9ydCBjb25zdCBTdWJzY3JpcHRpb25JZCA9IG51bWJlcigpO1xuXG5leHBvcnQgdHlwZSBTdWJzY3JpcHRpb25JZCA9IEluZmVyPHR5cGVvZiBTdWJzY3JpcHRpb25JZD47XG5cbmV4cG9ydCBjb25zdCBTdWJzY3JpcHRpb25FdmVudCA9IG9iamVjdCh7XG4gIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uSWQsXG4gIHJlc3VsdDogU3VpRXZlbnQsXG59KTtcblxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uRXZlbnQgPSBJbmZlcjx0eXBlb2YgU3Vic2NyaXB0aW9uRXZlbnQ+O1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEV2ZW50RGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50U2VuZGVyKGV2ZW50OiBTdWlFdmVudCk6IFN1aUFkZHJlc3Mge1xuICByZXR1cm4gZXZlbnQuc2VuZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXZlbnRQYWNrYWdlKGV2ZW50OiBTdWlFdmVudCk6IE9iamVjdElkIHtcbiAgcmV0dXJuIGV2ZW50LnBhY2thZ2VJZDtcbn1cbiJdfQ==