"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaginatedObjectsResponse = exports.CheckpointedObjectId = exports.getMovePackageContent = exports.hasPublicTransfer = exports.getMoveObject = exports.getObjectFields = exports.getMoveObjectType = exports.isImmutableObject = exports.isSharedObject = exports.getSharedObjectInitialVersion = exports.getObjectDisplay = exports.getObjectOwner = exports.getObjectPreviousTransactionDigest = exports.getObjectType = exports.isSuiObjectResponse = exports.getObjectVersion = exports.getObjectId = exports.getObjectReference = exports.getObjectNotExistsResponse = exports.getObjectDeletedResponse = exports.getSuiObjectData = exports.SuiObjectResponse = exports.SuiObjectResponseError = exports.GetOwnedObjectsResponse = exports.ObjectStatus = exports.SuiObjectDataOptions = exports.SuiObjectData = exports.ObjectDigest = exports.MIST_PER_SUI = exports.SuiRawData = exports.SuiRawMovePackage = exports.SuiRawMoveObject = exports.SuiParsedData = exports.SuiMovePackage = exports.SuiMoveObject = exports.MovePackageContent = exports.ObjectContentFields = exports.SuiObjectInfo = exports.SuiGasData = exports.SuiObjectRef = exports.ObjectType = void 0;
const superstruct_1 = require("superstruct");
const common_1 = require("./common");
exports.ObjectType = superstruct_1.union([superstruct_1.string(), superstruct_1.literal('package')]);
exports.SuiObjectRef = superstruct_1.object({
    /** Base64 string representing the object digest */
    digest: common_1.TransactionDigest,
    /** Hex code as string representing the object id */
    objectId: superstruct_1.string(),
    /** Object version */
    version: superstruct_1.union([superstruct_1.number(), superstruct_1.string()]),
});
exports.SuiGasData = superstruct_1.object({
    payment: superstruct_1.array(exports.SuiObjectRef),
    /** Gas Object's owner */
    owner: superstruct_1.string(),
    price: superstruct_1.number(),
    budget: superstruct_1.number(),
});
exports.SuiObjectInfo = superstruct_1.assign(exports.SuiObjectRef, superstruct_1.object({
    type: superstruct_1.string(),
    owner: common_1.ObjectOwner,
    previousTransaction: common_1.TransactionDigest,
}));
exports.ObjectContentFields = superstruct_1.record(superstruct_1.string(), superstruct_1.any());
exports.MovePackageContent = superstruct_1.record(superstruct_1.string(), superstruct_1.string());
exports.SuiMoveObject = superstruct_1.object({
    /** Move type (e.g., "0x2::coin::Coin<0x2::sui::SUI>") */
    type: superstruct_1.string(),
    /** Fields and values stored inside the Move object */
    fields: exports.ObjectContentFields,
    hasPublicTransfer: superstruct_1.boolean(),
});
exports.SuiMovePackage = superstruct_1.object({
    /** A mapping from module name to disassembled Move bytecode */
    disassembled: exports.MovePackageContent,
});
exports.SuiParsedData = superstruct_1.union([
    superstruct_1.assign(exports.SuiMoveObject, superstruct_1.object({ dataType: superstruct_1.literal('moveObject') })),
    superstruct_1.assign(exports.SuiMovePackage, superstruct_1.object({ dataType: superstruct_1.literal('package') })),
]);
exports.SuiRawMoveObject = superstruct_1.object({
    /** Move type (e.g., "0x2::coin::Coin<0x2::sui::SUI>") */
    type: superstruct_1.string(),
    hasPublicTransfer: superstruct_1.boolean(),
    version: common_1.SequenceNumber,
    bcsBytes: superstruct_1.array(superstruct_1.number()),
});
exports.SuiRawMovePackage = superstruct_1.object({
    id: common_1.ObjectId,
    /** A mapping from module name to Move bytecode enocded in base64*/
    moduleMap: superstruct_1.record(superstruct_1.string(), superstruct_1.string()),
});
// TODO(chris): consolidate SuiRawParsedData and SuiRawObject using generics
exports.SuiRawData = superstruct_1.union([
    superstruct_1.assign(exports.SuiMoveObject, superstruct_1.object({ dataType: superstruct_1.literal('moveObject') })),
    superstruct_1.assign(exports.SuiRawMovePackage, superstruct_1.object({ dataType: superstruct_1.literal('package') })),
]);
exports.MIST_PER_SUI = BigInt(1000000000);
exports.ObjectDigest = superstruct_1.string();
exports.SuiObjectData = superstruct_1.object({
    objectId: common_1.ObjectId,
    version: common_1.SequenceNumber,
    digest: exports.ObjectDigest,
    /**
     * Type of the object, default to be undefined unless SuiObjectDataOptions.showType is set to true
     */
    type: superstruct_1.optional(superstruct_1.string()),
    /**
     * Move object content or package content, default to be undefined unless SuiObjectDataOptions.showContent is set to true
     */
    content: superstruct_1.optional(exports.SuiParsedData),
    /**
     * Move object content or package content in BCS bytes, default to be undefined unless SuiObjectDataOptions.showBcs is set to true
     */
    bcs: superstruct_1.optional(exports.SuiRawData),
    /**
     * The owner of this object. Default to be undefined unless SuiObjectDataOptions.showOwner is set to true
     */
    owner: superstruct_1.optional(common_1.ObjectOwner),
    /**
     * The digest of the transaction that created or last mutated this object.
     * Default to be undefined unless SuiObjectDataOptions.showPreviousTransaction is set to true
     */
    previousTransaction: superstruct_1.optional(common_1.TransactionDigest),
    /**
     * The amount of SUI we would rebate if this object gets deleted.
     * This number is re-calculated each time the object is mutated based on
     * the present storage gas price.
     * Default to be undefined unless SuiObjectDataOptions.showStorageRebate is set to true
     */
    storageRebate: superstruct_1.optional(superstruct_1.number()),
    /**
     * Display metadata for this object, default to be undefined unless SuiObjectDataOptions.showDisplay is set to true
     * This can also be None if the struct type does not have Display defined
     * See more details in https://forums.sui.io/t/nft-object-display-proposal/4872
     */
    display: superstruct_1.optional(superstruct_1.record(superstruct_1.string(), superstruct_1.string())),
});
/**
 * Config for fetching object data
 */
exports.SuiObjectDataOptions = superstruct_1.object({
    /* Whether to fetch the object type, default to be true */
    showType: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to fetch the object content, default to be false */
    showContent: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to fetch the object content in BCS bytes, default to be false */
    showBcs: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to fetch the object owner, default to be false */
    showOwner: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to fetch the previous transaction digest, default to be false */
    showPreviousTransaction: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to fetch the storage rebate, default to be false */
    showStorageRebate: superstruct_1.optional(superstruct_1.boolean()),
    /* Whether to fetch the display metadata, default to be false */
    showDisplay: superstruct_1.optional(superstruct_1.boolean()),
});
exports.ObjectStatus = superstruct_1.union([superstruct_1.literal('Exists'), superstruct_1.literal('NotExists'), superstruct_1.literal('Deleted')]);
exports.GetOwnedObjectsResponse = superstruct_1.array(exports.SuiObjectInfo);
exports.SuiObjectResponseError = superstruct_1.object({
    tag: superstruct_1.string(),
    object_id: superstruct_1.optional(common_1.ObjectId),
    version: superstruct_1.optional(common_1.SequenceNumber),
    digest: superstruct_1.optional(exports.ObjectDigest),
});
exports.SuiObjectResponse = superstruct_1.object({
    data: superstruct_1.optional(exports.SuiObjectData),
    error: superstruct_1.optional(exports.SuiObjectResponseError),
});
/* -------------------------------------------------------------------------- */
/*                              Helper functions                              */
/* -------------------------------------------------------------------------- */
/* -------------------------- SuiObjectResponse ------------------------- */
function getSuiObjectData(resp) {
    return resp.data;
}
exports.getSuiObjectData = getSuiObjectData;
function getObjectDeletedResponse(resp) {
    if (resp.error && 'object_id' in resp.error && 'version' in resp.error && 'digest' in resp.error) {
        const error = resp.error;
        return {
            objectId: error.object_id,
            version: error.version,
            digest: error.digest,
        };
    }
    return undefined;
}
exports.getObjectDeletedResponse = getObjectDeletedResponse;
function getObjectNotExistsResponse(resp) {
    if (resp.error && 'object_id' in resp.error && !('version' in resp.error) && !('digest' in resp.error)) {
        return resp.error.object_id;
    }
    return undefined;
}
exports.getObjectNotExistsResponse = getObjectNotExistsResponse;
function getObjectReference(resp) {
    if ('reference' in resp) {
        return resp.reference;
    }
    const exists = getSuiObjectData(resp);
    if (exists) {
        return {
            objectId: exists.objectId,
            version: exists.version,
            digest: exists.digest,
        };
    }
    return getObjectDeletedResponse(resp);
}
exports.getObjectReference = getObjectReference;
/* ------------------------------ SuiObjectRef ------------------------------ */
function getObjectId(data) {
    var _a, _b;
    if ('objectId' in data) {
        return data.objectId;
    }
    return (_b = (_a = getObjectReference(data)) === null || _a === void 0 ? void 0 : _a.objectId) !== null && _b !== void 0 ? _b : getObjectNotExistsResponse(data);
}
exports.getObjectId = getObjectId;
function getObjectVersion(data) {
    var _a;
    if ('version' in data) {
        return data.version;
    }
    return (_a = getObjectReference(data)) === null || _a === void 0 ? void 0 : _a.version;
}
exports.getObjectVersion = getObjectVersion;
/* -------------------------------- SuiObject ------------------------------- */
function isSuiObjectResponse(resp) {
    return resp.data !== undefined;
}
exports.isSuiObjectResponse = isSuiObjectResponse;
/**
 * Deriving the object type from the object response
 * @returns 'package' if the object is a package, move object type(e.g., 0x2::coin::Coin<0x2::sui::SUI>)
 * if the object is a move object
 */
function getObjectType(resp) {
    var _a;
    const data = isSuiObjectResponse(resp) ? resp.data : resp;
    if (!(data === null || data === void 0 ? void 0 : data.type) && 'data' in resp) {
        if (((_a = data === null || data === void 0 ? void 0 : data.content) === null || _a === void 0 ? void 0 : _a.dataType) === 'package') {
            return 'package';
        }
        return getMoveObjectType(resp);
    }
    return data === null || data === void 0 ? void 0 : data.type;
}
exports.getObjectType = getObjectType;
function getObjectPreviousTransactionDigest(resp) {
    var _a;
    return (_a = getSuiObjectData(resp)) === null || _a === void 0 ? void 0 : _a.previousTransaction;
}
exports.getObjectPreviousTransactionDigest = getObjectPreviousTransactionDigest;
function getObjectOwner(resp) {
    var _a;
    if (superstruct_1.is(resp, common_1.ObjectOwner)) {
        return resp;
    }
    return (_a = getSuiObjectData(resp)) === null || _a === void 0 ? void 0 : _a.owner;
}
exports.getObjectOwner = getObjectOwner;
function getObjectDisplay(resp) {
    var _a;
    return (_a = getSuiObjectData(resp)) === null || _a === void 0 ? void 0 : _a.display;
}
exports.getObjectDisplay = getObjectDisplay;
function getSharedObjectInitialVersion(resp) {
    const owner = getObjectOwner(resp);
    if (typeof owner === 'object' && 'Shared' in owner) {
        return owner.Shared.initial_shared_version;
    }
    else {
        return undefined;
    }
}
exports.getSharedObjectInitialVersion = getSharedObjectInitialVersion;
function isSharedObject(resp) {
    const owner = getObjectOwner(resp);
    return typeof owner === 'object' && 'Shared' in owner;
}
exports.isSharedObject = isSharedObject;
function isImmutableObject(resp) {
    const owner = getObjectOwner(resp);
    return owner === 'Immutable';
}
exports.isImmutableObject = isImmutableObject;
function getMoveObjectType(resp) {
    var _a;
    return (_a = getMoveObject(resp)) === null || _a === void 0 ? void 0 : _a.type;
}
exports.getMoveObjectType = getMoveObjectType;
function getObjectFields(resp) {
    var _a;
    if ('fields' in resp) {
        return resp.fields;
    }
    return (_a = getMoveObject(resp)) === null || _a === void 0 ? void 0 : _a.fields;
}
exports.getObjectFields = getObjectFields;
function isSuiObjectDataWithContent(data) {
    return data.content !== undefined;
}
function getMoveObject(data) {
    const suiObject = 'data' in data ? getSuiObjectData(data) : data;
    if (!suiObject || !isSuiObjectDataWithContent(suiObject) || suiObject.content.dataType !== 'moveObject') {
        return undefined;
    }
    return suiObject.content;
}
exports.getMoveObject = getMoveObject;
function hasPublicTransfer(data) {
    var _a, _b;
    return (_b = (_a = getMoveObject(data)) === null || _a === void 0 ? void 0 : _a.hasPublicTransfer) !== null && _b !== void 0 ? _b : false;
}
exports.hasPublicTransfer = hasPublicTransfer;
function getMovePackageContent(data) {
    var _a;
    if ('disassembled' in data) {
        return data.disassembled;
    }
    const suiObject = getSuiObjectData(data);
    if (((_a = suiObject === null || suiObject === void 0 ? void 0 : suiObject.content) === null || _a === void 0 ? void 0 : _a.dataType) !== 'package') {
        return undefined;
    }
    return suiObject.content.disassembled;
}
exports.getMovePackageContent = getMovePackageContent;
exports.CheckpointedObjectId = superstruct_1.object({
    objectId: common_1.ObjectId,
    atCheckpoint: superstruct_1.optional(superstruct_1.number()),
});
exports.PaginatedObjectsResponse = superstruct_1.object({
    data: superstruct_1.array(exports.SuiObjectResponse),
    nextCursor: superstruct_1.optional(exports.CheckpointedObjectId),
    hasNextPage: superstruct_1.boolean(),
});
//# sourceMappingURL=data:application/json;base64,