"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transactions = exports.getTransactionType = exports.TransactionType = exports.PublishTransaction = exports.MakeMoveVecTransaction = exports.MergeCoinsTransaction = exports.SplitCoinsTransaction = exports.TransferObjectsTransaction = exports.MoveCallTransaction = exports.PureTransactionArgument = exports.ObjectTransactionArgument = exports.TransactionArgument = exports.TransactionBlockInput = void 0;
const bcs_1 = require("@mysten/bcs");
const superstruct_1 = require("superstruct");
const common_1 = require("../types/common");
const utils_1 = require("./utils");
const option = (some) => superstruct_1.union([superstruct_1.object({ None: superstruct_1.literal(null) }), superstruct_1.object({ Some: some })]);
exports.TransactionBlockInput = superstruct_1.object({
    kind: superstruct_1.literal('Input'),
    index: superstruct_1.integer(),
    value: superstruct_1.optional(superstruct_1.any()),
    type: superstruct_1.optional(superstruct_1.union([superstruct_1.literal('pure'), superstruct_1.literal('object')])),
});
const TransactionArgumentTypes = [
    exports.TransactionBlockInput,
    superstruct_1.object({ kind: superstruct_1.literal('GasCoin') }),
    superstruct_1.object({ kind: superstruct_1.literal('Result'), index: superstruct_1.integer() }),
    superstruct_1.object({
        kind: superstruct_1.literal('NestedResult'),
        index: superstruct_1.integer(),
        resultIndex: superstruct_1.integer(),
    }),
];
// Generic transaction argument
exports.TransactionArgument = superstruct_1.union([...TransactionArgumentTypes]);
// Transaction argument referring to an object:
exports.ObjectTransactionArgument = superstruct_1.union([...TransactionArgumentTypes]);
exports.ObjectTransactionArgument[utils_1.TRANSACTION_TYPE] = {
    kind: 'object',
};
const PureTransactionArgument = (type) => {
    const struct = superstruct_1.union([...TransactionArgumentTypes]);
    struct[utils_1.TRANSACTION_TYPE] = {
        kind: 'pure',
        type,
    };
    return struct;
};
exports.PureTransactionArgument = PureTransactionArgument;
exports.MoveCallTransaction = superstruct_1.object({
    kind: superstruct_1.literal('MoveCall'),
    target: superstruct_1.define('target', superstruct_1.string().validator),
    typeArguments: superstruct_1.array(superstruct_1.string()),
    arguments: superstruct_1.array(exports.TransactionArgument),
});
exports.TransferObjectsTransaction = superstruct_1.object({
    kind: superstruct_1.literal('TransferObjects'),
    objects: superstruct_1.array(exports.ObjectTransactionArgument),
    address: exports.PureTransactionArgument(bcs_1.BCS.ADDRESS),
});
exports.SplitCoinsTransaction = superstruct_1.object({
    kind: superstruct_1.literal('SplitCoins'),
    coin: exports.ObjectTransactionArgument,
    amounts: superstruct_1.array(exports.PureTransactionArgument('u64')),
});
exports.MergeCoinsTransaction = superstruct_1.object({
    kind: superstruct_1.literal('MergeCoins'),
    destination: exports.ObjectTransactionArgument,
    sources: superstruct_1.array(exports.ObjectTransactionArgument),
});
exports.MakeMoveVecTransaction = superstruct_1.object({
    kind: superstruct_1.literal('MakeMoveVec'),
    type: superstruct_1.optional(option(superstruct_1.string())),
    objects: superstruct_1.array(exports.ObjectTransactionArgument),
});
exports.PublishTransaction = superstruct_1.object({
    kind: superstruct_1.literal('Publish'),
    modules: superstruct_1.array(superstruct_1.array(superstruct_1.integer())),
    dependencies: superstruct_1.array(common_1.ObjectId),
});
const TransactionTypes = [
    exports.MoveCallTransaction,
    exports.TransferObjectsTransaction,
    exports.SplitCoinsTransaction,
    exports.MergeCoinsTransaction,
    exports.PublishTransaction,
    exports.MakeMoveVecTransaction,
];
exports.TransactionType = superstruct_1.union([...TransactionTypes]);
function getTransactionType(data) {
    superstruct_1.assert(data, exports.TransactionType);
    return TransactionTypes.find((schema) => superstruct_1.is(data, schema));
}
exports.getTransactionType = getTransactionType;
/**
 * Simple helpers used to construct transactions:
 */
exports.Transactions = {
    MoveCall(input) {
        var _a, _b;
        return utils_1.create({
            kind: 'MoveCall',
            target: input.target,
            arguments: (_a = input.arguments) !== null && _a !== void 0 ? _a : [],
            typeArguments: (_b = input.typeArguments) !== null && _b !== void 0 ? _b : [],
        }, exports.MoveCallTransaction);
    },
    TransferObjects(objects, address) {
        return utils_1.create({ kind: 'TransferObjects', objects, address }, exports.TransferObjectsTransaction);
    },
    SplitCoins(coin, amounts) {
        return utils_1.create({ kind: 'SplitCoins', coin, amounts }, exports.SplitCoinsTransaction);
    },
    MergeCoins(destination, sources) {
        return utils_1.create({ kind: 'MergeCoins', destination, sources }, exports.MergeCoinsTransaction);
    },
    Publish(modules, dependencies) {
        return utils_1.create({ kind: 'Publish', modules, dependencies }, exports.PublishTransaction);
    },
    MakeMoveVec({ type, objects, }) {
        return utils_1.create({
            kind: 'MakeMoveVec',
            type: type ? { Some: type } : { None: null },
            objects,
        }, exports.MakeMoveVecTransaction);
    },
};
//# sourceMappingURL=data:application/json;base64,