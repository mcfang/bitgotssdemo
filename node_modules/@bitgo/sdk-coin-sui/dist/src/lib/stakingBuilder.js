"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
const transactionBuilder_1 = require("./transactionBuilder");
const utils_1 = __importDefault(require("./utils"));
const assert_1 = __importDefault(require("assert"));
const stakingTransaction_1 = require("./stakingTransaction");
const builder_1 = require("./mystenlab/builder");
const framework_1 = require("./mystenlab/framework");
const bcs_1 = require("@mysten/bcs");
class StakingBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new stakingTransaction_1.StakingTransaction(_coinConfig);
    }
    /**
     * Build a MoveCall transaction ready to be signed and executed.
     *
     * @returns {BitGoSuiTransaction} an unsigned Sui transaction
     */
    buildStakeTransaction() {
        return {
            type: iface_1.SuiTransactionType.AddStake,
            sender: this._sender,
            tx: {
                inputs: [],
                transactions: [],
            },
            gasData: this._gasData,
        };
    }
    /**
     * Get staking transaction type
     *
     * @return {TransactionType}
     * @protected
     */
    get transactionType() {
        return sdk_core_1.TransactionType.StakingAdd;
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        if (!transaction.suiTransaction) {
            return;
        }
        this.validateTransactionFields();
    }
    /** @inheritdoc */
    sign(key) {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        super.sign(key);
    }
    /**
     * Create a new transaction for staking coins ready to be signed and executed.
     *
     * @param {RequestAddStake[]} request: a list of staking request
     */
    stake(request) {
        request.forEach((req) => {
            utils_1.default.validateAddress(req.validatorAddress, 'validatorAddress');
            assert_1.default(utils_1.default.isValidAmount(req.amount), 'Invalid recipient amount');
            if (this._sender === req.validatorAddress) {
                throw new sdk_core_1.BuildTransactionError('Sender address cannot be the same as the Staking address');
            }
        });
        this._addStakeTx = request;
        return this;
    }
    /**
     * Create a new transaction for withdrawing coins ready to be signed
     *
     * @param {RequestWithdrawStakedSui} request
     */
    unstake(request) {
        this.validateSuiObjectRef(request.stakedSui, 'stakedSui');
        this._withdrawDelegation = request;
        return this;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new stakingTransaction_1.StakingTransaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        this.transaction.transactionType(this.transactionType);
        if (this._signer) {
            this.transaction.sign(this._signer);
        }
        this._signatures.forEach((signature) => {
            this.transaction.addSignature(signature.publicKey, signature.signature);
        });
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {StakingTransaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        if (tx.signature && tx.signature.length > 0) {
            this._signatures = [tx.suiSignature];
        }
        const txData = tx.toJson();
        this.type(iface_1.SuiTransactionType.AddStake);
        this.sender(txData.sender);
        this.gasData(txData.gasData);
        const requests = utils_1.default.getStakeRequests(tx.suiTransaction.tx);
        this.stake(requests);
    }
    /**
     * Validates all fields are defined
     */
    validateTransactionFields() {
        assert_1.default(this._type, new sdk_core_1.BuildTransactionError('type is required before building'));
        assert_1.default(this._sender, new sdk_core_1.BuildTransactionError('sender is required before building'));
        this._addStakeTx.forEach((req) => {
            assert_1.default(req.validatorAddress, new sdk_core_1.BuildTransactionError('validator address is required before building'));
            assert_1.default(req.amount, new sdk_core_1.BuildTransactionError('staking amount is required before building'));
        });
        assert_1.default(this._gasData, new sdk_core_1.BuildTransactionError('gasData is required before building'));
        this.validateGasData(this._gasData);
    }
    /**
     * Build SuiTransaction
     *
     * @return {BitGoSuiTransaction<MoveCallTx>}
     * @protected
     */
    buildSuiTransaction() {
        this.validateTransactionFields();
        const programmableTxBuilder = new builder_1.TransactionBlock();
        switch (this._type) {
            case iface_1.SuiTransactionType.AddStake:
                // Create a new coin with staking balance, based on the coins used as gas payment.
                this._addStakeTx.forEach((req) => {
                    const coin = programmableTxBuilder.splitCoins(programmableTxBuilder.gas, [
                        programmableTxBuilder.pure(req.amount),
                    ]);
                    // Stake the split coin to a specific validator address.
                    programmableTxBuilder.moveCall({
                        target: `${framework_1.SUI_SYSTEM_ADDRESS}::${framework_1.SUI_SYSTEM_MODULE_NAME}::${framework_1.ADD_STAKE_FUN_NAME}`,
                        arguments: [
                            programmableTxBuilder.object(builder_1.Inputs.SharedObjectRef(framework_1.SUI_SYSTEM_STATE_OBJECT)),
                            coin,
                            programmableTxBuilder.pure(builder_1.Inputs.Pure(req.validatorAddress, bcs_1.BCS.ADDRESS)),
                        ],
                    });
                });
                break;
            case iface_1.SuiTransactionType.WithdrawStake:
                // Unstake staked object.
                programmableTxBuilder.moveCall({
                    target: `${framework_1.SUI_SYSTEM_ADDRESS}::${framework_1.SUI_SYSTEM_MODULE_NAME}::${framework_1.WITHDRAW_STAKE_FUN_NAME}`,
                    arguments: [
                        programmableTxBuilder.object(builder_1.Inputs.SharedObjectRef(framework_1.SUI_SYSTEM_STATE_OBJECT)),
                        programmableTxBuilder.pure(builder_1.Inputs.ObjectRef(this._withdrawDelegation.stakedSui)),
                    ],
                });
                break;
            default:
                throw new sdk_core_1.InvalidTransactionError(`unsupported target method`);
        }
        const txData = programmableTxBuilder.blockData;
        return {
            type: this._type,
            sender: this._sender,
            tx: {
                inputs: [...txData.inputs],
                transactions: [...txData.transactions],
            },
            gasData: {
                ...this._gasData,
            },
        };
    }
}
exports.StakingBuilder = StakingBuilder;
//# sourceMappingURL=data:application/json;base64,