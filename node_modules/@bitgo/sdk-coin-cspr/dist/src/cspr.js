"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cspr = void 0;
/**
 * @prettier
 */
const CsprLib = __importStar(require("./lib"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
class Cspr extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Cspr(bitgo, staticsCoin);
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    async verifyTransaction(params) {
        // TODO: Implement when available on the SDK.
        return true;
    }
    /**
     * Check if address is valid, then make sure it matches the root address.
     *
     * @param {VerifyAddressOptions} params address and rootAddress to verify
     */
    async isWalletAddress(params) {
        const { address, rootAddress } = params;
        if (!this.isValidAddress(address)) {
            throw new sdk_core_1.InvalidAddressError(`invalid address: ${address}`);
        }
        if (!this.isValidAddress(rootAddress)) {
            throw new sdk_core_1.InvalidAddressError('wallet root address is not valid');
        }
        const newAddressDetails = CsprLib.Utils.getAddressDetails(address);
        const rootAddressDetails = CsprLib.Utils.getAddressDetails(rootAddress);
        if (newAddressDetails.address.toLowerCase() !== rootAddressDetails.address.toLowerCase()) {
            throw new sdk_core_1.UnexpectedAddressError(`address validation failure: ${newAddressDetails.address} vs ${rootAddress}`);
        }
        return true;
    }
    /**
     * Generate Casper key pair - BitGo xpub format
     *
     * @param {Buffer} seed - Seed from which the new keypair should be generated, otherwise a random seed is used
     * @returns {Object} object with generated xpub and xprv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? new CsprLib.KeyPair({ seed }) : new CsprLib.KeyPair();
        const keys = keyPair.getExtendedKeys();
        if (!keys.xprv) {
            throw new Error('Missing xprv in key generation.');
        }
        return {
            pub: keys.xpub,
            prv: keys.xprv,
        };
    }
    isValidPub(pub) {
        // TODO(STLX-1344): Validate using account-lib when available
        //  return accountLib.Cspr.Utils.isValidPublicKey(pub);
        try {
            new CsprLib.KeyPair({ pub });
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Return boolean indicating whether input is valid private key for the coin
     *
     * @param prv the prv to be checked
     * @returns is it valid?
     */
    isValidPrv(prv) {
        // TODO(STLX-1345): Validate using account-lib when available
        //  return accountLib.Cspr.Utils.isValidPrivateKey(prv);
        try {
            new CsprLib.KeyPair({ prv });
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Return boolean indicating whether input is valid CSPR address
     *
     * @param address the pub to be checked
     * @returns true if the address is valid
     */
    isValidAddress(address) {
        try {
            const addressDetails = CsprLib.Utils.getAddressDetails(address);
            return address === CsprLib.Utils.normalizeAddress(addressDetails);
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param {SignTransactionOptions} params data required to rebuild and sign the transaction
     * @param {TransactionPrebuild} params.txPrebuild prebuild object returned by platform
     * @param {String} params.prv user prv used to sign the transaction
     * @returns Bluebird<SignedTransaction>
     */
    async signTransaction(params) {
        const txBuilder = this.getBuilder().from(params.txPrebuild.txHex);
        const key = params.prv;
        txBuilder.sign({ key });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new sdk_core_1.InvalidTransactionError('Error while trying to build transaction');
        }
        const response = {
            txHex: transaction.toBroadcastFormat(),
        };
        return transaction.signature.length >= 2 ? response : { halfSigned: response };
    }
    async parseTransaction(params) {
        return {};
    }
    /**
     * Extend walletParams with extra params required for generating a Casper wallet
     *
     * Casper wallets have three three keys, user, backup and bitgo.
     * Initially, we need a root prv to generate the account, which must be distinct from all three keychains on the wallet.
     * If a root private key is not provided, a random one is generated.
     * The root public key is the basis for the wallet root address.
     */
    async supplementGenerateWallet(walletParams) {
        if (walletParams.rootPrivateKey) {
            if (!this.isValidPrv(walletParams.rootPrivateKey) || walletParams.rootPrivateKey.length !== 64) {
                throw new Error('rootPrivateKey needs to be a hexadecimal private key string');
            }
        }
        else {
            const keyPair = utxo_lib_1.ECPair.makeRandom();
            if (!keyPair.privateKey) {
                throw new Error('no privateKey');
            }
            walletParams.rootPrivateKey = keyPair.privateKey.toString('hex');
        }
        return walletParams;
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    async signMessage(key, message) {
        const keyPair = new CsprLib.KeyPair({ prv: key.prv });
        const messageHex = message instanceof Buffer ? message.toString('hex') : message;
        const signatureData = CsprLib.Utils.signMessage(keyPair, messageHex);
        return Buffer.from(signatureData.signature);
    }
    /**
     * Explain a Casper transaction from Raw Tx
     *
     * @param {ExplainTransactionOptions} params given explain transaction params
     * @param {String} params.txHex raw transaction
     * @param {String} params.halfSigned.txHex raw half signed transaction
     * @param {TransactionFee} fee fee information
     * @returns Bluebird<TransactionExplanation>
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex || !params.feeInfo) {
            throw new Error('missing explain tx parameters');
        }
        const txBuilder = this.getBuilder().from(txHex);
        const tx = await txBuilder.build();
        if (!tx) {
            throw new sdk_core_1.InvalidTransactionError('Error while trying to build transaction');
        }
        const id = Buffer.from(tx.casperTx.hash).toString('hex');
        const amount = CsprLib.Utils.getTransferAmount(tx.casperTx.session);
        let transferId;
        const outputs = [];
        const operations = [];
        switch (tx.type) {
            case sdk_core_1.TransactionType.Send: {
                transferId = CsprLib.Utils.getTransferId(tx.casperTx.session);
                const toAddress = CsprLib.Utils.getTransferDestinationAddress(tx._deploy.session);
                outputs.push({
                    address: toAddress,
                    amount,
                    coin: this.getChain(),
                });
                break;
            }
            case sdk_core_1.TransactionType.StakingLock: {
                const validator = CsprLib.Utils.getValidatorAddress(tx._deploy.session);
                operations.push({
                    type: sdk_core_1.TransactionType.StakingLock,
                    amount,
                    coin: this.getChain(),
                    validator: validator,
                });
                break;
            }
            case sdk_core_1.TransactionType.StakingUnlock: {
                const validator = CsprLib.Utils.getValidatorAddress(tx._deploy.session);
                operations.push({
                    type: sdk_core_1.TransactionType.StakingUnlock,
                    amount,
                    coin: this.getChain(),
                    validator: validator,
                });
                break;
            }
            default: {
                throw new sdk_core_1.InvalidTransactionError('Error while trying to get transaction type');
            }
        }
        const outputAmount = outputs
            .reduce((acumulator, output) => {
            const currentValue = new bignumber_js_1.default(output.amount);
            return acumulator.plus(currentValue);
        }, new bignumber_js_1.default(0))
            .toFixed(0);
        const displayOrder = [
            'id',
            'outputAmount',
            'changeAmount',
            'outputs',
            'changeOutputs',
            'transferId',
            'fee',
            'operations',
        ];
        return {
            displayOrder,
            id,
            outputs,
            outputAmount,
            changeOutputs: [],
            changeAmount: '0',
            transferId,
            fee: params.feeInfo,
            operations,
        };
    }
    getBuilder() {
        return new CsprLib.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
    }
}
exports.Cspr = Cspr;
//# sourceMappingURL=data:application/json;base64,