"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const _ = __importStar(require("lodash"));
const casper_js_sdk_1 = require("casper-js-sdk");
const sdk_core_1 = require("@bitgo/sdk-core");
const keyPair_1 = require("./keyPair");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    canSign(key) {
        return true;
    }
    sign(keyPair) {
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new sdk_core_1.SigningError('Missing private key');
        }
        if (this._deploy.approvals.some((ap) => !ap.signer.startsWith(constants_1.SECP256K1_PREFIX) || !utils_1.isValidPublicKey(utils_1.removeAlgoPrefixFromHexValue(ap.signer)))) {
            throw new sdk_core_1.SigningError('Invalid deploy. Already signed with an invalid key');
        }
        const secpKeys = new casper_js_sdk_1.Keys.Secp256K1(Uint8Array.from(Buffer.from(keys.pub, 'hex')), Uint8Array.from(Buffer.from(keys.prv, 'hex')));
        const signedDeploy = casper_js_sdk_1.DeployUtil.signDeploy(this._deploy, secpKeys);
        this._signatures.push(signedDeploy.approvals[signedDeploy.approvals.length - 1].signature);
    }
    /**
     * Add a signature to this transaction and to and its deploy
     *
     * @param {string} signature The signature to add, in string hex format
     * @param {KeyPair} keyPair The key pair that created the signature
     */
    addSignature(signature, keyPair) {
        const pub = keyPair.getKeys().pub;
        const signatureBuffer = Uint8Array.from(Buffer.from(signature, 'hex'));
        const pubKeyBuffer = Uint8Array.from(Buffer.from(pub, 'hex'));
        const parsedPublicKey = casper_js_sdk_1.Keys.Secp256K1.parsePublicKey(pubKeyBuffer, 'raw');
        const pubKeyHex = casper_js_sdk_1.Keys.Secp256K1.accountHex(parsedPublicKey);
        if (utils_1.removeAlgoPrefixFromHexValue(pubKeyHex) !== pub) {
            throw new sdk_core_1.SigningError('Signer does not match signature');
        }
        const signedDeploy = casper_js_sdk_1.DeployUtil.setSignature(this._deploy, signatureBuffer, casper_js_sdk_1.CLPublicKey.fromSecp256K1(parsedPublicKey));
        const approval = _.last(signedDeploy.approvals);
        if (utils_1.removeAlgoPrefixFromHexValue(approval.signature) !== signature) {
            throw new sdk_core_1.SigningError('Invalid signature');
        }
        this._signatures.push(signature);
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this.casperTx) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const txJson = casper_js_sdk_1.DeployUtil.deployToJson(this.casperTx);
        // The new casper lib is converting the TTL from miliseconds to another date format, in this case 1 day
        // we need to leave it as ms for the HSM to be able to parse it
        txJson.deploy.header.ttl = `${this.casperTx.header.ttl}ms`;
        this.setOwnersInJson(txJson);
        this.setTransfersFieldsInJson(txJson);
        this.setDelegateFieldsInJson(txJson);
        return JSON.stringify(txJson);
    }
    /** @inheritdoc */
    toJson() {
        var _a;
        const deployPayment = (_a = this._deploy.payment.asModuleBytes()) === null || _a === void 0 ? void 0 : _a.getArgByName('amount');
        if (!deployPayment) {
            throw new sdk_core_1.InvalidTransactionError('Undefined fee');
        }
        const owner1Index = 0;
        const owner2Index = 1;
        const owner3Index = 2;
        const sourcePublicKey = Buffer.from(this._deploy.header.account.value()).toString('hex');
        const sourceAddress = new keyPair_1.KeyPair({ pub: sourcePublicKey }).getAddress();
        const result = {
            hash: Buffer.from(this._deploy.hash).toString('hex'),
            fee: { gasLimit: deployPayment.value().toString(), gasPrice: this._deploy.header.gasPrice.toString() },
            from: sourceAddress,
            startTime: new Date(this._deploy.header.timestamp).toISOString(),
            expiration: this._deploy.header.ttl,
            deployType: this._deploy.session.getArgByName(constants_1.TRANSACTION_TYPE).value(),
        };
        const transactionType = utils_1.getDeployType(this._deploy.session);
        switch (transactionType) {
            case sdk_core_1.TransactionType.Send:
                result.to = utils_1.getTransferDestinationAddress(this._deploy.session);
                result.amount = utils_1.getTransferAmount(this._deploy.session);
                result.transferId = utils_1.getTransferId(this._deploy.session);
                break;
            case sdk_core_1.TransactionType.WalletInitialization:
                result.owner1 = this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + owner1Index).value();
                result.owner2 = this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + owner2Index).value();
                result.owner3 = this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + owner3Index).value();
                break;
            case sdk_core_1.TransactionType.StakingLock:
                result.fromDelegate = utils_1.getDelegatorAddress(this.casperTx.session);
                result.validator = utils_1.getValidatorAddress(this.casperTx.session);
                result.amount = utils_1.getDelegateAmount(this.casperTx.session);
                break;
            case sdk_core_1.TransactionType.StakingUnlock:
                result.fromDelegate = utils_1.getDelegatorAddress(this.casperTx.session);
                result.validator = utils_1.getValidatorAddress(this.casperTx.session);
                result.amount = utils_1.getDelegateAmount(this.casperTx.session);
                break;
        }
        return result;
    }
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /**
     * Retrieve signatures from the deploy instance and load them into the signatures list
     */
    loadPreviousSignatures() {
        if (this._deploy.approvals && this._deploy.approvals.length > 0) {
            this._deploy.approvals.forEach((approval) => {
                this._signatures.push(approval.signature);
            });
        }
    }
    /**
     * Set owners inside a json representing a wallet initialization tx.
     *
     * @param {Record<string, any>} txJson json to modify
     */
    setOwnersInJson(txJson) {
        if (utils_1.getDeployType(this.casperTx.session) === sdk_core_1.TransactionType.WalletInitialization) {
            const argName = 0;
            const argValue = 1;
            const owner0 = 0;
            const owner1 = 1;
            const owner2 = 2;
            const ownersValues = new Map();
            ownersValues.set(constants_1.TRANSACTION_TYPE, this.casperTx.session.getArgByName(constants_1.TRANSACTION_TYPE).value());
            [owner0, owner1, owner2].forEach((index) => {
                ownersValues.set(constants_1.OWNER_PREFIX + index, this.casperTx.session.getArgByName(constants_1.OWNER_PREFIX + index).value());
            });
            txJson['deploy']['session']['ModuleBytes']['args'].forEach((arg) => {
                if (ownersValues.has(arg[argName])) {
                    arg[argValue]['parsed'] = ownersValues.get(arg[argName]);
                }
            });
        }
    }
    /**
     * Set transfer fields inside a json representing a transfer tx.
     *
     * @param {Record<string, any>} txJson json to modify
     */
    setTransfersFieldsInJson(txJson) {
        if (utils_1.getDeployType(this.casperTx.session) === sdk_core_1.TransactionType.Send) {
            const argName = 0;
            const argValue = 1;
            const transferValues = new Map();
            transferValues.set(constants_1.TRANSACTION_TYPE, this.casperTx.session.getArgByName(constants_1.TRANSACTION_TYPE).value());
            transferValues.set('amount', utils_1.getTransferAmount(this.casperTx.session));
            transferValues.set('to_address', utils_1.getTransferDestinationAddress(this.casperTx.session));
            const transferId = utils_1.getTransferId(this.casperTx.session);
            if (transferId !== undefined) {
                transferValues.set('id', transferId.toString());
            }
            txJson['deploy']['session']['Transfer']['args'].forEach((arg) => {
                if (transferValues.has(arg[argName])) {
                    arg[argValue]['parsed'] = transferValues.get(arg[argName]);
                }
            });
        }
    }
    /**
     * Set delegate / undelegate fields inside a json representing the tx.
     *
     * @param {Record<string, any>} txJson json to modify
     */
    setDelegateFieldsInJson(txJson) {
        if (utils_1.getDeployType(this.casperTx.session) === sdk_core_1.TransactionType.StakingLock ||
            utils_1.getDeployType(this.casperTx.session) === sdk_core_1.TransactionType.StakingUnlock) {
            const argName = 0;
            const argValue = 1;
            const delegateValues = new Map();
            delegateValues.set(constants_1.TRANSACTION_TYPE, this.casperTx.session.getArgByName(constants_1.TRANSACTION_TYPE).value());
            delegateValues.set('amount', utils_1.getDelegateAmount(this.casperTx.session));
            delegateValues.set(constants_1.DELEGATE_FROM_ADDRESS, utils_1.getDelegatorAddress(this.casperTx.session));
            delegateValues.set(constants_1.DELEGATE_VALIDATOR, utils_1.getValidatorAddress(this.casperTx.session));
            txJson.deploy.session.ModuleBytes.args.forEach((arg) => {
                if (delegateValues.has(arg[argName])) {
                    arg[argValue]['parsed'] = delegateValues.get(arg[argName]);
                }
            });
        }
    }
    get casperTx() {
        return this._deploy;
    }
    set casperTx(deploy) {
        this._deploy = deploy;
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,