"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UndelegateBuilder = void 0;
const casper_js_sdk_1 = require("casper-js-sdk");
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
class UndelegateBuilder extends transactionBuilder_1.TransactionBuilder {
    /**
     * Public constructor.
     *
     * @param {CoinConfig} _coinConfig Coin configuration object
     */
    constructor(_coinConfig) {
        super(_coinConfig);
        this._action = constants_1.UNDELEGATE_CONTRACT_ACTION;
        this._contract = Uint8Array.from(Buffer.from(utils_1.casperContractHexCode, 'hex'));
    }
    /** @inheritdoc */
    async buildImplementation() {
        this._validator = this._validator || constants_1.DELEGATE_VALIDATOR_ACCOUNT;
        const args = this.buildUndelegateParameters();
        const extraArguments = new Map();
        extraArguments.set(constants_1.TRANSACTION_TYPE, casper_js_sdk_1.CLValueBuilder.string(sdk_core_1.TransactionType[sdk_core_1.TransactionType.StakingUnlock]));
        extraArguments.set(constants_1.STAKING_TYPE, casper_js_sdk_1.CLValueBuilder.string(sdk_core_1.StakingOperationTypes[sdk_core_1.StakingOperationTypes.UNLOCK]));
        extraArguments.set(constants_1.DELEGATE_FROM_ADDRESS, casper_js_sdk_1.CLValueBuilder.string(this._source.address));
        extraArguments.set(constants_1.DELEGATE_VALIDATOR, casper_js_sdk_1.CLValueBuilder.string(this._validator));
        this._session = {
            moduleBytes: this._contract,
            args: casper_js_sdk_1.RuntimeArgs.fromMap(args),
            extraArguments: extraArguments,
        };
        this.transaction.setTransactionType(sdk_core_1.TransactionType.StakingUnlock);
        return await super.buildImplementation();
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        this.transaction.setTransactionType(sdk_core_1.TransactionType.StakingUnlock);
        this.validator(utils_1.getValidatorAddress(tx.casperTx.session));
        this.amount(utils_1.getTransferAmount(tx.casperTx.session));
    }
    /** @inheritdoc */
    signImplementation(key) {
        if (this._multiSignerKeyPairs.length >= transactionBuilder_1.DEFAULT_M) {
            throw new sdk_core_1.SigningError('A maximum of ' + transactionBuilder_1.DEFAULT_M + ' can sign the transaction.');
        }
        return super.signImplementation(key);
    }
    /**
     * Build args needed to create a session, then we can send this session with the contract
     *
     * @returns {DelegateUndelegateContractArgs} contracts args to create a session
     */
    buildUndelegateParameters() {
        const delegator = casper_js_sdk_1.CLPublicKey.fromHex(this._source.address);
        const validator = casper_js_sdk_1.CLPublicKey.fromHex(this._validator);
        return {
            action: casper_js_sdk_1.CLValueBuilder.string(this._action),
            delegator: casper_js_sdk_1.CLValueBuilder.publicKey(delegator.value(), delegator.tag),
            validator: casper_js_sdk_1.CLValueBuilder.publicKey(validator.value(), validator.tag),
            amount: casper_js_sdk_1.CLValueBuilder.u512(this._amount),
        };
    }
    // region Transfer fields
    /**
     * Set the destination address where the funds will be sent,
     *
     * @param {string} address the 68 bits address to transfer funds to
     * @returns {UndelegateBuilder} the builder with the new parameter set
     */
    validator(address) {
        if (!utils_1.isValidAddress(address)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid address');
        }
        this._validator = address;
        return this;
    }
    /**
     * Set the amount to be transferred
     *
     * @param {string} amount amount to transfer
     * @returns {UndelegateBuilder} the builder with the new parameter set
     */
    amount(amount) {
        if (!utils_1.isValidDelegateAmount(amount)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid amount');
        }
        this._amount = amount;
        return this;
    }
    // endregion
    // region Validators
    /**
     * Validate mandatory fields in the class
     *
     * @throws {Error} In case of missing or invalid fields
     */
    validateMandatoryFields() {
        if (!this._amount) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing amount');
        }
        if (!utils_1.isValidDelegateAmount(this._amount)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid amount');
        }
        super.validateMandatoryFields();
    }
}
exports.UndelegateBuilder = UndelegateBuilder;
//# sourceMappingURL=data:application/json;base64,