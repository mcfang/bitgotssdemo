"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
const casper_js_sdk_1 = require("casper-js-sdk");
const sdk_core_1 = require("@bitgo/sdk-core");
const walletInitializationBuilder_1 = require("./walletInitializationBuilder");
const transferBuilder_1 = require("./transferBuilder");
const transaction_1 = require("./transaction");
const utils_1 = require("./utils");
const delegateBuilder_1 = require("./delegateBuilder");
const undelegateBuilder_1 = require("./undelegateBuilder");
class TransactionBuilderFactory extends sdk_core_1.BaseTransactionBuilderFactory {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    getWalletInitializationBuilder(tx) {
        return this.initializeBuilder(tx, new walletInitializationBuilder_1.WalletInitializationBuilder(this._coinConfig));
    }
    /**
     * Initialize an undelegate builder
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @returns {UndelegateBuilder} the builder initialized
     */
    getUndelegateBuilder(tx) {
        return this.initializeBuilder(tx, new undelegateBuilder_1.UndelegateBuilder(this._coinConfig));
    }
    /**
     * Initialize an delegate builder
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @returns {DelegateBuilder} the builder initialized
     */
    getDelegateBuilder(tx) {
        return this.initializeBuilder(tx, new delegateBuilder_1.DelegateBuilder(this._coinConfig));
    }
    /** @inheritDoc */
    getTransferBuilder(tx) {
        return this.initializeBuilder(tx, new transferBuilder_1.TransferBuilder(this._coinConfig));
    }
    /** @inheritDoc */
    from(raw) {
        this.validateRawTransaction(raw);
        const tx = new transaction_1.Transaction(this._coinConfig);
        const deployJson = JSON.parse(raw);
        try {
            tx.casperTx = casper_js_sdk_1.DeployUtil.deployFromJson(deployJson).unwrap();
        }
        catch (e) {
            throw new sdk_core_1.InvalidTransactionError('Invalid transaction: ' + e);
        }
        const casperDeployType = utils_1.getDeployType(tx.casperTx.session);
        switch (casperDeployType) {
            case sdk_core_1.TransactionType.Send:
                return this.getTransferBuilder(tx);
            case sdk_core_1.TransactionType.WalletInitialization:
                return this.getWalletInitializationBuilder(tx);
            case sdk_core_1.TransactionType.StakingLock:
                return this.getDelegateBuilder(tx);
            case sdk_core_1.TransactionType.StakingUnlock:
                return this.getUndelegateBuilder(tx);
            default:
                throw new sdk_core_1.InvalidTransactionError('Invalid transaction ' + tx.casperTx);
        }
    }
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    initializeBuilder(tx, builder) {
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    }
    /**
     * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
     *
     * @param {any} rawTransaction - Transaction in any format
     */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.ParseTransactionError('Invalid raw transaction: Undefined');
        }
        try {
            JSON.parse(rawTransaction);
        }
        catch (e) {
            throw new sdk_core_1.ParseTransactionError('Invalid raw transaction format');
        }
    }
}
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,