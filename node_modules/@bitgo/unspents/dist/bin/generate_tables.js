"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs/promises"));
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const src_1 = require("../src");
const headers = [
    'Script Type',
    'Chain Codes',
    'Spend Type',
    'Input Size (Virtual Bytes)',
    'Relative Size (p2trMusig2 = 1.00)',
];
const relativeCostRef = src_1.Dimensions.fromScriptType('taprootKeyPathSpend').getInputsVSize();
function formatMarkdownTable(headers, rows) {
    return [headers, headers.map(() => '---'), ...rows].map((row) => `| ${row.join(' | ')} |`).join('\n');
}
function generateRowsForScriptType(headers, t, params) {
    var _a;
    const chainCode = utxolib.bitgo.toChainPair(t);
    if (!params) {
        if (t === 'p2tr') {
            return [
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Script Path, Level 2 (Backup/User, Backup/BitGo)',
                    scriptTypeParams: { scriptPathLevel: 2 },
                }),
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Script Path, Level 1 (User/BitGo)',
                    scriptTypeParams: { scriptPathLevel: 1 },
                }),
            ];
        }
        if (t === 'p2trMusig2') {
            return [
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Script Path (Backup/User, Backup/BitGo)',
                    scriptTypeParams: { scriptPathLevel: 1 },
                }),
                ...generateRowsForScriptType(headers, t, {
                    spendTypeName: 'Key Path (User/BitGo)',
                    scriptTypeParams: { scriptPathLevel: undefined },
                }),
            ];
        }
    }
    const inputVSize = src_1.Dimensions.fromScriptType(t, params === null || params === void 0 ? void 0 : params.scriptTypeParams).getInputsVSize();
    const row = [
        t,
        chainCode.join(`/`),
        (_a = params === null || params === void 0 ? void 0 : params.spendTypeName) !== null && _a !== void 0 ? _a : 'all',
        inputVSize.toString(),
        (inputVSize / relativeCostRef).toFixed(2),
    ];
    return [row];
}
function generateTables() {
    const scriptTypes = [...utxolib.bitgo.outputScripts.scriptTypes2Of3];
    return formatMarkdownTable(headers, scriptTypes.flatMap((s) => generateRowsForScriptType(headers, s)));
}
function generateDocument() {
    return [
        '# Input Costs',
        'This document contains the worst-case input costs for various script types and spend types.',
        'The input costs are calculated using the `Dimensions` class from `@bitgo/unspents`.',
        '',
        generateTables(),
    ].join('\n');
}
if (require.main === module) {
    const outfile = 'docs/input-costs.md';
    fs.writeFile(outfile, generateDocument())
        .then(() => console.log('wrote to', outfile))
        .catch((e) => console.error(e));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfdGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vYmluL2dlbmVyYXRlX3RhYmxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnREFBa0M7QUFDbEMseURBQTJDO0FBRTNDLGdDQUFvQztBQUVwQyxNQUFNLE9BQU8sR0FBRztJQUNkLGFBQWE7SUFDYixhQUFhO0lBQ2IsWUFBWTtJQUNaLDRCQUE0QjtJQUM1QixtQ0FBbUM7Q0FDcEMsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFHLGdCQUFVLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFJMUYsU0FBUyxtQkFBbUIsQ0FBQyxPQUFpQixFQUFFLElBQWdCO0lBQzlELE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEcsQ0FBQztBQUVELFNBQVMseUJBQXlCLENBQ2hDLE9BQWlCLEVBQ2pCLENBQTZDLEVBQzdDLE1BR0M7O0lBRUQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0MsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLElBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRTtZQUNoQixPQUFPO2dCQUNMLEdBQUcseUJBQXlCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtvQkFDdkMsYUFBYSxFQUFFLGtEQUFrRDtvQkFDakUsZ0JBQWdCLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFO2lCQUN6QyxDQUFDO2dCQUNGLEdBQUcseUJBQXlCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtvQkFDdkMsYUFBYSxFQUFFLG1DQUFtQztvQkFDbEQsZ0JBQWdCLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFO2lCQUN6QyxDQUFDO2FBQ0gsQ0FBQztTQUNIO1FBRUQsSUFBSSxDQUFDLEtBQUssWUFBWSxFQUFFO1lBQ3RCLE9BQU87Z0JBQ0wsR0FBRyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO29CQUN2QyxhQUFhLEVBQUUseUNBQXlDO29CQUN4RCxnQkFBZ0IsRUFBRSxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUU7aUJBQ3pDLENBQUM7Z0JBQ0YsR0FBRyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO29CQUN2QyxhQUFhLEVBQUUsdUJBQXVCO29CQUN0QyxnQkFBZ0IsRUFBRSxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUU7aUJBQ2pELENBQUM7YUFDSCxDQUFDO1NBQ0g7S0FDRjtJQUVELE1BQU0sVUFBVSxHQUFHLGdCQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsZ0JBQWdCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzRixNQUFNLEdBQUcsR0FBUTtRQUNmLENBQUM7UUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNuQixNQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxhQUFhLG1DQUFJLEtBQUs7UUFDOUIsVUFBVSxDQUFDLFFBQVEsRUFBRTtRQUNyQixDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQzFDLENBQUM7SUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBUyxjQUFjO0lBQ3JCLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNyRSxPQUFPLG1CQUFtQixDQUN4QixPQUFPLEVBQ1AsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ2xFLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxnQkFBZ0I7SUFDdkIsT0FBTztRQUNMLGVBQWU7UUFDZiw2RkFBNkY7UUFDN0YscUZBQXFGO1FBQ3JGLEVBQUU7UUFDRixjQUFjLEVBQUU7S0FDakIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZixDQUFDO0FBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtJQUMzQixNQUFNLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQztJQUN0QyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDO1NBQ3RDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNuQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCAqIGFzIHV0eG9saWIgZnJvbSAnQGJpdGdvL3V0eG8tbGliJztcblxuaW1wb3J0IHsgRGltZW5zaW9ucyB9IGZyb20gJy4uL3NyYyc7XG5cbmNvbnN0IGhlYWRlcnMgPSBbXG4gICdTY3JpcHQgVHlwZScsXG4gICdDaGFpbiBDb2RlcycsXG4gICdTcGVuZCBUeXBlJyxcbiAgJ0lucHV0IFNpemUgKFZpcnR1YWwgQnl0ZXMpJyxcbiAgJ1JlbGF0aXZlIFNpemUgKHAydHJNdXNpZzIgPSAxLjAwKScsXG5dO1xuXG5jb25zdCByZWxhdGl2ZUNvc3RSZWYgPSBEaW1lbnNpb25zLmZyb21TY3JpcHRUeXBlKCd0YXByb290S2V5UGF0aFNwZW5kJykuZ2V0SW5wdXRzVlNpemUoKTtcblxudHlwZSBSb3cgPSBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmddO1xuXG5mdW5jdGlvbiBmb3JtYXRNYXJrZG93blRhYmxlKGhlYWRlcnM6IHN0cmluZ1tdLCByb3dzOiBzdHJpbmdbXVtdKTogc3RyaW5nIHtcbiAgcmV0dXJuIFtoZWFkZXJzLCBoZWFkZXJzLm1hcCgoKSA9PiAnLS0tJyksIC4uLnJvd3NdLm1hcCgocm93KSA9PiBgfCAke3Jvdy5qb2luKCcgfCAnKX0gfGApLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVJvd3NGb3JTY3JpcHRUeXBlKFxuICBoZWFkZXJzOiBzdHJpbmdbXSxcbiAgdDogdXR4b2xpYi5iaXRnby5vdXRwdXRTY3JpcHRzLlNjcmlwdFR5cGUyT2YzLFxuICBwYXJhbXM/OiB7XG4gICAgc3BlbmRUeXBlTmFtZTogc3RyaW5nO1xuICAgIHNjcmlwdFR5cGVQYXJhbXM6IHsgc2NyaXB0UGF0aExldmVsPzogbnVtYmVyIH07XG4gIH1cbik6IFJvd1tdIHtcbiAgY29uc3QgY2hhaW5Db2RlID0gdXR4b2xpYi5iaXRnby50b0NoYWluUGFpcih0KTtcblxuICBpZiAoIXBhcmFtcykge1xuICAgIGlmICh0ID09PSAncDJ0cicpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIC4uLmdlbmVyYXRlUm93c0ZvclNjcmlwdFR5cGUoaGVhZGVycywgdCwge1xuICAgICAgICAgIHNwZW5kVHlwZU5hbWU6ICdTY3JpcHQgUGF0aCwgTGV2ZWwgMiAoQmFja3VwL1VzZXIsIEJhY2t1cC9CaXRHbyknLFxuICAgICAgICAgIHNjcmlwdFR5cGVQYXJhbXM6IHsgc2NyaXB0UGF0aExldmVsOiAyIH0sXG4gICAgICAgIH0pLFxuICAgICAgICAuLi5nZW5lcmF0ZVJvd3NGb3JTY3JpcHRUeXBlKGhlYWRlcnMsIHQsIHtcbiAgICAgICAgICBzcGVuZFR5cGVOYW1lOiAnU2NyaXB0IFBhdGgsIExldmVsIDEgKFVzZXIvQml0R28pJyxcbiAgICAgICAgICBzY3JpcHRUeXBlUGFyYW1zOiB7IHNjcmlwdFBhdGhMZXZlbDogMSB9LFxuICAgICAgICB9KSxcbiAgICAgIF07XG4gICAgfVxuXG4gICAgaWYgKHQgPT09ICdwMnRyTXVzaWcyJykge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uZ2VuZXJhdGVSb3dzRm9yU2NyaXB0VHlwZShoZWFkZXJzLCB0LCB7XG4gICAgICAgICAgc3BlbmRUeXBlTmFtZTogJ1NjcmlwdCBQYXRoIChCYWNrdXAvVXNlciwgQmFja3VwL0JpdEdvKScsXG4gICAgICAgICAgc2NyaXB0VHlwZVBhcmFtczogeyBzY3JpcHRQYXRoTGV2ZWw6IDEgfSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLmdlbmVyYXRlUm93c0ZvclNjcmlwdFR5cGUoaGVhZGVycywgdCwge1xuICAgICAgICAgIHNwZW5kVHlwZU5hbWU6ICdLZXkgUGF0aCAoVXNlci9CaXRHbyknLFxuICAgICAgICAgIHNjcmlwdFR5cGVQYXJhbXM6IHsgc2NyaXB0UGF0aExldmVsOiB1bmRlZmluZWQgfSxcbiAgICAgICAgfSksXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGlucHV0VlNpemUgPSBEaW1lbnNpb25zLmZyb21TY3JpcHRUeXBlKHQsIHBhcmFtcz8uc2NyaXB0VHlwZVBhcmFtcykuZ2V0SW5wdXRzVlNpemUoKTtcbiAgY29uc3Qgcm93OiBSb3cgPSBbXG4gICAgdCxcbiAgICBjaGFpbkNvZGUuam9pbihgL2ApLFxuICAgIHBhcmFtcz8uc3BlbmRUeXBlTmFtZSA/PyAnYWxsJyxcbiAgICBpbnB1dFZTaXplLnRvU3RyaW5nKCksXG4gICAgKGlucHV0VlNpemUgLyByZWxhdGl2ZUNvc3RSZWYpLnRvRml4ZWQoMiksXG4gIF07XG4gIHJldHVybiBbcm93XTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVUYWJsZXMoKSB7XG4gIGNvbnN0IHNjcmlwdFR5cGVzID0gWy4uLnV0eG9saWIuYml0Z28ub3V0cHV0U2NyaXB0cy5zY3JpcHRUeXBlczJPZjNdO1xuICByZXR1cm4gZm9ybWF0TWFya2Rvd25UYWJsZShcbiAgICBoZWFkZXJzLFxuICAgIHNjcmlwdFR5cGVzLmZsYXRNYXAoKHMpID0+IGdlbmVyYXRlUm93c0ZvclNjcmlwdFR5cGUoaGVhZGVycywgcykpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRG9jdW1lbnQoKSB7XG4gIHJldHVybiBbXG4gICAgJyMgSW5wdXQgQ29zdHMnLFxuICAgICdUaGlzIGRvY3VtZW50IGNvbnRhaW5zIHRoZSB3b3JzdC1jYXNlIGlucHV0IGNvc3RzIGZvciB2YXJpb3VzIHNjcmlwdCB0eXBlcyBhbmQgc3BlbmQgdHlwZXMuJyxcbiAgICAnVGhlIGlucHV0IGNvc3RzIGFyZSBjYWxjdWxhdGVkIHVzaW5nIHRoZSBgRGltZW5zaW9uc2AgY2xhc3MgZnJvbSBgQGJpdGdvL3Vuc3BlbnRzYC4nLFxuICAgICcnLFxuICAgIGdlbmVyYXRlVGFibGVzKCksXG4gIF0uam9pbignXFxuJyk7XG59XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBjb25zdCBvdXRmaWxlID0gJ2RvY3MvaW5wdXQtY29zdHMubWQnO1xuICBmcy53cml0ZUZpbGUob3V0ZmlsZSwgZ2VuZXJhdGVEb2N1bWVudCgpKVxuICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCd3cm90ZSB0bycsIG91dGZpbGUpKVxuICAgIC5jYXRjaCgoZSkgPT4gY29uc29sZS5lcnJvcihlKSk7XG59XG4iXX0=