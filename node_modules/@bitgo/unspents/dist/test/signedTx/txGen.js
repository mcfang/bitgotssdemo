"use strict";
/* eslint-disable @typescript-eslint/ban-ts-comment */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSignedTransactions = exports.runCombinations = exports.Histogram = exports.TxCombo = exports.createScriptPubKey = void 0;
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const lodash_1 = __importDefault(require("lodash"));
require("lodash.combinations");
const src_1 = require("../../src");
const testutils_1 = require("../testutils");
function createUnspent(pubkeys, inputType, value) {
    let spendableScript;
    const scriptType = inputType === 'taprootKeyPathSpend' ? 'p2trMusig2' : inputType;
    if (scriptType === testutils_1.UnspentTypeP2shP2pk) {
        spendableScript = utxolib.bitgo.outputScripts.createOutputScriptP2shP2pk(pubkeys[0]);
    }
    else if (utxolib.bitgo.outputScripts.isScriptType2Of3(scriptType)) {
        spendableScript = utxolib.bitgo.outputScripts.createOutputScript2of3(pubkeys, scriptType);
    }
    else {
        throw new Error(`unexpected inputType ${scriptType}`);
    }
    return {
        ...spendableScript,
        value,
        inputType: scriptType,
    };
}
/**
 *
 * @param keys - Pubkeys to use for generating the address.
 *               If unspentType is one of UnspentTypePubKeyHash is used, the first key will be used.
 * @param unspentType {String} - one of UnspentTypeScript2of3 or UnspentTypePubKeyHash
 * @return {String} address
 */
const createScriptPubKey = (keys, unspentType) => {
    const pubkeys = keys.map((key) => key.publicKey);
    if (typeof unspentType === 'string' && unspentType in testutils_1.UnspentTypeScript2of3) {
        return createUnspent(pubkeys, unspentType, 0).scriptPubKey;
    }
    const pkHash = utxolib.crypto.hash160(pubkeys[0]);
    switch (unspentType) {
        case testutils_1.UnspentTypePubKeyHash.p2pkh:
            return utxolib.payments.p2pkh({ hash: pkHash }).output;
        case testutils_1.UnspentTypePubKeyHash.p2wpkh:
            return utxolib.payments.p2wpkh({ hash: pkHash }).output;
    }
    if (unspentType instanceof testutils_1.UnspentTypeOpReturn) {
        const payload = Buffer.alloc(unspentType.size).fill(pubkeys[0]);
        return utxolib.script.compile([0x6a, payload]);
    }
    throw new Error(`unsupported output type ${unspentType}`);
};
exports.createScriptPubKey = createScriptPubKey;
const createInputTx = (unspents, inputValue) => {
    const txInputBuilder = new utxolib.bitgo.UtxoTransactionBuilder(utxolib.networks.bitcoin);
    txInputBuilder.addInput(Array(32).fill('01').join(''), 0);
    unspents.forEach(({ scriptPubKey }) => txInputBuilder.addOutput(scriptPubKey, inputValue));
    return txInputBuilder.buildIncomplete();
};
function signInput(txBuilder, index, walletKeys, unspent, signKeys = unspent.inputType === 'p2shP2pk' ? [walletKeys[0]] : [walletKeys[0], walletKeys[2]]) {
    signKeys.forEach((keyPair) => {
        if (unspent.inputType === 'p2shP2pk') {
            utxolib.bitgo.signInputP2shP2pk(txBuilder, index, keyPair);
        }
        else {
            if (signKeys.length !== 2) {
                throw new Error(`invalid signKeys length`);
            }
            const cosigner = keyPair === signKeys[0] ? signKeys[1] : signKeys[0];
            utxolib.bitgo.signInput2Of3(txBuilder, index, unspent.inputType, walletKeys.map((k) => k.publicKey), keyPair, cosigner.publicKey, unspent.value);
        }
    });
}
class TxCombo {
    constructor(walletKeys, inputTypes, outputTypes, expectedDims = src_1.Dimensions.ZERO, signKeys, inputValue = 10) {
        this.walletKeys = walletKeys;
        this.inputTypes = inputTypes;
        this.outputTypes = outputTypes;
        this.expectedDims = expectedDims;
        this.signKeys = signKeys;
        this.inputValue = inputValue;
        this.unspents = inputTypes.map((inputType) => createUnspent(walletKeys.map((key) => key.publicKey), inputType, this.inputValue));
        this.inputTx = createInputTx(this.unspents, inputValue);
    }
    getBuilderWithUnsignedTx() {
        const txBuilder = utxolib.bitgo.createTransactionBuilderForNetwork(utxolib.networks.bitcoin);
        this.inputTx.outs.forEach(({}, i) => txBuilder.addInput(this.inputTx, i));
        this.outputTypes.forEach((unspentType) => txBuilder.addOutput(exports.createScriptPubKey(this.walletKeys, unspentType), this.inputValue));
        return txBuilder;
    }
    getUnsignedTx() {
        return this.getBuilderWithUnsignedTx().buildIncomplete();
    }
    getSignedTx() {
        const txBuilder = this.getBuilderWithUnsignedTx();
        this.unspents.forEach((unspent, i) => {
            signInput(txBuilder, i, this.walletKeys, unspent, this.signKeys);
        });
        return txBuilder.build();
    }
}
exports.TxCombo = TxCombo;
const runCombinations = ({ inputTypes, maxNInputs, outputTypes, maxNOutputs, }, callback) => {
    // Create combinations of different input and output types. Length between 1 and 3.
    const inputCombinations = lodash_1.default.flatten(
    // @ts-ignore
    [...Array(maxNInputs)].map((__, i) => lodash_1.default.combinations(inputTypes, i + 1)));
    const outputCombinations = lodash_1.default.flatten(
    // @ts-ignore
    [...Array(maxNOutputs)].map((__, i) => lodash_1.default.combinations(outputTypes, i + 1)));
    inputCombinations.forEach((inputTypeCombo) => outputCombinations.forEach((outputTypeCombo) => {
        callback(inputTypeCombo, outputTypeCombo);
    }));
};
exports.runCombinations = runCombinations;
class Histogram {
    constructor(map = new Map()) {
        this.map = map;
        this.total = 0;
    }
    add(size) {
        this.map.set(size, (this.map.get(size) || 0) + 1);
        this.total++;
    }
    asSortedArray() {
        return [...this.map.entries()].sort(([a], [b]) => a - b);
    }
    asFullSortedArray() {
        return lodash_1.default.range(this.getPercentile(0), this.getPercentile(1)).map((v) => [v, this.map.get(v) || 0]);
    }
    getPercentile(p) {
        if (0 > p || p > 1) {
            throw new Error(`p must be between 0 and 1`);
        }
        let sum = 0;
        for (const [k, v] of this.asSortedArray()) {
            sum += v;
            if (sum / this.total >= p) {
                return k;
            }
        }
        throw new Error('could not find percentile');
    }
    toString() {
        const keys = [...this.map.keys()].sort((a, b) => a - b);
        return `[${keys.map((k) => `[${k}, ${this.map.get(k)}]`).join(' ')}]`;
    }
}
exports.Histogram = Histogram;
const getKeyTriplets = (prefix, count) => [...Array(count)].map((v, i) => [1, 2, 3].map((j) => utxo_lib_1.bip32.fromSeed(Buffer.alloc(16, `${prefix}/${i}/${j}`), utxolib.networks.bitcoin)));
/**
 *
 * Calls `callback` with a variety of signed txs, based on input parameters
 * Callback arguments are
 *   inputType, inputCount, outputType, txs
 *  where `txs` implements `forEach()`
 *
 * @param inputTypes - input types to test
 * @param nInputKeyTriplets - number of different input key triples to cycle through
 * @param outputTypes - output types to test
 * @param nOutputKeyTriplets - number of different output key triplets to cycle through
 * @param callback
 */
const runSignedTransactions = ({ inputTypes, nInputKeyTriplets, outputTypes, nOutputKeyTriplets, }, callback) => {
    const inputKeyTriplets = getKeyTriplets('test/input/', nInputKeyTriplets);
    const outputKeyTriplets = getKeyTriplets('test/output/', nOutputKeyTriplets);
    const outputValue = 1e8;
    inputTypes.forEach(({ inputType, count: inputCount }) => {
        const inputTxs = inputKeyTriplets.map((inputKeys) => {
            const unspents = [...Array(inputCount)].map(() => createUnspent(inputKeys.map((key) => key.publicKey), inputType, outputValue));
            const inputTx = createInputTx(unspents, outputValue);
            return { inputKeys, unspents, inputTx };
        });
        outputTypes.forEach((outputType) => {
            const outputs = outputKeyTriplets.map((outputKeys) => exports.createScriptPubKey(outputKeys, outputType));
            const txs = {
                forEach(cb) {
                    inputTxs.forEach(({ inputKeys, unspents, inputTx }) => {
                        outputs.forEach((scriptPubKey) => {
                            const txBuilder = utxolib.bitgo.createTransactionBuilderForNetwork(utxolib.networks.bitcoin);
                            inputTx.outs.forEach((v, i) => txBuilder.addInput(inputTx, i));
                            txBuilder.addOutput(scriptPubKey, outputValue);
                            unspents.forEach((unspent, i) => {
                                signInput(txBuilder, i, inputKeys, unspent);
                            });
                            cb(txBuilder.build());
                        });
                    });
                },
            };
            callback(inputType, inputCount, outputType, txs);
        });
    });
};
exports.runSignedTransactions = runSignedTransactions;
//# sourceMappingURL=data:application/json;base64,