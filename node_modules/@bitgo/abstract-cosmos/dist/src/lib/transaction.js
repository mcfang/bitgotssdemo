"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmosTransaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const encoding_1 = require("@cosmjs/encoding");
const proto_signing_1 = require("@cosmjs/proto-signing");
const tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
const constants_1 = require("./constants");
class CosmosTransaction extends sdk_core_1.BaseTransaction {
    constructor(_coinConfig, utils) {
        super(_coinConfig);
        this._utils = utils;
    }
    get cosmosLikeTransaction() {
        return this._cosmosLikeTransaction;
    }
    set cosmosLikeTransaction(cosmosLikeTransaction) {
        this._cosmosLikeTransaction = cosmosLikeTransaction;
    }
    get chainId() {
        return this._chainId;
    }
    set chainId(chainId) {
        this._chainId = chainId;
    }
    get accountNumber() {
        return this._accountNumber;
    }
    set accountNumber(accountNumber) {
        this._accountNumber = accountNumber;
    }
    /** @inheritDoc **/
    get id() {
        var _a;
        if (this._id) {
            return this._id;
        }
        else if (((_a = this._cosmosLikeTransaction) === null || _a === void 0 ? void 0 : _a.hash) !== undefined) {
            return this._cosmosLikeTransaction.hash;
        }
        return constants_1.UNAVAILABLE_TEXT;
    }
    /** @inheritdoc */
    canSign(key) {
        return true;
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._cosmosLikeTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        return this.serialize();
    }
    /** @inheritdoc */
    toJson() {
        if (!this._cosmosLikeTransaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        const tx = this._cosmosLikeTransaction;
        return {
            id: this.id,
            type: this._type,
            sequence: tx.sequence,
            sendMessages: tx.sendMessages,
            gasBudget: tx.gasBudget,
            publicKey: tx.publicKey,
            signature: tx.signature,
            accountNumber: this._accountNumber,
            chainId: this._chainId,
            hash: tx.hash,
            memo: tx.memo,
        };
    }
    /**
     * Add a signature to the transaction
     * @param {string} signature in hex format
     */
    addSignature(signature) {
        this._signatures = [];
        this._signatures.push(signature);
    }
    /** @inheritDoc */
    explainTransaction() {
        const result = this.toJson();
        const displayOrder = ['id', 'outputs', 'outputAmount', 'changeOutputs', 'changeAmount', 'fee', 'type'];
        const outputs = [];
        const explanationResult = {
            displayOrder,
            id: this.id,
            outputs,
            outputAmount: '0',
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: this.cosmosLikeTransaction.gasBudget.amount[0].amount },
            type: this.type,
        };
        return this.explainTransactionInternal(result, explanationResult);
    }
    /**
     * Set the transaction type.
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    set transactionType(transactionType) {
        this._type = transactionType;
    }
    /**
     * Serialize the transaction to a JSON string
     * @returns {string} serialized base64 encoded transaction
     */
    serialize() {
        var _a;
        const txRaw = this._utils.createTxRawFromCosmosLikeTransaction(this.cosmosLikeTransaction);
        if (((_a = this.cosmosLikeTransaction) === null || _a === void 0 ? void 0 : _a.publicKey) !== undefined && this._signatures.length > 0) {
            const signedRawTx = this._utils.createSignedTxRaw(this.cosmosLikeTransaction.publicKey, this._signatures[0], txRaw);
            return encoding_1.toBase64(tx_1.TxRaw.encode(signedRawTx).finish());
        }
        return encoding_1.toBase64(tx_1.TxRaw.encode(txRaw).finish());
    }
    /** @inheritdoc **/
    get signablePayload() {
        return Buffer.from(proto_signing_1.makeSignBytes(this._utils.createSignDoc(this.cosmosLikeTransaction, this._accountNumber, this._chainId)));
    }
    /**
     * Returns a complete explanation for a transfer transaction
     * Currently only supports one message per transfer.
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainTransactionInternal(json, explanationResult) {
        let outputs;
        let outputAmount;
        switch (json.type) {
            case sdk_core_1.TransactionType.Send:
                explanationResult.type = sdk_core_1.TransactionType.Send;
                outputAmount = BigInt(0);
                outputs = json.sendMessages.map((message) => {
                    const sendMessage = message.value;
                    outputAmount = outputAmount + BigInt(sendMessage.amount[0].amount);
                    return {
                        address: sendMessage.toAddress,
                        amount: sendMessage.amount[0].amount,
                    };
                });
                break;
            case sdk_core_1.TransactionType.StakingActivate:
                explanationResult.type = sdk_core_1.TransactionType.StakingActivate;
                outputAmount = BigInt(0);
                outputs = json.sendMessages.map((message) => {
                    const delegateMessage = message.value;
                    outputAmount = outputAmount + BigInt(delegateMessage.amount.amount);
                    return {
                        address: delegateMessage.validatorAddress,
                        amount: delegateMessage.amount.amount,
                    };
                });
                break;
            case sdk_core_1.TransactionType.StakingDeactivate:
                explanationResult.type = sdk_core_1.TransactionType.StakingDeactivate;
                outputAmount = BigInt(0);
                outputs = json.sendMessages.map((message) => {
                    const delegateMessage = message.value;
                    outputAmount = outputAmount + BigInt(delegateMessage.amount.amount);
                    return {
                        address: delegateMessage.validatorAddress,
                        amount: delegateMessage.amount.amount,
                    };
                });
                break;
            case sdk_core_1.TransactionType.StakingWithdraw:
                explanationResult.type = sdk_core_1.TransactionType.StakingWithdraw;
                outputs = json.sendMessages.map((message) => {
                    const withdrawMessage = message.value;
                    return {
                        address: withdrawMessage.validatorAddress,
                        amount: constants_1.UNAVAILABLE_TEXT,
                    };
                });
                break;
            case sdk_core_1.TransactionType.ContractCall:
                explanationResult.type = sdk_core_1.TransactionType.ContractCall;
                outputAmount = BigInt(0);
                outputs = json.sendMessages.map((message) => {
                    var _a, _b, _c, _d, _e, _f;
                    const executeContractMessage = message.value;
                    outputAmount = outputAmount + BigInt((_c = (_b = (_a = executeContractMessage.funds) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.amount) !== null && _c !== void 0 ? _c : '0');
                    return {
                        address: executeContractMessage.contract,
                        amount: (_f = (_e = (_d = executeContractMessage.funds) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.amount) !== null && _f !== void 0 ? _f : '0',
                    };
                });
                break;
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
        if (json.memo) {
            outputs.forEach((output) => {
                output.memo = json.memo;
            });
        }
        return {
            ...explanationResult,
            outputAmount: outputAmount === null || outputAmount === void 0 ? void 0 : outputAmount.toString(),
            outputs,
        };
    }
    /**
     * Load the input and output data on this transaction using the transaction json
     * if there are outputs. For transactions without outputs (e.g. wallet initializations),
     * this function will not do anything
     */
    loadInputsAndOutputs() {
        if (this.type === undefined || !this.cosmosLikeTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Transaction type or cosmosLikeTransaction is not set');
        }
        const outputs = [];
        const inputs = [];
        switch (this.type) {
            case sdk_core_1.TransactionType.Send:
                this.cosmosLikeTransaction.sendMessages.forEach((message) => {
                    const sendMessage = message.value;
                    inputs.push({
                        address: sendMessage.fromAddress,
                        value: sendMessage.amount[0].amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: sendMessage.toAddress,
                        value: sendMessage.amount[0].amount,
                        coin: this._coinConfig.name,
                    });
                });
                break;
            case sdk_core_1.TransactionType.StakingActivate:
            case sdk_core_1.TransactionType.StakingDeactivate:
                this.cosmosLikeTransaction.sendMessages.forEach((message) => {
                    const delegateMessage = message.value;
                    inputs.push({
                        address: delegateMessage.delegatorAddress,
                        value: delegateMessage.amount.amount,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: delegateMessage.validatorAddress,
                        value: delegateMessage.amount.amount,
                        coin: this._coinConfig.name,
                    });
                });
                break;
            case sdk_core_1.TransactionType.StakingWithdraw:
                this.cosmosLikeTransaction.sendMessages.forEach((message) => {
                    const withdrawMessage = message.value;
                    inputs.push({
                        address: withdrawMessage.delegatorAddress,
                        value: constants_1.UNAVAILABLE_TEXT,
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: withdrawMessage.validatorAddress,
                        value: constants_1.UNAVAILABLE_TEXT,
                        coin: this._coinConfig.name,
                    });
                });
                break;
            case sdk_core_1.TransactionType.ContractCall:
                this.cosmosLikeTransaction.sendMessages.forEach((message) => {
                    var _a, _b, _c, _d, _e, _f;
                    const executeContractMessage = message.value;
                    inputs.push({
                        address: executeContractMessage.sender,
                        value: (_c = (_b = (_a = executeContractMessage.funds) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.amount) !== null && _c !== void 0 ? _c : '0',
                        coin: this._coinConfig.name,
                    });
                    outputs.push({
                        address: executeContractMessage.contract,
                        value: (_f = (_e = (_d = executeContractMessage.funds) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.amount) !== null && _f !== void 0 ? _f : '0',
                        coin: this._coinConfig.name,
                    });
                });
                break;
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
        this._inputs = inputs;
        this._outputs = outputs;
    }
    /**
     * Sets this transaction payload
     * @param rawTransaction raw transaction in base64 encoded string
     */
    enrichTransactionDetailsFromRawTransaction(rawTransaction) {
        if (this._utils.isValidHexString(rawTransaction)) {
            this.cosmosLikeTransaction = this._utils.deserializeTransaction(encoding_1.toBase64(encoding_1.fromHex(rawTransaction)));
        }
        else {
            this.cosmosLikeTransaction = this._utils.deserializeTransaction(rawTransaction);
        }
        if (this.cosmosLikeTransaction.signature) {
            this.addSignature(Buffer.from(this.cosmosLikeTransaction.signature).toString('hex'));
        }
        const typeUrl = this.cosmosLikeTransaction.sendMessages[0].typeUrl;
        const transactionType = this._utils.getTransactionTypeFromTypeUrl(typeUrl);
        if (transactionType === undefined) {
            throw new Error('Transaction type is not supported ' + typeUrl);
        }
        this.transactionType = transactionType;
    }
}
exports.CosmosTransaction = CosmosTransaction;
//# sourceMappingURL=data:application/json;base64,