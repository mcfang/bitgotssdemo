/**
 * @prettier
 */
import { EthLikeTokenConfig } from '@bitgo/statics';
import { BitGoBase, CoinConstructor, NamedCoinConstructor } from '@bitgo/sdk-core';
import { AbstractEthLikeCoin } from './abstractEthLikeCoin';
import { TransactionBuilder as EthTransactionBuilder, TransactionPrebuild } from '@bitgo/sdk-coin-eth';
export declare type CoinNames = {
    [network: string]: string;
};
export declare class EthLikeToken extends AbstractEthLikeCoin {
    readonly tokenConfig: EthLikeTokenConfig;
    protected constructor(bitgo: BitGoBase, tokenConfig: EthLikeTokenConfig, coinNames: CoinNames);
    static createTokenConstructor(config: EthLikeTokenConfig, coinNames: CoinNames): CoinConstructor;
    static createTokenConstructors(coinNames: CoinNames): NamedCoinConstructor[];
    protected getTransactionBuilder(): EthTransactionBuilder;
    get type(): string;
    get name(): string;
    get coin(): string;
    get network(): string;
    get tokenContractAddress(): string;
    get decimalPlaces(): number;
    getChain(): string;
    getBaseChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (ETH), false otherwise
     */
    transactionDataAllowed(): boolean;
    isToken(): boolean;
    verifyCoin(txPrebuild: TransactionPrebuild): boolean;
}
//# sourceMappingURL=ethLikeToken.d.ts.map