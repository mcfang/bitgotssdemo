"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stx = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const statics_1 = require("@bitgo/statics");
const _1 = require(".");
class Stx extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Stx(bitgo, staticsCoin);
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    async verifyTransaction(params) {
        // TODO: Implement when available on the SDK.
        return true;
    }
    /**
     * Check if address is valid, then make sure it matches the base address.
     *
     * @param {VerifyAddressOptions} params
     * @param {String} params.address - the address to verify
     * @param {String} params.baseAddress - the base address from the wallet
     */
    async isWalletAddress(params) {
        const { address, keychains } = params;
        if (!keychains || keychains.length !== 3) {
            throw new Error('Invalid keychains');
        }
        const pubs = keychains.map((keychain) => _1.StxLib.Utils.xpubToSTXPubkey(keychain.pub));
        const addressVersion = _1.StxLib.Utils.getAddressVersion(address);
        const baseAddress = _1.StxLib.Utils.getSTXAddressFromPubKeys(pubs, addressVersion).address;
        return _1.StxLib.Utils.isSameBaseAddress(address, baseAddress);
    }
    /**
     * Generate Stacks key pair
     *
     * @param {Buffer} seed - Seed from which the new keypair should be generated, otherwise a random seed is used
     * @returns {Object} object with generated pub and prv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? new _1.StxLib.KeyPair({ seed }) : new _1.StxLib.KeyPair();
        const keys = keyPair.getExtendedKeys();
        if (!keys.xprv) {
            throw new Error('Missing xprv in key generation.');
        }
        return {
            pub: keys.xpub,
            prv: keys.xprv,
        };
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {string} pub the prv to be checked
     * @returns is it valid?
     */
    isValidPub(pub) {
        try {
            return _1.StxLib.Utils.isValidPublicKey(pub);
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Return boolean indicating whether input is valid private key for the coin
     *
     * @param {string} prv the prv to be checked
     * @returns is it valid?
     */
    isValidPrv(prv) {
        try {
            return _1.StxLib.Utils.isValidPrivateKey(prv);
        }
        catch (e) {
            return false;
        }
    }
    isValidAddress(address) {
        try {
            return _1.StxLib.Utils.isValidAddressWithPaymentId(address);
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Signs stacks transaction
     * @param params
     */
    async signTransaction(params) {
        const factory = new _1.StxLib.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
        const txBuilder = factory.from(params.txPrebuild.txHex);
        const prvKeys = params.prv instanceof Array ? params.prv : [params.prv];
        prvKeys.forEach((prv) => txBuilder.sign({ key: prv }));
        if (params.pubKeys)
            txBuilder.fromPubKey(params.pubKeys);
        // if (params.numberSignature) txBuilder.numberSignatures(params.numberSignature);
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid message passed to signMessage');
        }
        return {
            txHex: transaction.toBroadcastFormat(),
        };
    }
    async parseTransaction(params) {
        return {};
    }
    /**
     * Explain a Stacks transaction from txHex
     * @param params
     */
    async explainTransaction(params) {
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex || !params.feeInfo) {
            throw new Error('missing explain tx parameters');
        }
        const factory = new _1.StxLib.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
        const txBuilder = factory.from(txHex);
        if (params.publicKeys !== undefined) {
            txBuilder.fromPubKey(params.publicKeys);
            if (params.publicKeys.length === 1) {
                // definitely a single sig tx
                txBuilder.numberSignatures(1);
            }
        }
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        if (tx.type === sdk_core_1.TransactionType.Send) {
            const outputs = [
                {
                    address: txJson.payload.to,
                    amount: txJson.payload.amount,
                    memo: txJson.payload.memo,
                },
            ];
            const displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'memo', 'type'];
            return {
                displayOrder,
                id: txJson.id,
                outputAmount: txJson.payload.amount.toString(),
                changeAmount: '0',
                outputs,
                changeOutputs: [],
                fee: txJson.fee,
                memo: txJson.payload.memo,
                type: tx.type,
            };
        }
        if (tx.type === sdk_core_1.TransactionType.ContractCall) {
            const displayOrder = [
                'id',
                'fee',
                'type',
                'contractAddress',
                'contractName',
                'contractFunction',
                'contractFunctionArgs',
            ];
            return {
                displayOrder,
                id: txJson.id,
                changeAmount: '0',
                outputAmount: '',
                outputs: [],
                changeOutputs: [],
                fee: txJson.fee,
                type: tx.type,
                contractAddress: txJson.payload.contractAddress,
                contractName: txJson.payload.contractName,
                contractFunction: txJson.payload.functionName,
                contractFunctionArgs: txJson.payload.functionArgs,
            };
        }
    }
}
exports.Stx = Stx;
//# sourceMappingURL=data:application/json;base64,