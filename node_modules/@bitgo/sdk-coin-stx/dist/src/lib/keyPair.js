"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
const crypto_1 = require("crypto");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const transactions_1 = require("@stacks/transactions");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
class KeyPair extends sdk_core_1.Secp256k1ExtendedKeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param { KeyPairOptions } source Either a master seed, a private key, or a public key
     */
    constructor(source) {
        super(source);
        if (!source) {
            const seed = crypto_1.randomBytes(constants_1.DEFAULT_SEED_SIZE_BYTES);
            this.hdNode = utxo_lib_1.bip32.fromSeed(seed);
        }
        else if (sdk_core_1.isSeed(source)) {
            this.hdNode = utxo_lib_1.bip32.fromSeed(source.seed);
        }
        else if (sdk_core_1.isPrivateKey(source)) {
            this.recordKeysFromPrivateKey(source.prv);
        }
        else if (sdk_core_1.isPublicKey(source)) {
            this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (this.hdNode) {
            this.keyPair = sdk_core_1.Secp256k1ExtendedKeyPair.toKeyPair(this.hdNode);
        }
    }
    /**
     * Build a keypair from a protocol private key or extended private key.
     *
     * The protocol private key is either 32 or 33 bytes long (64 or 66
     * characters hex).  If it is 32 bytes long, set the keypair's "compressed"
     * field to false to later generate uncompressed public keys (the default).
     * A 33 byte key has 0x01 as the last byte.
     *
     * @param {string} prv A raw private key
     */
    recordKeysFromPrivateKey(prv) {
        if (!utils_1.isValidPrivateKey(prv)) {
            throw new Error('Unsupported private key');
        }
        if (sdk_core_1.isValidXprv(prv)) {
            this.hdNode = utxo_lib_1.bip32.fromBase58(prv);
        }
        else {
            this.keyPair = utxo_lib_1.ECPair.fromPrivateKey(Buffer.from(prv.slice(0, 64), 'hex'));
        }
    }
    /**
     * Build an ECPair from a protocol public key or extended public key.
     *
     * The protocol public key is either 32 bytes or 64 bytes long, with a
     * one-byte prefix (a total of 66 or 130 characters in hex).  If the
     * prefix is 0x02 or 0x03, it is a compressed public key.  A prefix of 0x04
     * denotes an uncompressed public key.
     *
     * @param {string} pub A raw public key
     */
    recordKeysFromPublicKey(pub) {
        if (!utils_1.isValidPublicKey(pub)) {
            throw new Error('Unsupported public key');
        }
        if (sdk_core_1.isValidXpub(pub)) {
            this.hdNode = utxo_lib_1.bip32.fromBase58(pub);
        }
        else {
            this.keyPair = utxo_lib_1.ECPair.fromPublicKey(Buffer.from(pub, 'hex'));
        }
    }
    /**
     * Stacks default keys format is raw private and uncompressed public key
     *
     * @param {boolean} compressed - Compress public key (defaults to false)
     * @returns {DefaultKeys} The keys in the protocol default key format
     */
    getKeys(compressed = false) {
        var _a;
        let prv = (_a = this.getPrivateKey()) === null || _a === void 0 ? void 0 : _a.toString('hex');
        if (prv && compressed) {
            prv += '01';
        }
        return {
            pub: this.getPublicKey({ compressed }).toString('hex'),
            prv,
        };
    }
    getCompressed() {
        return this.keyPair.compressed;
    }
    /**
     * Get a public address of an uncompressed public key.
     *
     * @returns {string} The public address
     */
    getAddress() {
        return this.getSTXAddress(false, transactions_1.TransactionVersion.Mainnet);
    }
    /**
     * Get a public address of an uncompressed public key.
     *
     * @param {boolean} compressed - Compress public key (defaults to false)
     * @param {TransactionVersion} network - select Mainnet or Testnet for the address
     * @returns {string} The public address
     */
    getSTXAddress(compressed = false, network = transactions_1.TransactionVersion.Mainnet) {
        return transactions_1.getAddressFromPublicKey(this.getKeys(compressed).pub, network);
    }
}
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,