"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const bn_js_1 = __importDefault(require("bn.js"));
const statics_1 = require("@bitgo/statics");
const transactions_1 = require("@stacks/transactions");
const network_1 = require("@stacks/network");
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const keyPair_1 = require("./keyPair");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this.getSignature = (_, index) => this._signatures.find((s) => s.index === index);
        this.getPrivateKey = (pubKey, _) => this._multiSignerKeyPairs.find((kp) => kp.getKeys(true).pub === pubKey || kp.getKeys().pub === pubKey);
        this._anchorMode = constants_1.ANCHOR_MODE;
        this._multiSignerKeyPairs = [];
        this._fromPubKeys = [];
        this._signatures = [];
        this._numberSignatures = constants_1.DEFAULT_MULTISIG_SIG_NUMBER;
        this._network = _coinConfig.network.type === statics_1.NetworkType.MAINNET ? new network_1.StacksMainnet() : new network_1.StacksTestnet();
        this._transaction = new transaction_1.Transaction(_coinConfig);
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx) {
        this.transaction = tx;
        // check if it is signed or unsigned tx
        if (tx.stxTransaction.auth.spendingCondition === undefined) {
            throw new sdk_core_1.InvalidTransactionError('spending condition cannot be undefined');
        }
        const txData = tx.toJson();
        this.fee({ fee: txData.fee.toString() });
        this.nonce(txData.nonce);
        let sigHash = tx.stxTransaction.verifyBegin();
        const authType = tx.stxTransaction.auth.authType ? tx.stxTransaction.auth.authType : transactions_1.AuthType.Standard;
        if (transactions_1.isSingleSig(tx.stxTransaction.auth.spendingCondition)) {
            this._numberSignatures = 1;
            if (tx.stxTransaction.auth.spendingCondition.signature.data !== transactions_1.emptyMessageSignature().data) {
                const signature = tx.stxTransaction.auth.spendingCondition.signature;
                sigHash = transactions_1.makeSigHashPreSign(sigHash, authType, new bn_js_1.default(this._fee.fee), new bn_js_1.default(this._nonce));
                this._signatures.push({ ...signature, index: 0, sigHash });
                this._fromPubKeys = [transactions_1.publicKeyFromSignature(sigHash, signature)];
            }
        }
        else {
            this._numberSignatures = tx.stxTransaction.auth.spendingCondition.signaturesRequired;
            tx.stxTransaction.auth.spendingCondition.fields.forEach((field, index) => {
                if (field.contents.type === transactions_1.StacksMessageType.MessageSignature) {
                    const signature = field.contents;
                    const nextVerify = transactions_1.nextVerification(sigHash, authType, new bn_js_1.default(this._fee.fee), new bn_js_1.default(this._nonce), transactions_1.PubKeyEncoding.Compressed, // useless param as Compressed is hardcoded in stacks lib
                    signature);
                    sigHash = nextVerify.nextSigHash;
                    this._signatures.push({ ...signature, index, sigHash });
                    this._fromPubKeys.push(nextVerify.pubKey.data.toString('hex'));
                }
                else {
                    this._fromPubKeys.push(field.contents.data.toString('hex'));
                }
            });
        }
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new transaction_1.Transaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        const stackstransaction = transactions_1.deserializeTransaction(transactions_1.BufferReader.fromBuffer(Buffer.from(utils_1.removeHexPrefix(rawTransaction), 'hex')));
        tx.stxTransaction = stackstransaction;
        this.initBuilder(tx);
        return this.transaction;
    }
    // region Base Builder
    /** @inheritdoc */
    async buildImplementation() {
        const isMultiSig = this._fromPubKeys.length > 1;
        this._transaction.stxTransaction.setFee(new bn_js_1.default(this._fee.fee));
        this._transaction.stxTransaction.setNonce(new bn_js_1.default(this._nonce));
        for (let index = 0; index < this._fromPubKeys.length; index++) {
            const pubKey = this._fromPubKeys[index];
            const signature = this.getSignature(pubKey, index);
            if (signature) {
                await this.transaction.signWithSignatures(signature, isMultiSig);
            }
            else {
                const prvKey = this.getPrivateKey(pubKey, index);
                if (prvKey) {
                    await this.transaction.sign(prvKey);
                }
                else if (isMultiSig) {
                    await this.transaction.appendOrigin(pubKey);
                }
            }
        }
        this._transaction.loadInputsAndOutputs();
        return this._transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        this.checkDuplicatedKeys(key);
        let prv = key.key;
        if (prv.startsWith('xprv')) {
            const rawPrv = sdk_core_1.xprvToRawPrv(prv);
            prv = new keyPair_1.KeyPair({ prv: rawPrv }).getKeys(true).prv;
        }
        const signer = new keyPair_1.KeyPair({ prv: prv });
        // Signing the transaction is an operation that relies on all the data being set,
        // so we set the source here and leave the actual signing for the build step
        this._multiSignerKeyPairs.push(signer);
        const publicKey = signer.getKeys(signer.getCompressed()).pub;
        if (!this._fromPubKeys.includes(publicKey)) {
            this._fromPubKeys.push(publicKey);
        }
        return this.transaction;
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /**
     * Validates that the given key is not already in this._multiSignerKeyPairs
     *
     * @param {BaseKey} key - The key to check
     */
    checkDuplicatedKeys(key) {
        this._multiSignerKeyPairs.forEach((_sourceKeyPair) => {
            if (_sourceKeyPair.getKeys().prv === key.key) {
                throw new sdk_core_1.SigningError('Repeated sign: ' + key.key);
            }
        });
    }
    /**
     * Set the transaction fees
     *
     * @param {BaseFee} fee The maximum gas to pay
     * @returns {TransactionBuilder} This transaction builder
     */
    fee(fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        this._fee = fee;
        return this;
    }
    nonce(n) {
        this._nonce = n;
        return this;
    }
    fromPubKey(senderPubKey) {
        const pubKeys = senderPubKey instanceof Array ? senderPubKey : [senderPubKey];
        this._fromPubKeys = [];
        pubKeys.forEach((key) => {
            if (utils_1.isValidPublicKey(key)) {
                this._fromPubKeys.push(key);
            }
            else {
                throw new sdk_core_1.InvalidParameterValueError('Invalid public key');
            }
        });
        return this;
    }
    /**
     *  Set the memo
     *
     * @param {string} memo
     * @returns {TransactionBuilder} This transaction builder
     */
    memo(memo) {
        if (!utils_1.isValidMemo(memo)) {
            throw new sdk_core_1.BuildTransactionError('Memo is too long');
        }
        this._memo = memo;
        return this;
    }
    /**
     *  Set the number of signatures for multi-sig
     *
     * @param {number} numSigns
     * @returns {TransactionBuilder} This transaction builder
     */
    numberSignatures(numSigns) {
        this.validateValue(new bignumber_js_1.default(numSigns));
        this._numberSignatures = numSigns;
        return this;
    }
    // region Validators
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        const keyPair = new keyPair_1.KeyPair({ prv: key.key });
        if (!keyPair.getKeys().prv) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Raw transaction is empty');
        }
        try {
            transactions_1.deserializeTransaction(transactions_1.BufferReader.fromBuffer(Buffer.from(utils_1.removeHexPrefix(rawTransaction), 'hex')));
        }
        catch (e) {
            throw new sdk_core_1.ParseTransactionError('There was an error parsing the raw transaction');
        }
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        this.validateFee();
        this.validateNonce();
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    /**
     * Validates that the fee field is defined
     */
    validateFee() {
        if (this._fee === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing fee');
        }
        try {
            this.validateValue(new bignumber_js_1.default(this._fee.fee));
        }
        catch (e) {
            throw new sdk_core_1.BuildTransactionError('Invalid fee');
        }
    }
    /**
     * Validates that nonce is defined
     */
    validateNonce() {
        if (this._nonce === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing nonce');
        }
        try {
            this.validateValue(new bignumber_js_1.default(this._nonce));
        }
        catch (e) {
            throw new sdk_core_1.BuildTransactionError(`Invalid nonce ${this._nonce}`);
        }
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,