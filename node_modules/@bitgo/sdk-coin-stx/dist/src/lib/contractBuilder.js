"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractBuilder = void 0;
const transactions_1 = require("@stacks/transactions");
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = require("./utils");
const _1 = require(".");
const constants_1 = require("./constants");
const abstractContractBuilder_1 = require("./abstractContractBuilder");
class ContractBuilder extends abstractContractBuilder_1.AbstractContractBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    initBuilder(tx) {
        super.initBuilder(tx);
        // Retro compatibility, checks parameters.
        this.contractAddress(this._contractAddress);
        this.contractName(this._contractName);
        this.functionName(this._functionName);
        this.functionArgs(this._functionArgs);
    }
    // region Contract fields
    /**
     * Set the contract address
     *
     * @param {string} address the address deployed the contract
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    contractAddress(address) {
        if (!utils_1.isValidAddress(address)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid address');
        }
        if (!_1.Utils.isValidContractAddress(address, this._coinConfig.network)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid contract address');
        }
        this._contractAddress = address;
        return this;
    }
    /**
     * Set the contract name
     *
     * @param {string} name name of contract
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    contractName(name) {
        if (name.length === 0) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid name');
        }
        if (name !== constants_1.CONTRACT_NAME_STAKING && name !== constants_1.CONTRACT_NAME_SENDMANY) {
            throw new sdk_core_1.InvalidParameterValueError('Only pox-3 and send-many-memo contracts supported');
        }
        this._contractName = name;
        return this;
    }
    /**
     * Set the function name in contract
     *
     * @param {string} name name of function
     * @returns {ContractBuilder} the builder with the new parameter set
     */
    functionName(name) {
        if (name.length === 0) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid name');
        }
        if (!_1.Utils.isValidContractFunctionName(name)) {
            throw new sdk_core_1.InvalidParameterValueError(`${name} is not supported contract function name`);
        }
        this._functionName = name;
        return this;
    }
    functionArgs(args) {
        this._functionArgs = args.map((arg) => {
            if (!transactions_1.ClarityType[arg.type]) {
                return this.parseCv(arg);
            }
            else {
                // got direct clarity value after deserialization in fromImplementation
                return arg;
            }
        });
        return this;
    }
    parseCv(arg) {
        switch (arg.type) {
            case 'optional':
                if (arg.val === undefined) {
                    return transactions_1.noneCV();
                }
                else {
                    return transactions_1.someCV(this.parseCv(arg.val));
                }
            case 'tuple':
                if (arg.val instanceof Array) {
                    const data = {};
                    arg.val.forEach((a) => {
                        data[a.key] = this.parseCv({ type: a.type, val: a.val });
                    });
                    return transactions_1.tupleCV(data);
                }
                throw new sdk_core_1.InvalidParameterValueError('tuple require Array val');
            case 'buffer':
                if (arg.val instanceof Buffer) {
                    return transactions_1.bufferCV(arg.val);
                }
                const nval = Number(arg.val);
                if (nval) {
                    return transactions_1.bufferCV(Buffer.of(nval));
                }
                return transactions_1.bufferCVFromString(arg.val);
            default:
                return transactions_1.encodeClarityValue(arg.type, arg.val);
        }
    }
}
exports.ContractBuilder = ContractBuilder;
//# sourceMappingURL=data:application/json;base64,