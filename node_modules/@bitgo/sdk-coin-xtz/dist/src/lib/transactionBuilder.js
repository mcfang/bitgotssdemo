"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const keyPair_1 = require("./keyPair");
const multisigUtils_1 = require("./multisigUtils");
const transaction_1 = require("./transaction");
const transferBuilder_1 = require("./transferBuilder");
const utils_1 = require("./utils");
const DEFAULT_M = 3;
/**
 * Tezos transaction builder.
 */
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    /**
     * Public constructor.
     *
     * @param {CoinConfig} _coinConfig - coin configuration
     */
    constructor(_coinConfig) {
        super(_coinConfig);
        this._type = sdk_core_1.TransactionType.Send;
        this._counter = new bignumber_js_1.default(0);
        this._transfers = [];
        this._walletOwnerPublicKeys = [];
        this._multisigSignerKeyPairs = [];
        this._dataToSignOverride = [];
        this.transaction = new transaction_1.Transaction(_coinConfig);
    }
    // region Base Builder
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        // Decoding the transaction is an async operation, so save it and leave the decoding for the
        // build step
        this._serializedTransaction = rawTransaction;
        return new transaction_1.Transaction(this._coinConfig);
    }
    /** @inheritdoc */
    signImplementation(key) {
        const signer = new keyPair_1.KeyPair({ prv: key.key });
        // Currently public key revelation is the only type of account update tx supported in Tezos
        if (this._type === sdk_core_1.TransactionType.AccountUpdate && !this._publicKeyToReveal) {
            throw new sdk_core_1.SigningError('Cannot sign a public key revelation transaction without public key');
        }
        if (this._type === sdk_core_1.TransactionType.WalletInitialization && this._walletOwnerPublicKeys.length === 0) {
            throw new sdk_core_1.SigningError('Cannot sign an wallet initialization transaction without owners');
        }
        if (this._type === sdk_core_1.TransactionType.Send &&
            this._transfers.length === 0 &&
            this._serializedTransaction === undefined) {
            throw new sdk_core_1.SigningError('Cannot sign an empty send transaction');
        }
        if (this._type === sdk_core_1.TransactionType.Send && (!this._sourceAddress || this._sourceAddress !== signer.getAddress())) {
            // If the signer is not the source and it is a send transaction, add it to the list of
            // multisig wallet signers
            // TODO: support a combination of keys with and without custom index
            if (key.index && key.index >= DEFAULT_M) {
                throw new sdk_core_1.BuildTransactionError('Custom index cannot be greater than the wallet total number of signers (owners)');
            }
            // Make sure either all keys passed have a custom index or none of them have
            const shouldHaveCustomIndex = key.hasOwnProperty('index');
            for (let i = 0; i < this._multisigSignerKeyPairs.length; i++) {
                if (shouldHaveCustomIndex !== (this._multisigSignerKeyPairs[i].index !== undefined)) {
                    throw new sdk_core_1.BuildTransactionError('Custom index has to be set for all multisig contract signing keys or none');
                }
            }
            const multisigSignerKey = shouldHaveCustomIndex ? { key: signer, index: key.index } : { key: signer };
            this._multisigSignerKeyPairs.push(multisigSignerKey);
        }
        else {
            if (this._sourceKeyPair) {
                throw new sdk_core_1.SigningError('Cannot sign multiple times a non send-type transaction');
            }
            this._sourceKeyPair = signer;
        }
        // Signing the transaction is an async operation, so save the source and leave the actual
        // signing for the build step
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        // If the from() method was called, use the serialized transaction as a base
        if (this._serializedTransaction) {
            await this.transaction.initFromSerializedTransaction(this._serializedTransaction);
            for (let i = 0; i < this._dataToSignOverride.length; i++) {
                const signatures = await this.getSignatures(this._dataToSignOverride[i].dataToSign);
                await this.transaction.addTransferSignature(signatures, this._dataToSignOverride[i].index || i);
            }
            // TODO: make changes to the transaction if any extra parameter has been set then sign it
        }
        else {
            let contents = [];
            switch (this._type) {
                case sdk_core_1.TransactionType.AccountUpdate:
                    if (this._publicKeyToReveal) {
                        contents.push(this.buildPublicKeyRevelationOperation());
                    }
                    break;
                case sdk_core_1.TransactionType.WalletInitialization:
                    if (this._publicKeyToReveal) {
                        contents.push(this.buildPublicKeyRevelationOperation());
                    }
                    contents.push(this.buildWalletInitializationOperations());
                    break;
                case sdk_core_1.TransactionType.Send:
                    if (this._publicKeyToReveal) {
                        contents.push(this.buildPublicKeyRevelationOperation());
                    }
                    contents = contents.concat(await this.buildSendTransactionContent());
                    break;
                case sdk_core_1.TransactionType.AddressInitialization:
                    if (this._publicKeyToReveal) {
                        contents.push(this.buildPublicKeyRevelationOperation());
                    }
                    contents = contents.concat(this.buildForwarderDeploymentContent());
                    break;
                case sdk_core_1.TransactionType.SingleSigSend:
                    // No support for revelation txns as primary use case is to send from fee address
                    contents = contents.concat(await this.buildSendTransactionContent());
                    break;
                default:
                    throw new sdk_core_1.BuildTransactionError('Unsupported transaction type');
            }
            if (contents.length === 0) {
                throw new sdk_core_1.BuildTransactionError('Empty transaction');
            }
            const parsedTransaction = {
                branch: this._blockHeader,
                contents,
            };
            this.transaction = new transaction_1.Transaction(this._coinConfig);
            // Build and sign a new transaction based on the latest changes
            await this.transaction.initFromParsedTransaction(parsedTransaction);
        }
        if (this._sourceKeyPair && this._sourceKeyPair.getKeys().prv) {
            // TODO: check if there are more signers than needed for a singlesig or multisig transaction
            await this.transaction.sign(this._sourceKeyPair);
        }
        return this.transaction;
    }
    // endregion
    // region Common builder methods
    /**
     * Set the transaction branch id.
     *
     * @param {string} blockId A block hash to use as branch reference
     */
    branch(blockId) {
        if (!utils_1.isValidBlockHash(blockId)) {
            throw new sdk_core_1.BuildTransactionError('Invalid block hash ' + blockId);
        }
        this._blockHeader = blockId;
    }
    /**
     * The type of transaction being built.
     *
     * @param {TransactionType} type - type of the transaction
     */
    type(type) {
        if (type === sdk_core_1.TransactionType.Send && this._walletOwnerPublicKeys.length > 0) {
            throw new sdk_core_1.BuildTransactionError('Transaction cannot be labeled as Send when owners have already been set');
        }
        if (type !== sdk_core_1.TransactionType.Send && this._transfers.length > 0) {
            throw new sdk_core_1.BuildTransactionError('Transaction contains transfers and can only be labeled as Send');
        }
        this._type = type;
    }
    /**
     * Set the transaction fees. Low fees may get a transaction rejected or never picked up by bakers.
     *
     * @param {Fee} fee Baker fees. May also include the maximum gas and storage fees to pay
     */
    fee(fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        if (fee.gasLimit) {
            this.validateValue(new bignumber_js_1.default(fee.gasLimit));
        }
        if (fee.storageLimit) {
            this.validateValue(new bignumber_js_1.default(fee.storageLimit));
        }
        this._fee = fee;
    }
    /**
     * Set the transaction initiator. This account will pay for the transaction fees, but it will not
     * be added as an owner of a wallet in a init transaction, unless manually set as one of the
     * owners.
     *
     * @param {string} source A Tezos address
     */
    source(source) {
        this.validateAddress({ address: source });
        this._sourceAddress = source;
    }
    /**
     * Set an amount of mutez to transfer in this transaction this transaction. This is different than
     * the amount to transfer from a multisig wallet.
     *
     * @param {string} amount Amount in mutez (1/1000000 Tezies)
     */
    initialBalance(amount) {
        if (this._type !== sdk_core_1.TransactionType.WalletInitialization) {
            throw new sdk_core_1.BuildTransactionError('Initial balance can only be set for wallet initialization transactions');
        }
        this.validateValue(new bignumber_js_1.default(amount));
        this._initialBalance = amount;
    }
    /**
     * Set the transaction counter to prevent submitting repeated transactions.
     *
     * @param {string} counter The counter to use
     */
    counter(counter) {
        this._counter = new bignumber_js_1.default(counter);
    }
    /**
     * Set the destination address of a forwarder contract
     * Used in forwarder contract deployment as destination address
     *
     * @param {string} contractAddress - contract address to use
     */
    forwarderDestination(contractAddress) {
        if (this._type !== sdk_core_1.TransactionType.AddressInitialization) {
            throw new sdk_core_1.BuildTransactionError('Forwarder destination can only be set for address initialization transactions');
        }
        if (!utils_1.isValidOriginatedAddress(contractAddress)) {
            throw new sdk_core_1.BuildTransactionError('Forwarder destination can only be an originated address');
        }
        this._forwarderDestination = contractAddress;
    }
    // endregion
    // region PublicKeyRevelation builder methods
    /**
     * The public key to reveal.
     *
     * @param {string} publicKey A Tezos public key
     */
    publicKeyToReveal(publicKey) {
        if (this._publicKeyToReveal) {
            throw new sdk_core_1.BuildTransactionError('Public key to reveal already set: ' + this._publicKeyToReveal);
        }
        const keyPair = new keyPair_1.KeyPair({ pub: publicKey });
        if (keyPair.getAddress() !== this._sourceAddress) {
            throw new sdk_core_1.BuildTransactionError('Public key does not match the source address: ' + this._sourceAddress);
        }
        this._publicKeyToReveal = keyPair.getKeys().pub;
    }
    /**
     * Build a reveal operation for the source account with default fees.
     *
     * @returns {RevealOp} A Tezos reveal operation
     */
    buildPublicKeyRevelationOperation() {
        const operation = multisigUtils_1.revealOperation(this._counter.toString(), this._sourceAddress, this._publicKeyToReveal);
        this._counter = this._counter.plus(1);
        return operation;
    }
    // endregion
    // region WalletInitialization builder methods
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} publicKey A Tezos public key
     */
    owner(publicKey) {
        if (this._type !== sdk_core_1.TransactionType.WalletInitialization) {
            throw new sdk_core_1.BuildTransactionError('Multisig wallet owner can only be set for initialization transactions');
        }
        if (this._walletOwnerPublicKeys.length >= DEFAULT_M) {
            throw new sdk_core_1.BuildTransactionError('A maximum of ' + DEFAULT_M + ' owners can be set for a multisig wallet');
        }
        if (!utils_1.isValidPublicKey(publicKey)) {
            throw new sdk_core_1.BuildTransactionError('Invalid public key: ' + publicKey);
        }
        if (this._walletOwnerPublicKeys.includes(publicKey)) {
            throw new sdk_core_1.BuildTransactionError('Repeated owner public key: ' + publicKey);
        }
        this._walletOwnerPublicKeys.push(publicKey);
    }
    /**
     * Set an initial delegate to initialize this wallet to. This is different than the delegation to
     * set while doing a separate delegation transaction.
     *
     * @param {string} delegate The address to delegate the funds to
     */
    initialDelegate(delegate) {
        if (this._type !== sdk_core_1.TransactionType.WalletInitialization) {
            throw new sdk_core_1.BuildTransactionError('Initial delegation can only be set for wallet initialization transactions');
        }
        this.validateAddress({ address: delegate });
        this._initialDelegate = delegate;
    }
    /**
     * Build an origination operation for a generic multisig contract.
     *
     * @returns {Operation} A Tezos origination operation
     */
    buildWalletInitializationOperations() {
        const originationOp = multisigUtils_1.genericMultisigOriginationOperation(this._counter.toString(), this._sourceAddress, this._fee.fee, this._fee.gasLimit || utils_1.DEFAULT_GAS_LIMIT.ORIGINATION.toString(), this._fee.storageLimit || utils_1.DEFAULT_STORAGE_LIMIT.ORIGINATION.toString(), this._initialBalance || '0', this._walletOwnerPublicKeys, this._initialDelegate);
        this._counter = this._counter.plus(1);
        return originationOp;
    }
    // endregion
    // region Send builder methods
    /**
     * Initialize a new TransferBuilder to for a singlesig or multisig transaction.
     *
     * @param {string} amount Amount in mutez to be transferred
     * @returns {TransferBuilder} A transfer builder
     */
    transfer(amount) {
        if (this._type !== sdk_core_1.TransactionType.Send && this._type !== sdk_core_1.TransactionType.SingleSigSend) {
            throw new sdk_core_1.BuildTransactionError('Transfers can only be set for send transactions');
        }
        let transferBuilder = new transferBuilder_1.TransferBuilder();
        // If source was set, use it as default for
        if (this._sourceAddress) {
            transferBuilder = transferBuilder.from(this._sourceAddress);
        }
        if (this._fee) {
            transferBuilder = transferBuilder.fee(this._fee.fee);
            transferBuilder = this._fee.gasLimit ? transferBuilder.gasLimit(this._fee.gasLimit) : transferBuilder;
            transferBuilder = this._fee.storageLimit ? transferBuilder.storageLimit(this._fee.storageLimit) : transferBuilder;
        }
        this._transfers.push(transferBuilder);
        return transferBuilder.amount(amount);
    }
    /**
     * Calculate the signatures for the multisig transaction.
     *
     * @param {string} packedData The string in hexadecimal to sign
     * @returns {Promise<string[]>} List of signatures for packedData
     */
    async getSignatures(packedData) {
        const signatures = [];
        // Generate the multisig contract signatures
        for (let i = 0; i < this._multisigSignerKeyPairs.length; i++) {
            const signature = await utils_1.sign(this._multisigSignerKeyPairs[i].key, packedData, new Uint8Array(0));
            const index = this._multisigSignerKeyPairs[i].index;
            signatures.push(index ? { signature: signature.sig, index } : { signature: signature.sig });
        }
        return signatures;
    }
    /**
     * Override the data to sign for a specific transfer. Used for offline signing to pass the
     * respective dataToSign for transfer at a particular index.
     *
     * @param {DataToSignOverride} data - data to override
     */
    overrideDataToSign(data) {
        if (!data.index) {
            data.index = this._dataToSignOverride.length;
        }
        this._dataToSignOverride.push(data);
    }
    /**
     * Build a transaction operation for a generic multisig contract.
     *
     * @returns {Promise<TransactionOp[]>} A Tezos transaction operation
     */
    async buildSendTransactionContent() {
        const contents = [];
        for (let i = 0; i < this._transfers.length; i++) {
            const transfer = this._transfers[i].build();
            let transactionOp;
            if (utils_1.isValidOriginatedAddress(transfer.from)) {
                // Offline transactions may not have the data to sign
                const signatures = transfer.dataToSign ? await this.getSignatures(transfer.dataToSign) : [];
                transactionOp = multisigUtils_1.multisigTransactionOperation(this._counter.toString(), this._sourceAddress, transfer.amount, transfer.from, transfer.counter || '0', transfer.to, signatures, transfer.fee.fee, transfer.fee.gasLimit, transfer.fee.storageLimit);
            }
            else {
                transactionOp = multisigUtils_1.singlesigTransactionOperation(this._counter.toString(), this._sourceAddress, transfer.amount, transfer.to, transfer.fee.fee, transfer.fee.gasLimit, transfer.fee.storageLimit);
            }
            contents.push(transactionOp);
            this._counter = this._counter.plus(1);
        }
        return contents;
    }
    // endregion
    // region ForwarderAddressDeployment
    /**
     * Build a transaction operation for a forwarder contract
     *
     * @returns {OriginationOp} a Tezos transaction operation
     */
    buildForwarderDeploymentContent() {
        const operation = multisigUtils_1.forwarderOriginationOperation(this._forwarderDestination, this._counter.toString(), this._sourceAddress, this._fee.fee, this._fee.gasLimit || utils_1.DEFAULT_GAS_LIMIT.ORIGINATION.toString(), this._fee.storageLimit || utils_1.DEFAULT_STORAGE_LIMIT.ORIGINATION.toString(), this._initialBalance || '0');
        this._counter = this._counter.plus(1);
        return operation;
    }
    // endregion
    // region Validators
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be below less than zero');
        }
        // TODO: validate the amount is not bigger than the max amount in Tezos
    }
    /** @inheritdoc */
    validateAddress(address) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        const keyPair = new keyPair_1.KeyPair({ prv: key.key });
        if (!keyPair.getKeys().prv) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        // TODO: validate the transaction is either a JSON or a hex
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        // TODO: validate all required fields are present in the builder before buildImplementation
        switch (this._type) {
            case sdk_core_1.TransactionType.AccountUpdate:
                break;
            case sdk_core_1.TransactionType.WalletInitialization:
                break;
            case sdk_core_1.TransactionType.Send:
                break;
            case sdk_core_1.TransactionType.AddressInitialization:
                break;
            case sdk_core_1.TransactionType.SingleSigSend:
                break;
            default:
                throw new sdk_core_1.BuildTransactionError('Transaction type not supported');
        }
    }
    // endregion
    /** @inheritdoc */
    displayName() {
        return this._coinConfig.fullName;
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,