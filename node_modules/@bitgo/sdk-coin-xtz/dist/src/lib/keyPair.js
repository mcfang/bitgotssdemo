"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = void 0;
const crypto_1 = require("crypto");
const blake2b_1 = __importDefault(require("@bitgo/blake2b"));
const utxo_lib_1 = require("@bitgo/utxo-lib");
const sdk_core_1 = require("@bitgo/sdk-core");
const Utils = __importStar(require("./utils"));
const DEFAULT_SEED_SIZE_BYTES = 16;
/**
 * Tezos keys and address management.
 */
class KeyPair extends sdk_core_1.Secp256k1ExtendedKeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    constructor(source) {
        super(source);
        if (!source) {
            const seed = crypto_1.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            this.hdNode = utxo_lib_1.bip32.fromSeed(seed);
        }
        else if (sdk_core_1.isSeed(source)) {
            this.hdNode = utxo_lib_1.bip32.fromSeed(source.seed);
        }
        else if (sdk_core_1.isPrivateKey(source)) {
            this.recordKeysFromPrivateKey(source.prv);
        }
        else if (sdk_core_1.isPublicKey(source)) {
            this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (this.hdNode) {
            this.keyPair = sdk_core_1.Secp256k1ExtendedKeyPair.toKeyPair(this.hdNode);
        }
    }
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a private key.
     * Specific Tezos implementation
     *
     * @param {string} prv An extended or raw private key
     */
    recordKeysFromPrivateKey(prv) {
        if (sdk_core_1.isValidXprv(prv)) {
            this.hdNode = utxo_lib_1.bip32.fromBase58(prv);
        }
        else if (sdk_core_1.isValidPrv(prv)) {
            // Cannot create the HD node without the chain code, so create a regular Key Chain
            this.keyPair = utxo_lib_1.ECPair.fromPrivateKey(Buffer.from(prv, 'hex'));
        }
        else if (Utils.isValidKey(prv, Utils.hashTypes.spsk)) {
            this.keyPair = utxo_lib_1.ECPair.fromPrivateKey(Utils.decodeKey(prv, Utils.hashTypes.spsk));
        }
        else {
            throw new Error('Unsupported private key');
        }
    }
    /**
     * Build a Hierarchical Deterministic node or an ECPair from a public key.
     * Specific Tezos implementation
     *
     * @param {string} pub - An extended, compressed, or uncompressed public key
     */
    recordKeysFromPublicKey(pub) {
        if (sdk_core_1.isValidXpub(pub)) {
            this.hdNode = utxo_lib_1.bip32.fromBase58(pub);
        }
        else if (sdk_core_1.isValidPub(pub)) {
            // Cannot create an HD node without the chain code, so create a regular Key Chain
            this.keyPair = utxo_lib_1.ECPair.fromPublicKey(Buffer.from(pub, 'hex'));
        }
        else if (Utils.isValidKey(pub, Utils.hashTypes.sppk)) {
            this.keyPair = utxo_lib_1.ECPair.fromPublicKey(Utils.decodeKey(pub, Utils.hashTypes.sppk));
        }
        else {
            throw new Error('Unsupported public key: ' + pub);
        }
    }
    /**
     * Return Tezos default keys with the respective prefixes
     *
     * @returns {DefaultKeys} The keys in the protocol default key format
     */
    getKeys() {
        // Always use the compressed version to be consistent
        const result = {
            pub: Utils.base58encode(Utils.hashTypes.sppk.prefix, this.getPublicKey({ compressed: true })),
        };
        const prvBuffer = this.getPrivateKey();
        if (prvBuffer) {
            result.prv = Utils.base58encode(Utils.hashTypes.spsk.prefix, prvBuffer);
        }
        return result;
    }
    /**
     * Get a public address.
     *
     * @returns {string} The public address
     */
    getAddress() {
        const pub = this.getPublicKey({ compressed: true });
        const out = Buffer.alloc(20);
        const b2b = blake2b_1.default(out.length).update(pub).digest(out);
        return Utils.base58encode(Utils.hashTypes.tz2.prefix, b2b);
    }
}
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,