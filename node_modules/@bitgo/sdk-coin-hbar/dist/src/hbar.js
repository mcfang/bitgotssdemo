"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hbar = void 0;
/**
 * @prettier
 */
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
const bignumber_js_1 = require("bignumber.js");
const stellar = __importStar(require("stellar-sdk"));
const seedValidator_1 = require("./seedValidator");
const lib_1 = require("./lib");
const Utils = __importStar(require("./lib/utils"));
const _ = __importStar(require("lodash"));
class Hbar extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    static createInstance(bitgo, staticsCoin) {
        return new Hbar(bitgo, staticsCoin);
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return false;
    }
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    isValidAddress(address) {
        try {
            return Utils.isValidAddressWithPaymentId(address);
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Generate Hedera Hashgraph key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? new lib_1.KeyPair({ seed }) : new lib_1.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Keypair generation failed to generate a prv');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    async parseTransaction(params) {
        return {};
    }
    /**
     * Check if address is valid, then make sure it matches the base address.
     *
     * @param {VerifyAddressOptions} params
     * @param {String} params.address - the address to verify
     * @param {String} params.baseAddress - the base address from the wallet
     */
    async isWalletAddress(params) {
        const { address, baseAddress } = params;
        return Utils.isSameBaseAddress(address, baseAddress);
    }
    async verifyTransaction(params) {
        // asset name to transfer amount map
        const coinConfig = statics_1.coins.get(this.getChain());
        const { txParams: txParams, txPrebuild: txPrebuild, memo: memo } = params;
        const transaction = new lib_1.Transaction(coinConfig);
        if (!txPrebuild.txHex) {
            throw new Error('missing required tx prebuild property txHex');
        }
        transaction.fromRawTransaction(txPrebuild.txHex);
        const explainTxParams = {
            txHex: txPrebuild.txHex,
            feeInfo: txPrebuild.feeInfo,
            memo: memo,
        };
        const explainedTx = await this.explainTransaction(explainTxParams);
        if (!txParams.recipients) {
            throw new Error('missing required tx params property recipients');
        }
        // for enabletoken, recipient output amount is 0
        const recipients = txParams.recipients.map((recipient) => ({
            ...recipient,
            amount: txParams.type === 'enabletoken' ? '0' : recipient.amount,
        }));
        if (coinConfig.isToken) {
            recipients.forEach((recipient) => {
                if (recipient.tokenName !== undefined && recipient.tokenName !== coinConfig.name) {
                    throw new Error('Incorrect token name specified in recipients');
                }
                recipient.tokenName = coinConfig.name;
            });
        }
        // verify recipients from params and explainedTx
        const filteredRecipients = recipients === null || recipients === void 0 ? void 0 : recipients.map((recipient) => _.pick(recipient, ['address', 'amount', 'tokenName']));
        const filteredOutputs = explainedTx.outputs.map((output) => _.pick(output, ['address', 'amount', 'tokenName']));
        if (!_.isEqual(filteredOutputs, filteredRecipients)) {
            throw new Error('Tx outputs does not match with expected txParams recipients');
        }
        return true;
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @returns Promise<SignedTransaction>
     */
    async signTransaction(params) {
        const factory = this.getBuilderFactory();
        const txBuilder = factory.from(params.txPrebuild.txHex);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid messaged passed to signMessage');
        }
        const response = {
            txHex: transaction.toBroadcastFormat(),
        };
        return transaction.signature.length >= 2 ? response : { halfSigned: response };
    }
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     * @return {Buffer} A signature over the given message using the given key
     */
    async signMessage(key, message) {
        const msg = Buffer.isBuffer(message) ? message.toString('utf8') : message;
        // reconstitute keys and sign
        return Buffer.from(new lib_1.KeyPair({ prv: key.prv }).signMessage(msg));
    }
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     */
    async recover(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    /**
     * Explain a Hedera transaction from txHex
     * @param params
     */
    async explainTransaction(params) {
        var _a;
        const txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
        if (!txHex) {
            throw new Error('missing explain tx parameters');
        }
        const factory = this.getBuilderFactory();
        const txBuilder = factory.from(txHex);
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        let outputAmount = new bignumber_js_1.BigNumber(0);
        const outputs = [];
        // TODO(BG-24809): get the memo from the toJson
        let memo = '';
        if (params.memo) {
            memo = params.memo.value;
        }
        switch (txJson.instructionsData.type) {
            case 'cryptoTransfer':
                const recipients = txJson.instructionsData.params.recipients || [];
                recipients.forEach((recipient) => {
                    if (!recipient.tokenName) {
                        // token transfer doesn't change outputAmount
                        outputAmount = outputAmount.plus(recipient.amount);
                    }
                    outputs.push({
                        address: recipient.address,
                        amount: recipient.amount.toString(),
                        memo,
                        ...(recipient.tokenName && {
                            tokenName: recipient.tokenName,
                        }),
                    });
                });
                break;
            case 'tokenAssociate':
                const tokens = txJson.instructionsData.params.tokenNames || [];
                const accountId = txJson.instructionsData.params.accountId;
                tokens.forEach((token) => {
                    outputs.push({
                        address: accountId,
                        amount: '0',
                        memo,
                        tokenName: token,
                    });
                });
                break;
            default:
                throw new Error('Transaction format outside of cryptoTransfer not supported for explanation.');
        }
        const displayOrder = [
            'id',
            'outputAmount',
            'changeAmount',
            'outputs',
            'changeOutputs',
            'fee',
            'timestamp',
            'expiration',
            'memo',
        ];
        return {
            displayOrder,
            id: txJson.id,
            outputs,
            outputAmount: outputAmount.toString(),
            changeOutputs: [],
            changeAmount: '0',
            fee: ((_a = params.feeInfo) === null || _a === void 0 ? void 0 : _a.fee) || txJson.fee,
            timestamp: txJson.startTime,
            expiration: txJson.validDuration,
        };
    }
    isStellarSeed(seed) {
        return seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM);
    }
    convertFromStellarSeed(seed) {
        // assume this is a trust custodial seed if its a valid ed25519 prv
        if (!this.isStellarSeed(seed) || seedValidator_1.SeedValidator.hasCompetingSeedFormats(seed)) {
            return null;
        }
        if (seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM)) {
            const keyFromSeed = new lib_1.KeyPair({ seed: stellar.StrKey.decodeEd25519SecretSeed(seed) });
            const keys = keyFromSeed.getKeys();
            if (keys !== undefined && keys.prv) {
                return keys.prv;
            }
        }
        return null;
    }
    isValidPub(pub) {
        return Utils.isValidPublicKey(pub);
    }
    getTokenEnablementConfig() {
        return {
            requiresTokenEnablement: true,
            supportsMultipleTokenEnablements: true,
        };
    }
    getBuilderFactory() {
        return new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
    }
}
exports.Hbar = Hbar;
//# sourceMappingURL=data:application/json;base64,