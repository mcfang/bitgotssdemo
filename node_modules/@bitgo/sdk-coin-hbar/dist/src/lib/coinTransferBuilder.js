"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoinTransferBuilder = void 0;
const Long = __importStar(require("long"));
const sdk_core_1 = require("@bitgo/sdk-core");
const transferBuilder_1 = require("./transferBuilder");
const utils_1 = require("./utils");
const bignumber_js_1 = require("bignumber.js");
class CoinTransferBuilder extends transferBuilder_1.TransferBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    async buildImplementation() {
        this._txBodyData.transfers = this.buildTransferData();
        return await super.buildImplementation();
    }
    buildTransferData() {
        let totalSend = new bignumber_js_1.BigNumber(0);
        const accountAmounts = [
            {
                accountID: utils_1.buildHederaAccountID(this._source.address),
                amount: Long.fromInt(0),
            }, // sender
        ];
        // add recipients and update send amount
        this._recipients.forEach((recipient) => {
            accountAmounts.push({ accountID: utils_1.buildHederaAccountID(recipient.address), amount: Long.fromString(recipient.amount) } // recipient
            );
            totalSend = totalSend.plus(recipient.amount);
        });
        accountAmounts[0].amount = Long.fromString(totalSend.toString()).negate(); // update sender send amount
        return {
            accountAmounts: accountAmounts,
        };
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const transferData = tx.txBody.cryptoTransfer;
        if (transferData && transferData.transfers && transferData.transfers.accountAmounts) {
            this.initTransfers(transferData.transfers.accountAmounts);
        }
    }
    /**
     * Initialize the transfer specific data, getting the recipient account
     * represented by the element with a positive amount on the transfer element.
     * The negative amount represents the source account, so it's ignored.
     *
     * @param {proto} transfers - Array of objects which contains accountID and transferred amount
     */
    initTransfers(transfers) {
        transfers.forEach((transferData) => {
            const amount = Long.fromValue(transferData.amount);
            if (amount.isPositive()) {
                this.send({
                    address: utils_1.stringifyAccountId(transferData.accountID),
                    amount: amount.toString(),
                });
            }
        });
    }
    // region Transfer fields
    // Currently works for one recipient by using exatcly one of to + amount or send function
    /**
     * @deprecated - Use the send method instead
     *
     * Set the destination address where the funds will be sent,
     * it may take the format `'<shard>.<realm>.<account>'` or `'<account>'`
     *
     * @param {string} address - The address to transfer funds to
     * @returns {TransferBuilder} - The builder with the new parameter set
     */
    to(address) {
        if (this._recipients.length > 0) {
            throw new sdk_core_1.DuplicateMethodError('Invalid method: send already used');
        }
        if (!utils_1.isValidAddress(address)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid address');
        }
        this._toAddress = address;
        return this;
    }
    /**
     * @deprecated - Use the send method instead
     *
     * Set the amount to be transferred
     *
     * @param {string} amount - Amount to transfer in tinyBars (there are 100,000,000 tinyBars in one Hbar)
     * @returns {TransferBuilder} - The builder with the new parameter set
     */
    amount(amount) {
        if (this._recipients.length > 0) {
            throw new sdk_core_1.DuplicateMethodError('Invalid method: send already used');
        }
        if (!utils_1.isValidAmount(amount)) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid amount');
        }
        this._amount = amount;
        return this;
    }
    /** @inheritdoc */
    send(recipient) {
        if (this._amount || this._toAddress) {
            throw new sdk_core_1.DuplicateMethodError('Invalid method: to or amount already used');
        }
        if (recipient.tokenName) {
            throw new sdk_core_1.InvalidParameterValueError('Invalid token name must be empty');
        }
        return super.send(recipient);
    }
    // endregion
    // region Validators
    /** @inheritdoc */
    validateMandatoryFields() {
        if (this._toAddress && this._amount) {
            this._recipients.push({
                address: this._toAddress,
                amount: this._amount,
            });
        }
        super.validateMandatoryFields();
    }
}
exports.CoinTransferBuilder = CoinTransferBuilder;
//# sourceMappingURL=data:application/json;base64,