"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const sha384_1 = require("@stablelib/sha384");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const nacl = __importStar(require("tweetnacl"));
const Long = __importStar(require("long"));
const proto_1 = require("@hashgraph/proto");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    canSign(key) {
        return true;
    }
    async sign(keyPair) {
        const keys = keyPair.getKeys(true);
        if (!keys.prv) {
            throw new sdk_core_1.SigningError('Missing private key');
        }
        const secretKey = sdk_core_1.toUint8Array(keys.prv + keys.pub);
        const signature = nacl.sign.detached(this._hederaTx.bodyBytes, secretKey);
        this.addSignature(sdk_core_1.toHex(signature), keyPair);
    }
    /**
     * Add a signature to this transaction
     *
     * @param {string} signature - The signature to add, in string hex format
     * @param {KeyPair} key - The key of the key that created the signature
     */
    addSignature(signature, key) {
        const sigPair = new proto_1.proto.SignaturePair();
        sigPair.pubKeyPrefix = sdk_core_1.toUint8Array(key.getKeys(true).pub);
        sigPair.ed25519 = sdk_core_1.toUint8Array(signature);
        const sigMap = this._hederaTx.sigMap || new proto_1.proto.SignatureMap();
        sigMap.sigPair.push(sigPair);
        this._hederaTx.sigMap = sigMap;
        this._signatures.push(signature);
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        const encoder = proto_1.proto.Transaction;
        return sdk_core_1.toHex(this.encode(this._hederaTx, encoder));
    }
    /**
     * Sets this transaction payload
     *
     * @param rawTransaction
     */
    fromRawTransaction(rawTransaction) {
        const buffer = typeof rawTransaction === 'string' ? sdk_core_1.toUint8Array(rawTransaction) : rawTransaction;
        this.bodyBytes(buffer);
        switch (this.txBody.data) {
            case constants_1.HederaTransactionTypes.Transfer:
                this.setTransactionType(sdk_core_1.TransactionType.Send);
                break;
            case constants_1.HederaTransactionTypes.CreateAccount:
                this.setTransactionType(sdk_core_1.TransactionType.WalletInitialization);
                break;
            case constants_1.HederaTransactionTypes.TokenAssociateToAccount:
                this.setTransactionType(sdk_core_1.TransactionType.AssociatedTokenAccountInitialization);
                break;
        }
    }
    /** @inheritdoc */
    toJson() {
        const [acc, time] = this.getTxIdParts();
        const result = {
            id: acc + '@' + time,
            hash: this.getTxHash(),
            data: sdk_core_1.toHex(this._hederaTx.bodyBytes),
            fee: new bignumber_js_1.default(this._txBody.transactionFee.toString()).toNumber(),
            from: acc,
            startTime: time,
            validDuration: this._txBody.transactionValidDuration.seconds.toString(),
            node: utils_1.stringifyAccountId(this._txBody.nodeAccountID),
            memo: this._txBody.memo,
        };
        switch (this._txBody.data) {
            case constants_1.HederaTransactionTypes.Transfer:
                result.instructionsData = {
                    type: constants_1.HederaTransactionTypes.Transfer,
                    params: this.getTransferData(),
                };
                result.to = result.instructionsData.params.recipients[0].address;
                result.amount = result.instructionsData.params.recipients[0].amount;
                break;
            case constants_1.HederaTransactionTypes.TokenAssociateToAccount:
                result.instructionsData = {
                    type: constants_1.HederaTransactionTypes.TokenAssociateToAccount,
                    params: this.getAccountAssociateData(),
                };
                break;
        }
        return result;
    }
    /**
     * Get the recipient account and the amount
     * transferred on this transaction
     *
     * @returns { tokenName, Recipient[]} is object consisting of tokenName if it's a token transfer and recipients consisting
     *  the recipient address, the transfer amount, and the token name for token transfer
     */
    getTransferData() {
        var _a, _b, _c, _d, _e;
        const [acc] = this.getTxIdParts();
        const transferData = [];
        const tokenTransfers = ((_a = this._txBody.cryptoTransfer) === null || _a === void 0 ? void 0 : _a.tokenTransfers) || [];
        const transfers = ((_b = tokenTransfers[0]) === null || _b === void 0 ? void 0 : _b.transfers) || ((_d = (_c = this._txBody.cryptoTransfer) === null || _c === void 0 ? void 0 : _c.transfers) === null || _d === void 0 ? void 0 : _d.accountAmounts) || [];
        const tokenName = tokenTransfers.length
            ? (_e = utils_1.getHederaTokenNameFromId(utils_1.stringifyTokenId(tokenTransfers[0].token))) === null || _e === void 0 ? void 0 : _e.name
            : undefined;
        transfers.forEach((transfer) => {
            const amount = Long.fromValue(transfer.amount);
            if (amount.isPositive() && utils_1.stringifyAccountId(transfer.accountID) !== acc) {
                transferData.push({
                    address: utils_1.stringifyAccountId(transfer.accountID),
                    amount: amount.toString(),
                    ...(tokenTransfers.length && {
                        tokenName: tokenName,
                    }),
                });
            }
        });
        return {
            ...(tokenTransfers.length && {
                tokenName: tokenName,
            }),
            recipients: transferData,
        };
    }
    /**
     * Get the recipient account and the amount
     * transferred on this transaction
     *
     * @returns { accountId: string; tokenNames[]} is an object consisting of accountId for the token owner
     *  and list of tokenNames that will be enabled
     */
    getAccountAssociateData() {
        const tokens = this._txBody.tokenAssociate.tokens || [];
        return {
            accountId: utils_1.stringifyAccountId(this._txBody.tokenAssociate.account),
            tokenNames: tokens.map((token) => utils_1.getHederaTokenNameFromId(utils_1.stringifyTokenId(token)).name),
        };
    }
    // region getters & setters
    get txBody() {
        return this._txBody;
    }
    get hederaTx() {
        return this._hederaTx;
    }
    /**
     * Sets this transaction body components
     *
     * @param {proto.Transaction} tx - Body Transaction
     */
    body(tx) {
        this._txBody = proto_1.proto.TransactionBody.decode(tx.bodyBytes);
        this._hederaTx = tx;
        this.loadInputsAndOutputs();
    }
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType - The transaction type to be set
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /**
     * Decode previous signatures from the inner hedera transaction
     * and save them into the base transaction signature list.
     */
    loadPreviousSignatures() {
        if (this._hederaTx.sigMap && this._hederaTx.sigMap.sigPair) {
            const sigPairs = this._hederaTx.sigMap.sigPair;
            sigPairs.forEach((sigPair) => {
                const signature = sigPair.ed25519;
                if (signature) {
                    this._signatures.push(sdk_core_1.toHex(signature));
                }
            });
        }
    }
    /**
     * Load the input and output data on this transaction using the transaction json
     * if there are outputs. For transactions without outputs (e.g. wallet initializations),
     * this function will not do anything
     */
    loadInputsAndOutputs() {
        const txJson = this.toJson();
        const instruction = txJson.instructionsData;
        const outputs = [];
        const inputs = [];
        switch (instruction === null || instruction === void 0 ? void 0 : instruction.type) {
            case constants_1.HederaTransactionTypes.Transfer:
                let totalAmount = new bignumber_js_1.default(0);
                instruction.params.recipients.forEach((recipient) => {
                    totalAmount = totalAmount.plus(recipient.amount);
                    outputs.push({
                        address: recipient.address,
                        value: recipient.amount,
                        coin: recipient.tokenName || this._coinConfig.name,
                    });
                });
                inputs.push({
                    address: txJson.from,
                    value: totalAmount.toString(),
                    coin: instruction.params.tokenName || this._coinConfig.name,
                });
                break;
            case constants_1.HederaTransactionTypes.TokenAssociateToAccount:
                instruction.params.tokenNames.forEach((tokenName) => {
                    const tokenEntry = {
                        address: instruction.params.accountId,
                        value: '0',
                        coin: tokenName,
                    };
                    inputs.push(tokenEntry);
                    outputs.push(tokenEntry);
                });
                break;
        }
        this._inputs = inputs;
        this._outputs = outputs;
    }
    /**
     * Sets this transaction body components
     *
     * @param {Uint8Array} bytes - Encoded body transaction
     */
    bodyBytes(bytes) {
        this.body(proto_1.proto.Transaction.decode(bytes));
    }
    // endregion
    // region helpers
    /**
     * Returns this hedera transaction id components in a readable format
     *
     * @returns {[string, string]} - Transaction id parts [<account id>, <startTime in seconds>]
     */
    getTxIdParts() {
        if (this._txBody &&
            this._txBody.transactionID &&
            this._txBody.transactionID.accountID &&
            this._txBody.transactionID.transactionValidStart) {
            return [
                utils_1.stringifyAccountId(this._txBody.transactionID.accountID),
                utils_1.stringifyTxTime(this._txBody.transactionID.transactionValidStart),
            ];
        }
        throw new Error('Missing transaction id information');
    }
    /**
     * Returns this transaction hash
     *
     * @returns {string} - The transaction hash
     */
    getTxHash() {
        if (!this._txBody.nodeAccountID) {
            throw new Error('Missing transaction node id');
        }
        const _signedTx = new proto_1.proto.SignedTransaction();
        _signedTx.sigMap = this._hederaTx.sigMap;
        _signedTx.bodyBytes = this._hederaTx.bodyBytes;
        const encoder = proto_1.proto.SignedTransaction;
        return this.sha(this.encode(_signedTx, encoder));
    }
    /**
     * Encode an object using the given encoder class
     *
     * @param {proto} obj - The object to be encoded, must be in proto namespace
     * @param encoder - Object encoder
     * @returns {Uint8Array} - Encoded object byte array
     */
    encode(obj, encoder) {
        return encoder.encode(obj).finish();
    }
    /**
     * Returns a sha-384 hash
     *
     * @param {Uint8Array} bytes - Bytes to be hashed
     * @returns {string} - The resulting hash string
     */
    sha(bytes) {
        return sdk_core_1.toHex(sha384_1.hash(bytes));
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,