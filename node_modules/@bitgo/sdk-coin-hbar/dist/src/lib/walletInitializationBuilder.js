"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletInitializationBuilder = void 0;
const Long = __importStar(require("long"));
const proto_1 = require("@hashgraph/proto");
const sdk_core_1 = require("@bitgo/sdk-core");
const transactionBuilder_1 = require("./transactionBuilder");
const utils_1 = require("./utils");
const _1 = require("./");
const constants_1 = require("./constants");
class WalletInitializationBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._owners = [];
        this._txBodyData = new proto_1.proto.CryptoCreateTransactionBody();
        this._txBody.cryptoCreateAccount = this._txBodyData;
        this._txBodyData.autoRenewPeriod = new proto_1.proto.Duration({ seconds: Long.fromNumber(7890000) });
    }
    // region Base Builder
    /** @inheritdoc */
    async buildImplementation() {
        this._txBodyData.key = { thresholdKey: this.buildOwnersKeys() };
        this._txBodyData.initialBalance = Long.ZERO;
        this.transaction.setTransactionType(sdk_core_1.TransactionType.WalletInitialization);
        return await super.buildImplementation();
    }
    /**
     *
     * @param {boolean} rawKeys - Defines if the owners keys are obtained in raw or protocol default format
     * @returns {proto.ThresholdKey} - The wallet threshold keys
     */
    buildOwnersKeys(rawKeys = true) {
        return this._owners.reduce((tKeys, key) => {
            if (tKeys.keys && tKeys.keys.keys) {
                tKeys.keys.keys.push({
                    ed25519: utils_1.toUint8Array(new _1.KeyPair({ pub: key }).getKeys(rawKeys).pub),
                });
            }
            return tKeys;
        }, new proto_1.proto.ThresholdKey({ threshold: 2, keys: { keys: [] } }));
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const createAcc = tx.txBody.cryptoCreateAccount;
        if (createAcc && createAcc.key && createAcc.key.thresholdKey) {
            this.initOwners(createAcc.key.thresholdKey);
        }
    }
    initOwners(keys) {
        if (keys.keys && keys.keys.keys) {
            keys.keys.keys.forEach((key) => {
                this.owner(utils_1.toHex(key.ed25519));
            });
        }
    }
    // endregion
    // region Common builder methods
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} address - The public key of the owner's account
     * @returns {WalletInitializationBuilder} - This wallet initialization builder
     */
    owner(address) {
        if (this._owners.length >= constants_1.DEFAULT_SIGNER_NUMBER) {
            throw new sdk_core_1.BuildTransactionError('A maximum of ' + constants_1.DEFAULT_SIGNER_NUMBER + ' owners can be set for a multisig wallet');
        }
        if (!utils_1.isValidPublicKey(address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address: ' + address);
        }
        if (this._owners.includes(address)) {
            throw new sdk_core_1.BuildTransactionError('Repeated owner address: ' + address);
        }
        this._owners.push(address);
        return this;
    }
    // endregion
    // region Validators
    validateMandatoryFields() {
        if (this._owners === undefined) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: missing wallet owners');
        }
        if (this._owners.length !== constants_1.DEFAULT_SIGNER_NUMBER) {
            throw new sdk_core_1.BuildTransactionError(`Invalid transaction: wrong number of owners -- required: ${constants_1.DEFAULT_SIGNER_NUMBER}, found: ${this._owners.length}`);
        }
        super.validateMandatoryFields();
    }
}
exports.WalletInitializationBuilder = WalletInitializationBuilder;
//# sourceMappingURL=data:application/json;base64,