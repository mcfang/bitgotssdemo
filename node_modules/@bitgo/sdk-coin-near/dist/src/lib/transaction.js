"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const constants_1 = require("./constants");
const utils_1 = __importDefault(require("./utils"));
const keyPair_1 = require("./keyPair");
const nearAPI = __importStar(require("near-api-js"));
const sha256 = __importStar(require("js-sha256"));
const bs58_1 = __importDefault(require("bs58"));
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
    }
    get nearTransaction() {
        return this._nearTransaction;
    }
    set nearTransaction(tx) {
        this._nearTransaction = tx;
        this._id = utils_1.default.base58Encode(this.getTransactionHash());
    }
    /** @inheritdoc */
    canSign(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
            return true;
        }
        catch {
            return false;
        }
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._nearTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        const txSeralized = this._nearSignedTransaction
            ? Buffer.from(this._nearSignedTransaction.encode()).toString('base64')
            : Buffer.from(this._nearTransaction.encode()).toString('base64');
        return txSeralized;
    }
    /** @inheritdoc */
    toJson() {
        if (!this._nearTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction data');
        }
        let parsedAction = {};
        if (this._nearTransaction.actions[0].enum === 'transfer') {
            parsedAction = { transfer: this._nearTransaction.actions[0].transfer };
        }
        else if (this._nearTransaction.actions[0].enum === 'functionCall') {
            const functionCallObject = this._nearTransaction.actions[0].functionCall;
            parsedAction = {
                functionCall: {
                    methodName: functionCallObject.methodName,
                    args: JSON.parse(Buffer.from(functionCallObject.args).toString()),
                    gas: functionCallObject.gas.toString(),
                    deposit: functionCallObject.deposit.toString(),
                },
            };
        }
        return {
            id: this._id,
            signerId: this._nearTransaction.signerId,
            publicKey: this._nearTransaction.publicKey.toString(),
            nonce: this._nearTransaction.nonce,
            receiverId: this._nearTransaction.receiverId,
            actions: [parsedAction],
            signature: typeof this._nearSignedTransaction === 'undefined' ? undefined : this._nearSignedTransaction.signature,
        };
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    setTransactionType(transactionType) {
        this._type = transactionType;
    }
    /**
     * Sets this transaction payload
     *
     * @param rawTx
     */
    fromRawTransaction(rawTx) {
        const bufferRawTransaction = constants_1.HEX_REGEX.test(rawTx) ? Buffer.from(rawTx, 'hex') : Buffer.from(rawTx, 'base64');
        try {
            const signedTx = nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.SignedTransaction, bufferRawTransaction);
            signedTx.transaction.nonce = parseInt(signedTx.transaction.nonce.toString(), 10);
            this._nearSignedTransaction = signedTx;
            this._nearTransaction = signedTx.transaction;
            this._id = utils_1.default.base58Encode(this.getTransactionHash());
        }
        catch (e) {
            try {
                const unsignedTx = nearAPI.utils.serialize.deserialize(nearAPI.transactions.SCHEMA, nearAPI.transactions.Transaction, bufferRawTransaction);
                unsignedTx.nonce = parseInt(unsignedTx.nonce.toString(), 10);
                this._nearTransaction = unsignedTx;
                this._id = utils_1.default.base58Encode(this.getTransactionHash());
            }
            catch (e) {
                throw new sdk_core_1.InvalidTransactionError('unable to build transaction from raw');
            }
        }
        this.loadInputsAndOutputs();
    }
    /**
     * Sign this transaction
     *
     * @param {KeyPair} signer key
     */
    sign(signer) {
        if (!this._nearTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction to sign');
        }
        const serializedTxHash = this.getTransactionHash();
        const signature = signer.signMessageinUint8Array(serializedTxHash);
        this._nearSignedTransaction = new nearAPI.transactions.SignedTransaction({
            transaction: this._nearTransaction,
            signature: new nearAPI.transactions.Signature({
                keyType: this._nearTransaction.publicKey.keyType,
                data: signature,
            }),
        });
        this.loadInputsAndOutputs();
    }
    /**
     * set transaction type by staking contract method names.
     * @param methodName method name to match and set the transaction type
     */
    setTypeByStakingMethod(methodName) {
        switch (methodName) {
            case constants_1.StakingContractMethodNames.DepositAndStake:
                this.setTransactionType(sdk_core_1.TransactionType.StakingActivate);
                break;
            case constants_1.StakingContractMethodNames.Unstake:
                this.setTransactionType(sdk_core_1.TransactionType.StakingDeactivate);
                break;
            case constants_1.StakingContractMethodNames.Withdraw:
                this.setTransactionType(sdk_core_1.TransactionType.StakingWithdraw);
                break;
        }
    }
    /**
     * Check if method is allowed on Near account-lib implementation.
     * This method should check on all contracts added to Near.
     * @param methodName contract call method name to check if its allowed.
     */
    validateMethodAllowed(methodName) {
        if (!Object.values(constants_1.StakingContractMethodNames).some((item) => item === methodName)) {
            throw new sdk_core_1.InvalidTransactionError('unsupported function call in raw transaction');
        }
    }
    /**
     * Build input and output field for this transaction
     *
     */
    loadInputsAndOutputs() {
        if (this._nearTransaction.actions.length !== 1) {
            throw new sdk_core_1.InvalidTransactionError('too many actions in raw transaction');
        }
        const action = this._nearTransaction.actions[0];
        switch (action.enum) {
            case 'transfer':
                this.setTransactionType(sdk_core_1.TransactionType.Send);
                break;
            case 'functionCall':
                const methodName = action.functionCall.methodName;
                this.validateMethodAllowed(methodName);
                this.setTypeByStakingMethod(methodName);
                break;
            default:
                throw new sdk_core_1.InvalidTransactionError('unsupported action in raw transaction');
        }
        const outputs = [];
        const inputs = [];
        switch (this.type) {
            case sdk_core_1.TransactionType.Send:
                const amount = action.transfer.deposit.toString();
                inputs.push({
                    address: this._nearTransaction.signerId,
                    value: amount,
                    coin: this._coinConfig.name,
                });
                outputs.push({
                    address: this._nearTransaction.receiverId,
                    value: amount,
                    coin: this._coinConfig.name,
                });
                break;
            case sdk_core_1.TransactionType.StakingActivate:
                const stakingAmount = action.functionCall.deposit.toString();
                inputs.push({
                    address: this._nearTransaction.signerId,
                    value: stakingAmount,
                    coin: this._coinConfig.name,
                });
                outputs.push({
                    address: this._nearTransaction.receiverId,
                    value: stakingAmount,
                    coin: this._coinConfig.name,
                });
                break;
            case sdk_core_1.TransactionType.StakingWithdraw:
                const stakingWithdrawAmount = JSON.parse(Buffer.from(action.functionCall.args).toString()).amount;
                inputs.push({
                    address: this._nearTransaction.receiverId,
                    value: stakingWithdrawAmount,
                    coin: this._coinConfig.name,
                });
                outputs.push({
                    address: this._nearTransaction.signerId,
                    value: stakingWithdrawAmount,
                    coin: this._coinConfig.name,
                });
                break;
        }
        this._outputs = outputs;
        this._inputs = inputs;
    }
    /**
     * Returns a complete explanation for a transfer transaction
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainTransferTransaction(json, explanationResult) {
        var _a, _b;
        return {
            ...explanationResult,
            outputAmount: ((_a = json.actions[0].transfer) === null || _a === void 0 ? void 0 : _a.deposit.toString()) || '',
            outputs: [
                {
                    address: json.receiverId,
                    amount: ((_b = json.actions[0].transfer) === null || _b === void 0 ? void 0 : _b.deposit.toString()) || '',
                },
            ],
        };
    }
    /**
     * Returns a complete explanation for a staking activate transaction
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainStakingActivateTransaction(json, explanationResult) {
        var _a, _b;
        return {
            ...explanationResult,
            outputAmount: ((_a = json.actions[0].functionCall) === null || _a === void 0 ? void 0 : _a.deposit.toString()) || '',
            outputs: [
                {
                    address: json.receiverId,
                    amount: ((_b = json.actions[0].functionCall) === null || _b === void 0 ? void 0 : _b.deposit.toString()) || '',
                },
            ],
        };
    }
    /**
     * Returns a complete explanation for a staking withdraw transaction
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainStakingWithdrawTransaction(json, explanationResult) {
        var _a;
        const amount = (_a = json.actions[0].functionCall) === null || _a === void 0 ? void 0 : _a.args.amount;
        return {
            ...explanationResult,
            outputAmount: amount,
            outputs: [
                {
                    address: json.signerId,
                    amount: amount,
                },
            ],
        };
    }
    /** @inheritdoc */
    explainTransaction() {
        const result = this.toJson();
        const displayOrder = ['outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'type'];
        const outputs = [];
        const explanationResult = {
            // txhash used to identify the transactions
            id: result.id || '',
            displayOrder,
            outputAmount: '0',
            changeAmount: '0',
            changeOutputs: [],
            outputs,
            fee: { fee: '' },
            type: this.type,
        };
        switch (this.type) {
            case sdk_core_1.TransactionType.Send:
                return this.explainTransferTransaction(result, explanationResult);
            case sdk_core_1.TransactionType.StakingActivate:
                return this.explainStakingActivateTransaction(result, explanationResult);
            case sdk_core_1.TransactionType.StakingDeactivate:
                return explanationResult;
            case sdk_core_1.TransactionType.StakingWithdraw:
                return this.explainStakingWithdrawTransaction(result, explanationResult);
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
    }
    getTransactionHash() {
        const serializedTx = nearAPI.utils.serialize.serialize(nearAPI.transactions.SCHEMA, this._nearTransaction);
        return new Uint8Array(sha256.sha256.array(serializedTx));
    }
    get signablePayload() {
        if (!this._nearTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction');
        }
        return Buffer.from(this.getTransactionHash());
    }
    /**
     * Constructs a signed payload using construct.signTx
     * This method will be called during the build step if a TSS signature
     * is added and will set the signTransaction which is the txHex that will be broadcasted
     * As well as add the signature used to sign to the signature array in hex format
     *
     * @param {Buffer} signature The signature to be added to a near transaction
     */
    constructSignedPayload(signature) {
        this._nearSignedTransaction = new nearAPI.transactions.SignedTransaction({
            transaction: this._nearTransaction,
            signature: new nearAPI.transactions.Signature({
                keyType: this._nearTransaction.publicKey.keyType,
                data: signature,
            }),
        });
        this.loadInputsAndOutputs();
    }
    /** @inheritdoc **/
    get signature() {
        const signatures = [];
        if (this._nearSignedTransaction) {
            signatures.push(bs58_1.default.encode(this._nearSignedTransaction.signature.data));
        }
        return signatures;
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,