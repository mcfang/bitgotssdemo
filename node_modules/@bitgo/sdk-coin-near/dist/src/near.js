"use strict";
/**
 * @prettier
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Near = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const _ = __importStar(require("lodash"));
const base58 = __importStar(require("bs58"));
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
const nearAPI = __importStar(require("near-api-js"));
const request = __importStar(require("superagent"));
const lib_1 = require("./lib");
const utils_1 = __importDefault(require("./lib/utils"));
class Near extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        this.network = this.bitgo.getEnv() === 'prod' ? 'main' : 'test';
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Near(bitgo, staticsCoin);
    }
    allowsAccountConsolidations() {
        return true;
    }
    /**
     * Flag indicating if this coin supports TSS wallets.
     * @returns {boolean} True if TSS Wallets can be created for this coin
     */
    supportsTss() {
        return true;
    }
    getMPCAlgorithm() {
        return 'eddsa';
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getBaseChain() {
        return this.getChain();
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed() {
        return false;
    }
    /**
     * Generate ed25519 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? new lib_1.KeyPair({ seed }) : new lib_1.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPub(pub) {
        return utils_1.default.isValidPublicKey(pub);
    }
    /**
     * Return boolean indicating whether the supplied private key is a valid near private key
     *
     * @param {String} prv the prv to be checked
     * @returns {Boolean} is it valid?
     */
    isValidPrv(prv) {
        return utils_1.default.isValidPrivateKey(prv);
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {String} address the pub to be checked
     * @returns {Boolean} is it valid?
     */
    isValidAddress(address) {
        return utils_1.default.isValidAddress(address);
    }
    /** @inheritDoc */
    async signMessage(key, message) {
        const nearKeypair = new lib_1.KeyPair({ prv: key.prv });
        if (Buffer.isBuffer(message)) {
            message = base58.encode(message);
        }
        return Buffer.from(nearKeypair.signMessage(message));
    }
    /**
     * Explain/parse transaction
     * @param params
     */
    async explainTransaction(params) {
        const factory = this.getBuilder();
        let rebuiltTransaction;
        const txRaw = params.txPrebuild.txHex;
        try {
            const transactionBuilder = factory.from(txRaw);
            rebuiltTransaction = await transactionBuilder.build();
        }
        catch {
            throw new Error('Invalid transaction');
        }
        return rebuiltTransaction.explainTransaction();
    }
    verifySignTransactionParams(params) {
        const prv = params.prv;
        const txHex = params.txPrebuild.txHex;
        if (_.isUndefined(txHex)) {
            throw new Error('missing txPrebuild parameter');
        }
        if (!_.isString(txHex)) {
            throw new Error(`txPrebuild must be an object, got type ${typeof txHex}`);
        }
        if (_.isUndefined(prv)) {
            throw new Error('missing prv parameter to sign transaction');
        }
        if (!_.isString(prv)) {
            throw new Error(`prv must be a string, got type ${typeof prv}`);
        }
        if (!_.has(params.txPrebuild, 'key')) {
            throw new Error('missing public key parameter to sign transaction');
        }
        // if we are receiving addresses do not try to convert them
        const signer = !utils_1.default.isValidAddress(params.txPrebuild.key)
            ? new lib_1.KeyPair({ pub: params.txPrebuild.key }).getAddress()
            : params.txPrebuild.key;
        return { txHex, prv, signer };
    }
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {TransactionPrebuild} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param callback
     * @returns {Bluebird<SignedTransaction>}
     */
    async signTransaction(params) {
        const factory = this.getBuilder();
        const txBuilder = factory.from(params.txPrebuild.txHex);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid transaction');
        }
        const serializedTx = transaction.toBroadcastFormat();
        return {
            txHex: serializedTx,
        };
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     */
    async recover(params) {
        if (!params.bitgoKey) {
            throw new Error('missing bitgoKey');
        }
        if (!params.recoveryDestination || !this.isValidAddress(params.recoveryDestination)) {
            throw new Error('invalid recoveryDestination');
        }
        let startIdx = params.startingScanIndex;
        if (startIdx === undefined) {
            startIdx = 0;
        }
        else if (!Number.isInteger(startIdx) || startIdx < 0) {
            throw new Error('Invalid starting index to scan for addresses');
        }
        let numIteration = params.scan;
        if (numIteration === undefined) {
            numIteration = 20;
        }
        else if (!Number.isInteger(numIteration) || numIteration <= 0) {
            throw new Error('Invalid scanning factor');
        }
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        const isUnsignedSweep = !params.userKey && !params.backupKey && !params.walletPassphrase;
        const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
        const { storageAmountPerByte, transferCost, receiptConfig } = await this.getProtocolConfig();
        for (let i = startIdx; i < numIteration + startIdx; i++) {
            const currPath = `m/${i}`;
            const accountId = MPC.deriveUnhardened(bitgoKey, currPath).slice(0, 64);
            let availableBalance = new bignumber_js_1.default(0);
            try {
                availableBalance = new bignumber_js_1.default(await this.getAccountBalance(accountId, storageAmountPerByte));
            }
            catch (e) {
                // UNKNOWN_ACCOUNT error indicates that the address has not partake in any transaction so far, so we will
                // treat it as a zero balance address
                if (e.message !== 'UNKNOWN_ACCOUNT') {
                    throw e;
                }
            }
            if (availableBalance.toNumber() <= 0) {
                continue;
            }
            // first build the unsigned txn
            const bs58EncodedPublicKey = nearAPI.utils.serialize.base_encode(new Uint8Array(Buffer.from(accountId, 'hex')));
            const { nonce, blockHash } = await this.getAccessKey({ accountId, bs58EncodedPublicKey });
            const gasPrice = await this.getGasPrice(blockHash);
            const gasPriceFirstBlock = new bignumber_js_1.default(gasPrice);
            const gasPriceSecondBlock = gasPriceFirstBlock.multipliedBy(1.05);
            const totalGasRequired = new bignumber_js_1.default(transferCost.sendSir)
                .plus(receiptConfig.sendSir)
                .multipliedBy(gasPriceFirstBlock)
                .plus(new bignumber_js_1.default(transferCost.execution).plus(receiptConfig.execution).multipliedBy(gasPriceSecondBlock));
            // adding some padding to make sure the gas doesn't go below required gas by network
            const totalGasWithPadding = totalGasRequired.multipliedBy(1.5);
            const feeReserve = bignumber_js_1.default(statics_1.Networks[this.network].near.feeReserve);
            const storageReserve = bignumber_js_1.default(statics_1.Networks[this.network].near.storageReserve);
            const netAmount = availableBalance.minus(totalGasWithPadding).minus(feeReserve).minus(storageReserve);
            if (netAmount.toNumber() <= 0) {
                throw new Error(`Found address ${i} with non-zero fund but fund is insufficient to support a recover ` +
                    `transaction. Please start the next scan at address index ${i + 1}.`);
            }
            const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
            const txBuilder = factory
                .getTransferBuilder()
                .sender(accountId, accountId)
                .nonce(nonce)
                .receiverId(params.recoveryDestination)
                .recentBlockHash(blockHash)
                .amount(netAmount.toFixed());
            if (!isUnsignedSweep) {
                const unsignedTransaction = (await txBuilder.build());
                // Sign the txn
                /* ***************** START **************************************/
                // TODO(BG-51092): This looks like a common part which can be extracted out too
                if (!params.userKey) {
                    throw new Error('missing userKey');
                }
                if (!params.backupKey) {
                    throw new Error('missing backupKey');
                }
                if (!params.walletPassphrase) {
                    throw new Error('missing wallet passphrase');
                }
                // Clean up whitespace from entered values
                const userKey = params.userKey.replace(/\s/g, '');
                const backupKey = params.backupKey.replace(/\s/g, '');
                // Decrypt private keys from KeyCard values
                let userPrv;
                try {
                    userPrv = this.bitgo.decrypt({
                        input: userKey,
                        password: params.walletPassphrase,
                    });
                }
                catch (e) {
                    throw new Error(`Error decrypting user keychain: ${e.message}`);
                }
                /** TODO BG-52419 Implement Codec for parsing */
                const userSigningMaterial = JSON.parse(userPrv);
                let backupPrv;
                try {
                    backupPrv = this.bitgo.decrypt({
                        input: backupKey,
                        password: params.walletPassphrase,
                    });
                }
                catch (e) {
                    throw new Error(`Error decrypting backup keychain: ${e.message}`);
                }
                const backupSigningMaterial = JSON.parse(backupPrv);
                /* ********************** END ***********************************/
                // add signature
                const signatureHex = await sdk_core_1.EDDSAMethods.getTSSSignature(userSigningMaterial, backupSigningMaterial, currPath, unsignedTransaction);
                const publicKeyObj = { pub: accountId };
                txBuilder.addSignature(publicKeyObj, signatureHex);
            }
            const completedTransaction = await txBuilder.build();
            const serializedTx = completedTransaction.toBroadcastFormat();
            return { serializedTx: serializedTx, scanIndex: i };
        }
        throw new Error('Did not find an address with funds to recover');
    }
    /**
     * Make a request to one of the public EOS nodes available
     * @param params.payload
     */
    async getDataFromNode(params) {
        const nodeUrls = this.getPublicNodeUrls();
        for (const nodeUrl of nodeUrls) {
            try {
                return await request.post(nodeUrl).send(params.payload);
            }
            catch (e) {
                console.debug(e);
            }
        }
        throw new Error(`Unable to call endpoint: '/' from nodes: ${_.join(nodeUrls, ', ')}`);
    }
    async getAccessKey({ accountId, bs58EncodedPublicKey, }) {
        const response = await this.getDataFromNode({
            payload: {
                jsonrpc: '2.0',
                id: 'dontcare',
                method: 'query',
                params: {
                    request_type: 'view_access_key',
                    finality: 'final',
                    account_id: accountId,
                    public_key: bs58EncodedPublicKey,
                },
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        const accessKey = response.body.result;
        return { nonce: accessKey.nonce + 1, blockHash: accessKey.block_hash };
    }
    async getAccountBalance(accountId, storageAmountPerByte) {
        var _a;
        const response = await this.getDataFromNode({
            payload: {
                jsonrpc: '2.0',
                id: 'dontcare',
                method: 'query',
                params: {
                    request_type: 'view_account',
                    finality: 'final',
                    account_id: accountId,
                },
            },
        });
        if (response.status !== 200) {
            throw new Error('Failed to query account information');
        }
        const errorCause = (_a = response.body.error) === null || _a === void 0 ? void 0 : _a.cause.name;
        if (errorCause !== undefined) {
            throw new Error(errorCause);
        }
        const account = response.body.result;
        const costPerByte = new bignumber_js_1.default(storageAmountPerByte);
        const stateStaked = new bignumber_js_1.default(account.storage_usage).multipliedBy(costPerByte);
        const staked = new bignumber_js_1.default(account.locked);
        const totalBalance = new bignumber_js_1.default(account.amount).plus(staked);
        const availableBalance = totalBalance.minus(bignumber_js_1.default.max(staked, stateStaked));
        return availableBalance.toString();
    }
    async getProtocolConfig() {
        const response = await this.getDataFromNode({
            payload: {
                jsonrpc: '2.0',
                id: 'dontcare',
                method: 'EXPERIMENTAL_protocol_config',
                params: {
                    finality: 'final',
                },
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        const config = response.body.result;
        const storageAmountPerByte = config.runtime_config.storage_amount_per_byte;
        const transferCostFromNetwork = config.runtime_config.transaction_costs.action_creation_config.transfer_cost;
        const transferCost = {
            sendSir: transferCostFromNetwork.send_sir,
            sendNotSir: transferCostFromNetwork.send_not_sir,
            execution: transferCostFromNetwork.execution,
        };
        const receiptConfigFromNetwork = config.runtime_config.transaction_costs.action_receipt_creation_config;
        const receiptConfig = {
            sendSir: receiptConfigFromNetwork.send_sir,
            sendNotSir: receiptConfigFromNetwork.send_not_sir,
            execution: receiptConfigFromNetwork.execution,
        };
        return { storageAmountPerByte, transferCost, receiptConfig };
    }
    async getGasPrice(blockHash) {
        const response = await this.getDataFromNode({
            payload: {
                jsonrpc: '2.0',
                id: 'dontcare',
                method: 'gas_price',
                params: [blockHash],
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return response.body.result.gas_price;
    }
    getPublicNodeUrls() {
        return sdk_core_1.Environments[this.bitgo.getEnv()].nearNodeUrls;
    }
    async parseTransaction(params) {
        const transactionExplanation = await this.explainTransaction({
            txPrebuild: params.txPrebuild,
            publicKey: params.publicKey,
            feeInfo: params.feeInfo,
        });
        if (!transactionExplanation) {
            throw new Error('Invalid transaction');
        }
        const nearTransaction = transactionExplanation;
        if (nearTransaction.outputs.length <= 0) {
            return {
                inputs: [],
                outputs: [],
            };
        }
        const senderAddress = nearTransaction.outputs[0].address;
        const feeAmount = new bignumber_js_1.default(nearTransaction.fee.fee === '' ? '0' : nearTransaction.fee.fee);
        // assume 1 sender, who is also the fee payer
        const inputs = [
            {
                address: senderAddress,
                amount: new bignumber_js_1.default(nearTransaction.outputAmount).plus(feeAmount).toFixed(),
            },
        ];
        const outputs = nearTransaction.outputs.map((output) => {
            return {
                address: output.address,
                amount: new bignumber_js_1.default(output.amount).toFixed(),
            };
        });
        return {
            inputs,
            outputs,
        };
    }
    async isWalletAddress(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    async verifyTransaction(params) {
        var _a;
        let totalAmount = new bignumber_js_1.default(0);
        const coinConfig = statics_1.coins.get(this.getChain());
        const { txPrebuild: txPrebuild, txParams: txParams } = params;
        const transaction = new lib_1.Transaction(coinConfig);
        const rawTx = txPrebuild.txHex;
        if (!rawTx) {
            throw new Error('missing required tx prebuild property txHex');
        }
        transaction.fromRawTransaction(rawTx);
        const explainedTx = transaction.explainTransaction();
        // users do not input recipients for consolidation requests as they are generated by the server
        if (txParams.recipients !== undefined) {
            const filteredRecipients = (_a = txParams.recipients) === null || _a === void 0 ? void 0 : _a.map((recipient) => _.pick(recipient, ['address', 'amount']));
            const filteredOutputs = explainedTx.outputs.map((output) => _.pick(output, ['address', 'amount']));
            if (!_.isEqual(filteredOutputs, filteredRecipients)) {
                throw new Error('Tx outputs does not match with expected txParams recipients');
            }
            for (const recipients of txParams.recipients) {
                totalAmount = totalAmount.plus(recipients.amount);
            }
            if (!totalAmount.isEqualTo(explainedTx.outputAmount)) {
                throw new Error('Tx total amount does not match with expected total amount field');
            }
        }
        return true;
    }
    getBuilder() {
        return new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getBaseChain()));
    }
}
exports.Near = Near;
Near.initialized = false;
//# sourceMappingURL=data:application/json;base64,