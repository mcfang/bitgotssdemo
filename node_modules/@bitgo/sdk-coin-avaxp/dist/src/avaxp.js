"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvaxP = void 0;
const statics_1 = require("@bitgo/statics");
const sdk_core_1 = require("@bitgo/sdk-core");
const AvaxpLib = __importStar(require("./lib"));
const utils_1 = __importDefault(require("./lib/utils"));
const lodash_1 = __importDefault(require("lodash"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethereumjs_util_1 = require("ethereumjs-util");
class AvaxP extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new AvaxP(bitgo, staticsCoin);
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    /**
     * Check if staking txn is valid, based on expected tx params.
     *
     * @param {AvaxpTransactionStakingOptions} stakingOptions expected staking params to check against
     * @param {AvaxpLib.TransactionExplanation} explainedTx explained staking transaction
     */
    validateStakingTx(stakingOptions, explainedTx) {
        const filteredRecipients = [{ address: stakingOptions.nodeID, amount: stakingOptions.amount }];
        const filteredOutputs = explainedTx.outputs.map((output) => lodash_1.default.pick(output, ['address', 'amount']));
        if (!lodash_1.default.isEqual(filteredOutputs, filteredRecipients)) {
            throw new Error('Tx outputs does not match with expected txParams');
        }
        if ((stakingOptions === null || stakingOptions === void 0 ? void 0 : stakingOptions.amount) !== explainedTx.outputAmount) {
            throw new Error('Tx total amount does not match with expected total amount field');
        }
    }
    /**
     * Check if export txn is valid, based on expected tx params.
     *
     * @param {ITransactionRecipient[]} recipients expected recipients and info
     * @param {string} memo txn memo to verify
     * @param {AvaxpLib.TransactionExplanation} explainedTx explained export transaction
     */
    validateExportTx(recipients, memo, explainedTx) {
        if (recipients.length !== 1 || explainedTx.outputs.length !== 1) {
            throw new Error('Export Tx requires one recipient');
        }
        const recipientAmount = new bignumber_js_1.default(recipients[0].amount);
        if (recipientAmount.isGreaterThan(explainedTx.outputAmount) ||
            recipientAmount.plus(explainedTx.fee.fee).isLessThan(explainedTx.outputAmount)) {
            throw new Error(`Tx total amount ${explainedTx.outputAmount} does not match with expected total amount field ${recipientAmount} and fixed fee ${explainedTx.fee.fee}`);
        }
        if (explainedTx.outputs && !utils_1.default.isValidAddress(explainedTx.outputs[0].address)) {
            throw new Error(`Invalid P-chain address ${explainedTx.outputs[0].address}`);
        }
        const memoValue = memo.split('~');
        if (!ethereumjs_util_1.isValidAddress(memoValue[0])) {
            throw new Error(`Txn memo must contain valid C-chain address destination, received: ${memo}`);
        }
        else if (memoValue[0] !== recipients[0].address) {
            throw new Error(`Invalid C-chain receive address ${memoValue[0]}, does not match expected params address ${recipients[0].address}`);
        }
    }
    /**
     * Check if import txn into P is valid, based on expected tx params.
     *
     * @param {AvaxpLib.AvaxpEntry[]} explainedTxInputs tx inputs (unspents to be imported)
     * @param {AvaxpTransactionParams} txParams expected tx info to check against
     */
    validateImportTx(explainedTxInputs, txParams) {
        if (txParams.unspents) {
            if (explainedTxInputs.length !== txParams.unspents.length) {
                throw new Error(`Expected ${txParams.unspents.length} UTXOs, transaction had ${explainedTxInputs.length}`);
            }
            const unspents = new Set(txParams.unspents);
            for (const unspent of explainedTxInputs) {
                if (!unspents.has(unspent.id)) {
                    throw new Error(`Transaction should not contain the UTXO: ${unspent.id}`);
                }
            }
        }
    }
    async verifyTransaction(params) {
        const txHex = params.txPrebuild && params.txPrebuild.txHex;
        if (!txHex) {
            throw new Error('missing required tx prebuild property txHex');
        }
        let tx;
        try {
            const txBuilder = this.getBuilder().from(txHex);
            tx = await txBuilder.build();
        }
        catch (error) {
            throw new Error('Invalid transaction');
        }
        const explainedTx = tx.explainTransaction();
        const { type, stakingOptions } = params.txParams;
        // TODO(BG-62112): change ImportToC type to Import
        if (!type || (type !== 'ImportToC' && explainedTx.type !== sdk_core_1.TransactionType[type])) {
            throw new Error('Tx type does not match with expected txParams type');
        }
        switch (explainedTx.type) {
            case sdk_core_1.TransactionType.AddDelegator:
            case sdk_core_1.TransactionType.AddValidator:
                if (params.txParams.memo && explainedTx.memo !== params.txParams.memo.value) {
                    throw new Error('Tx memo does not match with expected txParams memo');
                }
                this.validateStakingTx(stakingOptions, explainedTx);
                break;
            case sdk_core_1.TransactionType.Export:
                if (!params.txParams.recipients) {
                    throw new Error('Export Tx requires a recipient');
                }
                else if (!explainedTx.memo) {
                    throw new Error('Export Tx requires a memo with c-chain address');
                }
                else {
                    this.validateExportTx(params.txParams.recipients, explainedTx.memo, explainedTx);
                }
                break;
            case sdk_core_1.TransactionType.Import:
                if (tx.isTransactionForCChain) {
                    // Import to C-chain
                    if ((params.txParams.recipients && params.txParams.recipients.length !== 0) ||
                        explainedTx.outputs.length !== 1) {
                        throw new Error('Expected 1 output in import txn and does not require recipients');
                    }
                }
                else {
                    // Import to P-chain
                    if (explainedTx.outputs.length !== 1) {
                        throw new Error('Expected 1 output in import txn');
                    }
                    this.validateImportTx(explainedTx.inputs, params.txParams);
                }
                break;
            default:
                throw new Error('Tx type is not supported yet');
        }
        return true;
    }
    /**
     * Check if address is valid, then make sure it matches the root address.
     *
     * @param params.address address to validate
     * @param params.keychains public keys to generate the wallet
     */
    async isWalletAddress(params) {
        const { address, keychains } = params;
        if (!this.isValidAddress(address)) {
            throw new sdk_core_1.InvalidAddressError(`invalid address: ${address}`);
        }
        if (!keychains || keychains.length !== 3) {
            throw new Error('Invalid keychains');
        }
        // multisig addresses are separated by ~
        const splitAddresses = address.split('~');
        // derive addresses from keychain
        const unlockAddresses = keychains.map((keychain) => new AvaxpLib.KeyPair({ pub: keychain.pub }).getAddress(this._staticsCoin.network.type));
        if (splitAddresses.length !== unlockAddresses.length) {
            throw new sdk_core_1.UnexpectedAddressError(`address validation failure: multisig address length does not match`);
        }
        if (!this.adressesArraysMatch(splitAddresses, unlockAddresses)) {
            throw new sdk_core_1.UnexpectedAddressError(`address validation failure: ${address} is not of this wallet`);
        }
        return true;
    }
    /**
     * Validate that two multisig address arrays have the same elements, order doesnt matter
     * @param addressArray1
     * @param addressArray2
     * @returns true if address arrays have the same addresses
     * @private
     */
    adressesArraysMatch(addressArray1, addressArray2) {
        return JSON.stringify(addressArray1.sort()) === JSON.stringify(addressArray2.sort());
    }
    /**
     * Generate Avaxp key pair
     *
     * @param {Buffer} seed - Seed from which the new keypair should be generated, otherwise a random seed is used
     * @returns {Object} object with generated pub and prv
     */
    generateKeyPair(seed) {
        const keyPair = seed ? new AvaxpLib.KeyPair({ seed }) : new AvaxpLib.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {string} pub the prv to be checked
     * @returns is it valid?
     */
    isValidPub(pub) {
        try {
            new AvaxpLib.KeyPair({ pub });
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Return boolean indicating whether input is valid private key for the coin
     *
     * @param {string} prv the prv to be checked
     * @returns is it valid?
     */
    isValidPrv(prv) {
        try {
            new AvaxpLib.KeyPair({ prv });
            return true;
        }
        catch (e) {
            return false;
        }
    }
    isValidAddress(address) {
        if (address === undefined) {
            return false;
        }
        // validate eth address for cross-chain txs to c-chain
        if (typeof address === 'string' && ethereumjs_util_1.isValidAddress(address)) {
            return true;
        }
        return AvaxpLib.Utils.isValidAddress(address);
    }
    /**
     * Signs Avaxp transaction
     */
    async signTransaction(params) {
        // deserialize raw transaction (note: fromAddress has onchain order)
        const txBuilder = this.getBuilder().from(params.txPrebuild.txHex);
        const key = params.prv;
        // push the keypair to signer array
        txBuilder.sign({ key });
        // build the transaction
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new sdk_core_1.InvalidTransactionError('Error while trying to build transaction');
        }
        return transaction.signature.length >= 2
            ? { txHex: transaction.toBroadcastFormat() }
            : { halfSigned: { txHex: transaction.toBroadcastFormat() } };
    }
    async feeEstimate(params) {
        // staking transactions are fee-less
        return { fee: '0' };
    }
    async parseTransaction(params) {
        return {};
    }
    /**
     * Explain a Avaxp transaction from txHex
     * @param params
     * @param callback
     */
    async explainTransaction(params) {
        var _a, _b;
        const txHex = (_a = params.txHex) !== null && _a !== void 0 ? _a : (_b = params === null || params === void 0 ? void 0 : params.halfSigned) === null || _b === void 0 ? void 0 : _b.txHex;
        if (!txHex) {
            throw new Error('missing transaction hex');
        }
        try {
            const txBuilder = this.getBuilder().from(txHex);
            const tx = await txBuilder.build();
            return tx.explainTransaction();
        }
        catch (e) {
            throw new Error(`Invalid transaction: ${e.message}`);
        }
    }
    recoverySignature(message, signature) {
        return AvaxpLib.Utils.recoverySignature(this._staticsCoin.network, message, signature);
    }
    async signMessage(key, message) {
        const prv = new AvaxpLib.KeyPair(key).getPrivateKey();
        if (!prv) {
            throw new sdk_core_1.SigningError('Invalid key pair options');
        }
        if (typeof message === 'string') {
            message = Buffer.from(message, 'hex');
        }
        return AvaxpLib.Utils.createSignature(this._staticsCoin.network, message, prv);
    }
    getBuilder() {
        return new AvaxpLib.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
    }
}
exports.AvaxP = AvaxP;
//# sourceMappingURL=data:application/json;base64,