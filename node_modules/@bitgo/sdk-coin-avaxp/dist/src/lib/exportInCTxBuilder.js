"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportInCTxBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const evm_1 = require("avalanche/dist/apis/evm");
const utils_1 = __importDefault(require("./utils"));
const avalanche_1 = require("avalanche");
const atomicInCTransactionBuilder_1 = require("./atomicInCTransactionBuilder");
class ExportInCTxBuilder extends atomicInCTransactionBuilder_1.AtomicInCTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /**
     * Utxos are not required in Export Tx in C-Chain.
     * Override utxos to prevent used by throwing a error.
     *
     * @param {DecodedUtxoObj[]} value ignored
     */
    utxos(value) {
        throw new sdk_core_1.BuildTransactionError('utxos are not required in Export Tx in C-Chain');
    }
    /**
     * Amount is a long that specifies the quantity of the asset that this output owns. Must be positive.
     * The transaction output amount add a fixed fee that will be paid upon import.
     *
     * @param {BN | string} amount The withdrawal amount
     */
    amount(amount) {
        const amountBN = avalanche_1.BN.isBN(amount) ? amount : new avalanche_1.BN(amount);
        this.validateAmount(amountBN);
        this._amount = amountBN;
        return this;
    }
    /**
     * Set the nonce of C-Chain sender address
     *
     * @param {number | string} nonce - number that can be only used once
     */
    nonce(nonce) {
        const nonceBN = new avalanche_1.BN(nonce);
        this.validateNonce(nonceBN);
        this._nonce = nonceBN;
        return this;
    }
    /**
     * Export tx target P wallet.
     *
     * @param pAddresses
     */
    to(pAddresses) {
        const pubKeys = pAddresses instanceof Array ? pAddresses : pAddresses.split('~');
        this.transaction._to = pubKeys.map(utils_1.default.parseAddress);
        return this;
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Export;
    }
    initBuilder(tx) {
        const baseTx = tx.getUnsignedTx().getTransaction();
        if (baseTx.getNetworkID() !== this.transaction._networkID ||
            !baseTx.getBlockchainID().equals(this.transaction._blockchainID)) {
            throw new Error('Network or blockchain is not equals');
        }
        if (!this.verifyTxType(baseTx)) {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
        // The outputs is a multisign P-Chain address result.
        // It's expected to have only one outputs to the destination P-Chain address.
        const outputs = baseTx.getExportedOutputs();
        if (outputs.length !== 1) {
            throw new sdk_core_1.BuildTransactionError('Transaction can have one output');
        }
        const output = outputs[0];
        if (!output.getAssetID().equals(this.transaction._assetId)) {
            throw new Error('AssetID are not equals');
        }
        // The inputs is not an utxo.
        // It's expected to have only one input form C-Chain address.
        const inputs = baseTx.getInputs();
        if (inputs.length !== 1) {
            throw new sdk_core_1.BuildTransactionError('Transaction can have one inputs');
        }
        const input = inputs[0];
        this.transaction._to = output.getOutput().getAddresses();
        const inputAmount = new avalanche_1.BN(input.amount);
        const outputAmount = output.getOutput().getAmount();
        const fee = inputAmount.sub(outputAmount);
        this._amount = outputAmount;
        this.transaction._fee.feeRate = fee.toNumber() - Number(this.fixedFee);
        this.transaction._fee.fee = fee.toString();
        this.transaction._fee.size = 1;
        this.transaction._fromAddresses = [input.getAddress()];
        this._nonce = new avalanche_1.BN(input.nonce);
        this.transaction.setTransaction(tx);
        return this;
    }
    static verifyTxType(baseTx) {
        return baseTx.getTypeID() === evm_1.EVMConstants.EXPORTTX;
    }
    verifyTxType(baseTx) {
        return ExportInCTxBuilder.verifyTxType(baseTx);
    }
    /**
     * Build the export in C-chain transaction
     * @protected
     */
    buildAvaxTransaction() {
        // if tx has credentials, tx shouldn't change
        if (this.transaction.hasCredentials)
            return;
        if (this._amount === undefined) {
            throw new Error('amount is required');
        }
        if (this.transaction._fromAddresses.length !== 1) {
            throw new Error('sender is one and required');
        }
        if (this.transaction._to.length === 0) {
            throw new Error('to is required');
        }
        if (!this.transaction._fee.feeRate) {
            throw new Error('fee rate is required');
        }
        if (!this._nonce === undefined) {
            throw new Error('nonce is required');
        }
        const txFee = Number(this.fixedFee);
        const fee = this.transaction._fee.feeRate + txFee;
        this.transaction._fee.fee = fee.toString();
        this.transaction._fee.size = 1;
        const input = new evm_1.EVMInput(this.transaction._fromAddresses[0], this._amount.addn(fee), this.transaction._assetId, this._nonce);
        input.addSignatureIdx(0, this.transaction._fromAddresses[0]);
        this.transaction.setTransaction(new evm_1.Tx(new evm_1.UnsignedTx(new evm_1.ExportTx(this.transaction._networkID, this.transaction._blockchainID, this._externalChainId, [input], [
            new evm_1.TransferableOutput(this.transaction._assetId, new evm_1.SECPTransferOutput(this._amount, this.transaction._to, this.transaction._locktime, this.transaction._threshold)),
        ])), 
        // TODO(BG-56700):  Improve canSign by check in addresses in empty credentials match signer
        [evm_1.SelectCredentialClass(input.getCredentialID(), [''].map(utils_1.default.createSig))]));
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new evm_1.Tx();
        tx.fromBuffer(avalanche_1.Buffer.from(rawTransaction, 'hex'));
        this.initBuilder(tx);
        return this.transaction;
    }
    /**
     * Check the amount is positive.
     * @param amount
     */
    validateNonce(nonce) {
        if (nonce.ltn(0)) {
            throw new sdk_core_1.BuildTransactionError('Nonce must be greater or equal than 0');
        }
    }
}
exports.ExportInCTxBuilder = ExportInCTxBuilder;
//# sourceMappingURL=data:application/json;base64,