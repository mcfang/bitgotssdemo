"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.utxoToInput = exports.recoverUtxos = void 0;
const iface_1 = require("./iface");
const avalanche_1 = require("avalanche");
const utils_1 = __importDefault(require("./utils"));
const sdk_core_1 = require("@bitgo/sdk-core");
/**
 * Inputs can be controlled but outputs get reordered in transactions
 * In order to make sure that the mapping is always correct we create an addressIndex which matches to the appropriate
 * signatureIdx
 * @param {StandardTransferableInput[]} utxos as transaction ins.
 * @returns the list of UTXOs
 */
function recoverUtxos(utxos) {
    return utxos.map((utxo) => {
        const secpInput = utxo.getInput();
        // use the same addressesIndex as existing ones in the inputs
        const addressesIndex = secpInput.getSigIdxs().map((s) => s.toBuffer().readUInt32BE(0));
        return {
            outputID: iface_1.SECP256K1_Transfer_Output,
            outputidx: utils_1.default.outputidxBufferToNumber(utxo.getOutputIdx()),
            txid: utils_1.default.cb58Encode(utxo.getTxID()),
            amount: secpInput.getAmount().toString(),
            threshold: addressesIndex.length,
            addresses: [],
            addressesIndex,
        };
    });
}
exports.recoverUtxos = recoverUtxos;
/**
 * Convert Utxos into inputs data. Input Objects changes regarding chains. This method return a plain object to be mapped late in chain input.
 * Sender is a list of owners address and utxo address must contains all of them.
 * Signers is a list of sender cut it in threshold size. Firsts senders are the signers.
 *
 * Output always get reordered we want to make sure we can always add signatures in the correct location.
 * Signatures array store signers address of the expected signature. Tx sign replace the address for the signature.
 * So the location of the signatures is guaranteed.
 *
 * To find the correct location for the signature, we use the output's addresses to create the signatureIdx in the order that we desire
 * 0: user key, 1: hsm key, 2: recovery key
 *
 * @param utxos
 * @param sender array of addresses
 * @param threshold number of signatures required
 * @return {
 *   inputs: InputData[];
 *   amount: BN;
 * } as total amount and inputs with signatures as signers address to be replaced.
 */
function utxoToInput(utxos, sender, threshold = 2) {
    // amount spent so far
    let currentTotal = new avalanche_1.BN(0);
    const inputs = utxos
        .filter((utxo) => utxo && utxo.outputID === iface_1.SECP256K1_Transfer_Output)
        .map((utxo) => {
        // validate the utxos
        const utxoAddresses = utxo.addresses.map((a) => utils_1.default.parseAddress(a));
        const addressesIndex = sender.map((a) => utxoAddresses.findIndex((u) => a.equals(u)));
        // addressesIndex should never have a mismatch
        if (addressesIndex.includes(-1)) {
            throw new sdk_core_1.BuildTransactionError('Addresses are inconsistent: ' + utxo.txid);
        }
        if (utxo.threshold !== threshold) {
            throw new sdk_core_1.BuildTransactionError('Threshold is inconsistent');
        }
        const txidBuf = utils_1.default.cb58Decode(utxo.txid);
        const amount = new avalanche_1.BN(utxo.amount);
        const outputIdx = utils_1.default.outputidxNumberToBuffer(utxo.outputidx);
        currentTotal = currentTotal.add(amount);
        const signers = addressesIndex
            .slice(0, threshold)
            .map((utxoIndex, senderIndex) => ({ utxoIndex, senderIndex }))
            .sort((a, b) => a.utxoIndex - b.utxoIndex);
        const signatures = signers.map(({ senderIndex }) => 
        // TODO(BG-56700):  Improve canSign by check in addresses in empty credentials match signer
        // HSM require empty signature.
        utils_1.default.createSig(senderIndex == 1 ? '' : sender[senderIndex].toString('hex')));
        const signaturesIdx = signers.map(({ utxoIndex }) => utxoIndex);
        return { amount, txidBuf, outputIdx, signaturesIdx, signatures };
    });
    return { inputs, amount: currentTotal };
}
exports.utxoToInput = utxoToInput;
//# sourceMappingURL=data:application/json;base64,