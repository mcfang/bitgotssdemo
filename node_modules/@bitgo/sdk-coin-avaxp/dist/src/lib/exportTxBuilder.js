"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportTxBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const atomicTransactionBuilder_1 = require("./atomicTransactionBuilder");
const platformvm_1 = require("avalanche/dist/apis/platformvm");
const avalanche_1 = require("avalanche");
const utils_1 = __importDefault(require("./utils"));
const utxoEngine_1 = require("./utxoEngine");
class ExportTxBuilder extends atomicTransactionBuilder_1.AtomicTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._externalChainId = utils_1.default.cb58Decode(this.transaction._network.cChainBlockchainID);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Export;
    }
    /**
     * Amount is a long that specifies the quantity of the asset that this output owns. Must be positive.
     *
     * @param {BN | string} amount The withdrawal amount
     */
    amount(value) {
        const valueBN = avalanche_1.BN.isBN(value) ? value : new avalanche_1.BN(value);
        this.validateAmount(valueBN);
        this._amount = valueBN;
        return this;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        super.initBuilder(tx);
        const baseTx = tx.getUnsignedTx().getTransaction();
        if (!this.verifyTxType(baseTx)) {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
        // The ExportOutputs is a {@link exportedOutputs} result.
        // It's expected to have only one outputs with the addresses of the sender.
        const outputs = baseTx.getExportOutputs();
        if (outputs.length != 1) {
            throw new sdk_core_1.BuildTransactionError('Transaction can have one external output');
        }
        const output = outputs[0];
        if (!output.getAssetID().equals(this.transaction._assetId)) {
            throw new Error('The Asset ID of the output does not match the transaction');
        }
        const secpOut = output.getOutput();
        this.transaction._locktime = secpOut.getLocktime();
        this.transaction._threshold = secpOut.getThreshold();
        // output addresses are the sender addresses
        this.transaction._fromAddresses = secpOut.getAddresses();
        this._externalChainId = baseTx.getDestinationChain();
        this._amount = secpOut.getAmount();
        this.transaction._utxos = utxoEngine_1.recoverUtxos(baseTx.getIns());
        return this;
    }
    static verifyTxType(baseTx) {
        return baseTx.getTypeID() === platformvm_1.PlatformVMConstants.EXPORTTX;
    }
    verifyTxType(baseTx) {
        return ExportTxBuilder.verifyTxType(baseTx);
    }
    /**
     * Create the internal avalanche transaction.
     * @protected
     */
    buildAvaxTransaction() {
        // if tx has credentials, tx shouldn't change
        if (this.transaction.hasCredentials)
            return;
        const { inputs, outputs, credentials } = this.createInputOutput(this._amount.add(new avalanche_1.BN(this.transaction.fee.fee)));
        this.transaction.setTransaction(new platformvm_1.Tx(new platformvm_1.UnsignedTx(new platformvm_1.ExportTx(this.transaction._networkID, this.transaction._blockchainID, outputs, inputs, this.transaction._memo, this._externalChainId, this.exportedOutputs())), credentials));
    }
    /**
     * Create the ExportedOut where the recipient address are the sender.
     * Later a importTx should complete the operations signing with the same keys.
     * @protected
     */
    exportedOutputs() {
        return [
            new platformvm_1.TransferableOutput(this.transaction._assetId, new platformvm_1.SECPTransferOutput(this._amount, this.transaction._fromAddresses, this.transaction._locktime, this.transaction._threshold)),
        ];
    }
}
exports.ExportTxBuilder = ExportTxBuilder;
//# sourceMappingURL=data:application/json;base64,