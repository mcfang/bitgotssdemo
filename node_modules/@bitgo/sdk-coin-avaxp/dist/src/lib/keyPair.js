"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyPair = exports.addressFormat = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const create_hash_1 = __importDefault(require("create-hash"));
const safe_buffer_1 = require("safe-buffer");
const avalanche_1 = require("avalanche");
const common_1 = require("avalanche/dist/common");
const utxo_lib_1 = require("@bitgo/utxo-lib");
const crypto_1 = require("crypto");
const utils_1 = __importDefault(require("./utils"));
const DEFAULT_SEED_SIZE_BYTES = 16;
var addressFormat;
(function (addressFormat) {
    addressFormat["testnet"] = "fuji";
    addressFormat["mainnet"] = "avax";
})(addressFormat = exports.addressFormat || (exports.addressFormat = {}));
class KeyPair extends sdk_core_1.Secp256k1ExtendedKeyPair {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param { KeyPairOptions } source Either a master seed, a private key, or a public key
     */
    constructor(source) {
        super(source);
        if (!source) {
            const seed = crypto_1.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            this.hdNode = utxo_lib_1.bip32.fromSeed(seed);
        }
        else if (sdk_core_1.isSeed(source)) {
            this.hdNode = utxo_lib_1.bip32.fromSeed(source.seed);
        }
        else if (sdk_core_1.isPrivateKey(source)) {
            this.recordKeysFromPrivateKey(source.prv);
        }
        else if (sdk_core_1.isPublicKey(source)) {
            this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (this.hdNode) {
            this.keyPair = sdk_core_1.Secp256k1ExtendedKeyPair.toKeyPair(this.hdNode);
        }
    }
    /**
     * Build a keypair from a protocol private key or extended private key.
     *
     * @param {string} prv A raw private key
     */
    recordKeysFromPrivateKey(prv) {
        if (prv.startsWith('PrivateKey-')) {
            this.keyPair = utxo_lib_1.ECPair.fromPrivateKey(Buffer.from(utils_1.default.cb58Decode(prv.split('-')[1])));
            return;
        }
        if (!utils_1.default.isValidPrivateKey(prv)) {
            throw new Error('Unsupported private key');
        }
        if (sdk_core_1.isValidXprv(prv)) {
            this.hdNode = utxo_lib_1.bip32.fromBase58(prv);
        }
        else {
            this.keyPair = utxo_lib_1.ECPair.fromPrivateKey(Buffer.from(prv.slice(0, 64), 'hex'));
        }
    }
    /**
     * Build an ECPair from a protocol public key or extended public key.
     *
     * @param {string} pub A raw public key
     */
    recordKeysFromPublicKey(pub) {
        try {
            if (sdk_core_1.isValidXpub(pub)) {
                this.hdNode = utxo_lib_1.bip32.fromBase58(pub);
            }
            else {
                this.keyPair = utxo_lib_1.ECPair.fromPublicKey(Buffer.from(pub, 'hex'));
            }
            return;
        }
        catch (e) {
            try {
                this.keyPair = utxo_lib_1.ECPair.fromPublicKey(Buffer.from(utils_1.default.cb58Decode(pub)));
                return;
            }
            catch (e) {
                throw new Error('Unsupported public key');
            }
        }
    }
    /**
     * Default keys format is a pair of Uint8Array keys
     *
     * @returns { DefaultKeys } The keys in the defined format
     */
    getKeys() {
        var _a;
        return {
            pub: this.getPublicKey({ compressed: true }).toString('hex'),
            prv: (_a = this.getPrivateKey()) === null || _a === void 0 ? void 0 : _a.toString('hex'),
        };
    }
    /**
     * Get an Avalanche P-Chain public mainnet address
     *
     * @param {string} format - avalanche hrp - select Mainnet(avax) or Testnet(fuji) for the address
     * @returns {string} The mainnet address derived from the public key
     */
    getAddress(format = 'mainnet') {
        return this.getAvaxPAddress(addressFormat[format]);
    }
    /**
     * Get a public address of public key.
     *
     * @param {string} hrp - select Mainnet(avax) or Testnet(fuji) for the address
     * @returns {string} The address derived from the public key and hrp
     */
    getAvaxPAddress(hrp) {
        const addressBuffer = avalanche_1.Buffer.from(this.getAddressBuffer());
        return utils_1.default.addressToString(hrp, 'P', addressBuffer);
    }
    /**
     * Get an Avalanche P-Chain public mainnet address
     *
     * @returns {Buffer} The address buffer derived from the public key
     */
    getAddressBuffer() {
        const publicKey = avalanche_1.Buffer.from(this.keyPair.publicKey);
        try {
            return Buffer.from(common_1.SECP256k1KeyPair.addressFromPublicKey(publicKey));
        }
        catch (error) {
            return this.getAddressSafeBuffer();
        }
    }
    /**
     * Use the safe Buffer instead of the regular buffer to derive the address buffer. Used in the OVC.
     *
     * @returns {Buffer}
     */
    getAddressSafeBuffer() {
        const publicKeySafe = safe_buffer_1.Buffer.from(this.keyPair.publicKey);
        const sha256 = safe_buffer_1.Buffer.from(create_hash_1.default('sha256').update(publicKeySafe).digest());
        return Buffer.from(create_hash_1.default('ripemd160').update(sha256).digest());
    }
}
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,