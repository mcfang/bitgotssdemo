"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportInCTxBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const evm_1 = require("avalanche/dist/apis/evm");
const utils_1 = require("avalanche/dist/utils");
const avalanche_1 = require("avalanche");
const utxoEngine_1 = require("./utxoEngine");
const atomicInCTransactionBuilder_1 = require("./atomicInCTransactionBuilder");
const utils_2 = __importDefault(require("./utils"));
class ImportInCTxBuilder extends atomicInCTransactionBuilder_1.AtomicInCTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /**
     * C-chain address who is target of the import.
     * Address format is eth like
     * @param {string} cAddress
     */
    to(cAddress) {
        this.transaction._to = [utils_2.default.parseAddress(cAddress)];
        return this;
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Import;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        const baseTx = tx.getUnsignedTx().getTransaction();
        if (baseTx.getNetworkID() !== this.transaction._networkID ||
            !baseTx.getBlockchainID().equals(this.transaction._blockchainID)) {
            throw new Error('Network or blockchain is not equals');
        }
        if (!this.verifyTxType(baseTx)) {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
        // The outputs is a signler C-Chain address result.
        // It's expected to have only one outputs to the destination C-Chain address.
        const outputs = baseTx.getOuts();
        if (outputs.length !== 1) {
            throw new sdk_core_1.BuildTransactionError('Transaction can have one output');
        }
        const output = outputs[0];
        if (!output.getAssetID().equals(this.transaction._assetId)) {
            throw new Error('AssetID are not equals');
        }
        this.transaction._to = [output.getAddress()];
        const input = baseTx.getImportInputs();
        this.transaction._utxos = utxoEngine_1.recoverUtxos(input);
        const totalInputAmount = input.reduce((t, i) => t.add(i.getInput().getAmount()), new avalanche_1.BN(0));
        // it should be (output as AmountOutput).getAmount(), but it's not working.
        const totalOutputAmount = new avalanche_1.BN(output.amount);
        const feeSize = utils_1.costImportTx(tx.getUnsignedTx());
        const fee = totalInputAmount.sub(totalOutputAmount);
        const feeRate = fee.divn(feeSize);
        this.transaction._fee = {
            fee: fee.toString(),
            feeRate: feeRate.toNumber(),
            size: feeSize,
        };
        this.transaction.setTransaction(tx);
        return this;
    }
    static verifyTxType(baseTx) {
        return baseTx.getTypeID() === evm_1.EVMConstants.IMPORTTX;
    }
    verifyTxType(baseTx) {
        return ImportInCTxBuilder.verifyTxType(baseTx);
    }
    /**
     * Build the import in C-chain transaction
     * @protected
     */
    buildAvaxTransaction() {
        // if tx has credentials, tx shouldn't change
        if (this.transaction.hasCredentials)
            return;
        if (this.transaction._to.length !== 1) {
            throw new Error('to is required');
        }
        if (!this.transaction._fee.feeRate) {
            throw new Error('fee rate is required');
        }
        const { inputs, amount, credentials } = this.createInputs();
        const feeRate = new avalanche_1.BN(this.transaction._fee.feeRate);
        const feeSize = utils_1.costImportTx(new evm_1.UnsignedTx(new evm_1.ImportTx(this.transaction._networkID, this.transaction._blockchainID, this._externalChainId, inputs, [
            new evm_1.EVMOutput(this.transaction._to[0], amount, this.transaction._assetId),
        ])));
        const fee = feeRate.muln(feeSize);
        this.transaction._fee.fee = fee.toString();
        this.transaction._fee.size = feeSize;
        this.transaction.setTransaction(new evm_1.Tx(new evm_1.UnsignedTx(new evm_1.ImportTx(this.transaction._networkID, this.transaction._blockchainID, this._externalChainId, inputs, [new evm_1.EVMOutput(this.transaction._to[0], amount.sub(fee), this.transaction._assetId)], fee)), credentials));
    }
    /**
     * Create inputs by mapping {@see utxoEngine.utxoToInput} result.
     * Reorder sender to handle recover signer.
     * TransferableInput is a EVM Tx.
     * @return {
     *     inputs: TransferableInput[];
     *     credentials: Credential[];
     *     amount: BN;
     *   } where amount is the sum of inputs amount and credentials has signer address to be replaced with correct signature.
     * @protected
     *
     */
    createInputs() {
        const sender = this.transaction._fromAddresses.slice();
        if (this.recoverSigner) {
            // switch first and last signer.
            const tmp = sender.pop();
            sender.push(sender[0]);
            if (tmp) {
                sender[0] = tmp;
            }
        }
        const { inputs, amount } = utxoEngine_1.utxoToInput(this.transaction._utxos, sender);
        const result = { inputs: [], credentials: [] };
        inputs.forEach((input) => {
            const secpTransferInput = new evm_1.SECPTransferInput(input.amount);
            input.signaturesIdx.forEach((signatureIdx, arrayIndex) => secpTransferInput.addSignatureIdx(signatureIdx, sender[arrayIndex]));
            result.inputs.push(new evm_1.TransferableInput(input.txidBuf, input.outputIdx, this.transaction._assetId, secpTransferInput));
            result.credentials.push(evm_1.SelectCredentialClass(secpTransferInput.getCredentialID(), input.signatures));
        });
        return { ...result, amount };
    }
}
exports.ImportInCTxBuilder = ImportInCTxBuilder;
//# sourceMappingURL=data:application/json;base64,