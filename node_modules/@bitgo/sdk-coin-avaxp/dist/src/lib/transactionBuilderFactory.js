"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const validatorTxBuilder_1 = require("./validatorTxBuilder");
const platformvm_1 = require("avalanche/dist/apis/platformvm");
const evm_1 = require("avalanche/dist/apis/evm");
const avalanche_1 = require("avalanche");
const utils_1 = __importDefault(require("./utils"));
const exportTxBuilder_1 = require("./exportTxBuilder");
const importTxBuilder_1 = require("./importTxBuilder");
const importInCTxBuilder_1 = require("./importInCTxBuilder");
const exportInCTxBuilder_1 = require("./exportInCTxBuilder");
class TransactionBuilderFactory extends sdk_core_1.BaseTransactionBuilderFactory {
    constructor(_coinConfig) {
        super(_coinConfig);
        this.recoverSigner = false;
    }
    /** @inheritdoc */
    from(raw) {
        utils_1.default.validateRawTransaction(raw);
        raw = utils_1.default.removeHexPrefix(raw);
        let txSource = 'PVM';
        let tx;
        let transactionBuilder = undefined;
        try {
            tx = new platformvm_1.Tx();
            // could throw an error if a txType doesn't match.
            tx.fromBuffer(avalanche_1.Buffer.from(raw, 'hex'));
            if (!utils_1.default.isTransactionOf(tx, this._coinConfig.network.blockchainID)) {
                throw new Error('It is not a transaction of this network');
            }
        }
        catch {
            txSource = 'EVM';
            tx = new evm_1.Tx();
            tx.fromBuffer(avalanche_1.Buffer.from(raw, 'hex'));
            if (!utils_1.default.isTransactionOf(tx, this._coinConfig.network.cChainBlockchainID)) {
                throw new Error('It is not a transaction of this network or C chain');
            }
        }
        if (txSource === 'PVM') {
            if (validatorTxBuilder_1.ValidatorTxBuilder.verifyTxType(tx.getUnsignedTx().getTransaction())) {
                transactionBuilder = this.getValidatorBuilder();
            }
            else if (exportTxBuilder_1.ExportTxBuilder.verifyTxType(tx.getUnsignedTx().getTransaction())) {
                transactionBuilder = this.getExportBuilder();
            }
            else if (importTxBuilder_1.ImportTxBuilder.verifyTxType(tx.getUnsignedTx().getTransaction())) {
                transactionBuilder = this.getImportBuilder();
            }
        }
        else if (txSource === 'EVM') {
            if (importInCTxBuilder_1.ImportInCTxBuilder.verifyTxType(tx.getUnsignedTx().getTransaction())) {
                transactionBuilder = this.getImportInCBuilder();
            }
            else if (exportInCTxBuilder_1.ExportInCTxBuilder.verifyTxType(tx.getUnsignedTx().getTransaction())) {
                transactionBuilder = this.getExportInCBuilder();
            }
        }
        if (transactionBuilder === undefined) {
            throw new sdk_core_1.NotSupported('Transaction cannot be parsed or has an unsupported transaction type');
        }
        transactionBuilder.initBuilder(tx);
        return transactionBuilder;
    }
    /** @inheritdoc */
    getTransferBuilder() {
        throw new sdk_core_1.NotSupported('Transfer is not supported in P Chain');
    }
    /**
     * Initialize Validator builder
     *
     * @returns {ValidatorTxBuilder} the builder initialized
     */
    getValidatorBuilder() {
        return new validatorTxBuilder_1.ValidatorTxBuilder(this._coinConfig);
    }
    /**
     * Export Cross chain transfer
     *
     * @returns {ExportTxBuilder} the builder initialized
     */
    getExportBuilder() {
        return new exportTxBuilder_1.ExportTxBuilder(this._coinConfig);
    }
    /**
     * Import Cross chain transfer
     *
     * @returns {ImportTxBuilder} the builder initialized
     */
    getImportBuilder() {
        return new importTxBuilder_1.ImportTxBuilder(this._coinConfig);
    }
    /**
     * Import in C chain Cross chain transfer
     *
     * @returns {ImportInCTxBuilder} the builder initialized
     */
    getImportInCBuilder() {
        return new importInCTxBuilder_1.ImportInCTxBuilder(this._coinConfig);
    }
    /**
     * Export in C chain Cross chain transfer
     *
     * @returns {ExportInCTxBuilder} the builder initialized
     */
    getExportInCBuilder() {
        return new exportInCTxBuilder_1.ExportInCTxBuilder(this._coinConfig);
    }
    /** @inheritdoc */
    getWalletInitializationBuilder() {
        throw new sdk_core_1.NotSupported('Wallet initialization is not needed');
    }
}
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,