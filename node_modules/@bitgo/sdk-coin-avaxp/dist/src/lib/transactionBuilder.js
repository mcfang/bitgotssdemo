"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const keyPair_1 = require("./keyPair");
const avalanche_1 = require("avalanche");
const utils_1 = __importDefault(require("./utils"));
const platformvm_1 = require("avalanche/dist/apis/platformvm");
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._signer = [];
        this.recoverSigner = false;
        this._transaction = new transaction_1.Transaction(_coinConfig);
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     * @returns itself
     */
    initBuilder(tx) {
        const baseTx = tx.getUnsignedTx().getTransaction();
        if (baseTx.getNetworkID() !== this._transaction._networkID ||
            !baseTx.getBlockchainID().equals(this._transaction._blockchainID)) {
            throw new Error('Network or blockchain is not equals');
        }
        // EVMBaseTx has not memo.
        if ('getMemo' in baseTx) {
            this._transaction._memo = baseTx.getMemo();
        }
        this._transaction.setTransaction(tx);
        return this;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new platformvm_1.Tx();
        tx.fromBuffer(avalanche_1.Buffer.from(rawTransaction, 'hex'));
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.buildAvaxTransaction();
        this.transaction.setTransactionType(this.transactionType);
        if (this.hasSigner) {
            this._signer.forEach((keyPair) => this.transaction.sign(keyPair));
        }
        return this.transaction;
    }
    // region Getters and Setters
    /**
     * When using recovery key must be set here
     * TODO: STLX-17317 recovery key signing
     * @param {boolean} true if it's recovery signer, default true.
     */
    recoverMode(recoverSigner = true) {
        this.recoverSigner = recoverSigner;
        return this;
    }
    /**
     * Threshold is an int that names the number of unique signatures required to spend the output.
     * Must be less than or equal to the length of Addresses.
     * @param {number}
     */
    threshold(value) {
        this.validateThreshold(value);
        this._transaction._threshold = value;
        return this;
    }
    /**
     * Locktime is a long that contains the unix timestamp that this output can be spent after.
     * The unix timestamp is specific to the second.
     * @param value
     */
    locktime(value) {
        this.validateLocktime(new avalanche_1.BN(value));
        this._transaction._locktime = new avalanche_1.BN(value);
        return this;
    }
    /**
     * fromPubKey is a list of unique addresses that correspond to the private keys that can be used to spend this output.
     * @param {string | stirng[]} senderPubKey
     */
    fromPubKey(senderPubKey) {
        const pubKeys = senderPubKey instanceof Array ? senderPubKey : [senderPubKey];
        this._transaction._fromAddresses = pubKeys.map(utils_1.default.parseAddress);
        return this;
    }
    /**
     * List of UTXO required as inputs.
     * A UTXO is a standalone representation of a transaction output.
     *
     * @param {DecodedUtxoObj[]} list of UTXOS
     */
    utxos(value) {
        this.validateUtxos(value);
        this._transaction._utxos = value;
        return this;
    }
    /**
     *
     * @param value Optional Buffer for the memo
     * @returns value Buffer for the memo
     * set using Buffer.from("message")
     */
    memo(value) {
        this._transaction._memo = utils_1.default.stringToBuffer(value);
        return this;
    }
    /**
     * Getter for know if build should sign
     */
    get hasSigner() {
        return this._signer !== undefined && this._signer.length > 0;
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritdoc */
    signImplementation({ key }) {
        this._signer.push(new keyPair_1.KeyPair({ prv: key }));
        return this.transaction;
    }
    // endregion
    // region Validators
    /**
     * Validates the threshold
     * @param threshold
     */
    validateThreshold(threshold) {
        if (!threshold || threshold !== 2) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: threshold must be set to 2');
        }
    }
    /**
     * Validates locktime
     * @param locktime
     */
    validateLocktime(locktime) {
        if (!locktime || locktime.lt(new avalanche_1.BN(0))) {
            throw new sdk_core_1.BuildTransactionError('Invalid transaction: locktime must be 0 or higher');
        }
    }
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address');
        }
    }
    /** @inheritdoc */
    validateKey({ key }) {
        if (!new keyPair_1.KeyPair({ prv: key })) {
            throw new sdk_core_1.BuildTransactionError('Invalid key');
        }
    }
    /**
     * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
     * It overrides abstract method from BaseTransactionBuilder
     *
     * @param rawTransaction Transaction in any format
     */
    validateRawTransaction(rawTransaction) {
        utils_1.default.validateRawTransaction(rawTransaction);
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        // throw new NotImplementedError('validateTransaction not implemented');
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    /**
     * Check the list of UTXOS is empty and check each UTXO.
     * @param values
     */
    validateUtxos(values) {
        if (values.length === 0) {
            throw new sdk_core_1.BuildTransactionError("Utxos can't be empty array");
        }
        values.forEach(this.validateUtxo);
    }
    /**
     * Check the UTXO has expected fields.
     * @param UTXO
     */
    validateUtxo(value) {
        ['outputID', 'amount', 'txid', 'outputidx'].forEach((field) => {
            if (!value.hasOwnProperty(field))
                throw new sdk_core_1.BuildTransactionError(`Utxos required ${field}`);
        });
    }
    /**
     * Check the amount is positive.
     * @param amount
     */
    validateAmount(amount) {
        if (amount.lten(0)) {
            throw new sdk_core_1.BuildTransactionError('Amount must be greater than 0');
        }
    }
    /**
     * Check the buffer has 32 byte long.
     * @param chainID
     */
    validateChainId(chainID) {
        if (chainID.length !== 32) {
            throw new sdk_core_1.BuildTransactionError('Chain id are 32 byte size');
        }
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,