"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtomicTransactionBuilder = void 0;
const avalanche_1 = require("avalanche");
const utils_1 = __importDefault(require("./utils"));
const transactionBuilder_1 = require("./transactionBuilder");
const platformvm_1 = require("avalanche/dist/apis/platformvm");
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
/**
 * Cross-chain transactions (export and import) are atomic operations.
 */
class AtomicTransactionBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this.transaction._fee.fee = this.fixedFee;
    }
    /**
     * The internal chain is the one set for the coin in coinConfig.network. The external chain is the other chain involved.
     * The external chain id is the source on import and the destination on export.
     *
     * @param {string} chainId - id of the external chain
     */
    externalChainId(chainId) {
        const newTargetChainId = typeof chainId === 'string' ? utils_1.default.cb58Decode(chainId) : avalanche_1.Buffer.from(chainId);
        this.validateChainId(newTargetChainId);
        this._externalChainId = newTargetChainId;
        return this;
    }
    /**
     * Fee is fix for AVM atomic tx.
     *
     * @returns network.txFee
     * @protected
     */
    get fixedFee() {
        return this.transaction._network.txFee;
    }
    // region utxo engine
    /**
     * Threshold must be 2 and since output always get reordered we want to make sure we can always add signatures in the correct location
     * To find the correct location for the signature, we use the output's addresses to create the signatureIdx in the order that we desire
     * 0: user key, 1: hsm key, 2: recovery key
     * @protected
     */
    createInputOutput(amount) {
        const inputs = [];
        const outputs = [];
        // amount spent so far
        let currentTotal = new avalanche_1.BN(0);
        // delegating and validating have no fees
        const totalTarget = amount.clone();
        const credentials = [];
        /*
        A = user key
        B = hsm key
        C = backup key
        bitgoAddresses = bitgo addresses [ A, B, C ]
        utxo.addresses = IMS addresses [ B, C, A ]
        utxo.addressesIndex = [ 2, 0, 1 ]
        we pick 0, 1 for non-recovery
        we pick 1, 2 for recovery
        */
        this.transaction._utxos.forEach((utxo) => {
            // in WP, output.addressesIndex is empty, so fill it
            if (!utxo.addressesIndex || utxo.addressesIndex.length === 0) {
                const utxoAddresses = utxo.addresses.map((a) => utils_1.default.parseAddress(a));
                utxo.addressesIndex = this.transaction._fromAddresses.map((a) => utxoAddresses.findIndex((u) => a.equals(u)));
            }
            // in OVC, output.addressesIndex is defined correctly from the previous iteration
        });
        // validate the utxos
        this.transaction._utxos.forEach((utxo) => {
            var _a;
            if (!utxo) {
                throw new sdk_core_1.BuildTransactionError('Utxo is undefined');
            }
            // addressesIndex should never have a mismatch
            if ((_a = utxo.addressesIndex) === null || _a === void 0 ? void 0 : _a.includes(-1)) {
                throw new sdk_core_1.BuildTransactionError('Addresses are inconsistent: ' + utxo.txid);
            }
            if (utxo.threshold !== this.transaction._threshold) {
                throw new sdk_core_1.BuildTransactionError('Threshold is inconsistent');
            }
        });
        this.transaction._utxos.forEach((utxo, i) => {
            var _a;
            if (utxo.outputID === iface_1.SECP256K1_Transfer_Output) {
                const txidBuf = utils_1.default.cb58Decode(utxo.txid);
                const amt = new avalanche_1.BN(utxo.amount);
                const outputidx = utils_1.default.outputidxNumberToBuffer(utxo.outputidx);
                const addressesIndex = (_a = utxo.addressesIndex) !== null && _a !== void 0 ? _a : [];
                // either user (0) or recovery (2)
                const firstIndex = this.recoverSigner ? 2 : 0;
                const bitgoIndex = 1;
                currentTotal = currentTotal.add(amt);
                const secpTransferInput = new platformvm_1.SECPTransferInput(amt);
                // if user/backup > bitgo
                if (addressesIndex[bitgoIndex] < addressesIndex[firstIndex]) {
                    secpTransferInput.addSignatureIdx(addressesIndex[bitgoIndex], this.transaction._fromAddresses[bitgoIndex]);
                    secpTransferInput.addSignatureIdx(addressesIndex[firstIndex], this.transaction._fromAddresses[firstIndex]);
                    credentials.push(platformvm_1.SelectCredentialClass(secpTransferInput.getCredentialID(), // 9
                    ['', this.transaction._fromAddresses[firstIndex].toString('hex')].map(utils_1.default.createSig)));
                }
                else {
                    secpTransferInput.addSignatureIdx(addressesIndex[firstIndex], this.transaction._fromAddresses[firstIndex]);
                    secpTransferInput.addSignatureIdx(addressesIndex[bitgoIndex], this.transaction._fromAddresses[bitgoIndex]);
                    credentials.push(platformvm_1.SelectCredentialClass(secpTransferInput.getCredentialID(), [this.transaction._fromAddresses[firstIndex].toString('hex'), ''].map(utils_1.default.createSig)));
                }
                const input = new platformvm_1.TransferableInput(txidBuf, outputidx, this.transaction._assetId, secpTransferInput);
                inputs.push(input);
            }
        });
        if (currentTotal.lt(totalTarget)) {
            throw new sdk_core_1.BuildTransactionError(`Utxo outputs get ${currentTotal.toString()} and ${totalTarget.toString()} is required`);
        }
        else if (currentTotal.gt(totalTarget)) {
            outputs.push(new platformvm_1.TransferableOutput(this.transaction._assetId, new platformvm_1.SECPTransferOutput(currentTotal.sub(totalTarget), this.transaction._fromAddresses, this.transaction._locktime, this.transaction._threshold)));
        }
        return {
            inputs,
            outputs,
            credentials,
        };
    }
}
exports.AtomicTransactionBuilder = AtomicTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,