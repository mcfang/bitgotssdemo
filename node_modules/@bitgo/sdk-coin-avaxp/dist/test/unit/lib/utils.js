"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("should");
const lib_1 = require("../../../src/lib/");
const testData = __importStar(require("../../resources/avaxp"));
const statics_1 = require("@bitgo/statics");
describe('Avaxp Utils', () => {
    const network = statics_1.coins.get('tavaxp').network;
    const compressed = true;
    it('should recover signature', () => {
        const keyPair = new lib_1.KeyPair({ prv: testData.SEED_ACCOUNT.privateKeyAvax });
        const prv = keyPair.getPrivateKey();
        const pub = keyPair.getPublicKey({ compressed });
        const message = Buffer.from('Lorem ipsum dolor sit amet. Est maxime iure et odio iusto non aspernatur...', 'hex');
        const signature = lib_1.Utils.createSignature(network, message, prv);
        lib_1.Utils.recoverySignature(network, message, signature).should.deepEqual(pub);
    });
    describe('Validation', function () {
        it('should validate a public key', () => {
            lib_1.Utils.isValidPublicKey(testData.SEED_ACCOUNT.publicKeyCb58).should.be.true();
            lib_1.Utils.isValidPublicKey(testData.SEED_ACCOUNT.publicKey).should.be.true();
            lib_1.Utils.isValidPublicKey(testData.SEED_ACCOUNT.xPublicKey).should.be.true();
        });
        it('should fail to validate invalid address', function () {
            const address = 'fuji15jamwukfqkwhe8z26tjqxejtjd3jk9vj4kmxwa';
            lib_1.Utils.isValidAddress(address).should.be.false();
        });
        it('should validate an address array', function () {
            const validAddresses = [
                'P-fuji15jamwukfqkwhe8z26tjqxejtjd3jk9vj4kmxwa',
                'NodeID-MdteS9U987PY7iwA5Pcz3sKVprJAbAvE7',
                'NodeID-P1KjdPNrap8LHfx5AstcXxsHjk3jbbyF',
            ];
            lib_1.Utils.isValidAddress(validAddresses).should.be.true();
        });
        it('should validate an address multiSig string', function () {
            const stringMultiSigAddress = 'P-fuji15jamwukfqkwhe8z26tjqxejtjd3jk9vj4kmxwa~NodeID-MdteS9U987PY7iwA5Pcz3sKVprJAbAvE7~NodeID-P1KjdPNrap8LHfx5AstcXxsHjk3jbbyF';
            lib_1.Utils.isValidAddress(stringMultiSigAddress).should.be.true();
        });
        it('should fail to validate an invalid block id', function () {
            const block = 'abcdefghijklmnopqrstuvwxyz';
            lib_1.Utils.isValidBlockId(block).should.be.false();
        });
        it('should validate a block id', function () {
            const block = 'zGC26Bagj79RBPobK8Hghk9xuqAmME53eEUtM9RJ2yadBxrch';
            lib_1.Utils.isValidBlockId(block).should.be.true();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3VuaXQvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGtCQUFnQjtBQUNoQiwyQ0FBbUQ7QUFDbkQsZ0VBQWtEO0FBQ2xELDRDQUF5RDtBQUV6RCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixNQUFNLE9BQU8sR0FBcUIsZUFBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUEyQixDQUFDO0lBQ2xGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQztJQUN4QixFQUFFLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUMzRSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDcEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDakQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyw2RUFBNkUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsSCxNQUFNLFNBQVMsR0FBRyxXQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBSSxDQUFDLENBQUM7UUFDaEUsV0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFDckIsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtZQUN0QyxXQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzdFLFdBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekUsV0FBSyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtZQUM1QyxNQUFNLE9BQU8sR0FBRyw2Q0FBNkMsQ0FBQztZQUM5RCxXQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsa0NBQWtDLEVBQUU7WUFDckMsTUFBTSxjQUFjLEdBQUc7Z0JBQ3JCLCtDQUErQztnQkFDL0MsMENBQTBDO2dCQUMxQyx5Q0FBeUM7YUFDMUMsQ0FBQztZQUVGLFdBQUssQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRTtZQUMvQyxNQUFNLHFCQUFxQixHQUN6QixnSUFBZ0ksQ0FBQztZQUVuSSxXQUFLLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRTtZQUNoRCxNQUFNLEtBQUssR0FBRyw0QkFBNEIsQ0FBQztZQUMzQyxXQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUU7WUFDL0IsTUFBTSxLQUFLLEdBQUcsbURBQW1ELENBQUM7WUFDbEUsV0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnc2hvdWxkJztcbmltcG9ydCB7IFV0aWxzLCBLZXlQYWlyIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2xpYi8nO1xuaW1wb3J0ICogYXMgdGVzdERhdGEgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2F2YXhwJztcbmltcG9ydCB7IEF2YWxhbmNoZU5ldHdvcmssIGNvaW5zIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuXG5kZXNjcmliZSgnQXZheHAgVXRpbHMnLCAoKSA9PiB7XG4gIGNvbnN0IG5ldHdvcms6IEF2YWxhbmNoZU5ldHdvcmsgPSBjb2lucy5nZXQoJ3RhdmF4cCcpLm5ldHdvcmsgYXMgQXZhbGFuY2hlTmV0d29yaztcbiAgY29uc3QgY29tcHJlc3NlZCA9IHRydWU7XG4gIGl0KCdzaG91bGQgcmVjb3ZlciBzaWduYXR1cmUnLCAoKSA9PiB7XG4gICAgY29uc3Qga2V5UGFpciA9IG5ldyBLZXlQYWlyKHsgcHJ2OiB0ZXN0RGF0YS5TRUVEX0FDQ09VTlQucHJpdmF0ZUtleUF2YXggfSk7XG4gICAgY29uc3QgcHJ2ID0ga2V5UGFpci5nZXRQcml2YXRlS2V5KCk7XG4gICAgY29uc3QgcHViID0ga2V5UGFpci5nZXRQdWJsaWNLZXkoeyBjb21wcmVzc2VkIH0pO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBCdWZmZXIuZnJvbSgnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQuIEVzdCBtYXhpbWUgaXVyZSBldCBvZGlvIGl1c3RvIG5vbiBhc3Blcm5hdHVyLi4uJywgJ2hleCcpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IFV0aWxzLmNyZWF0ZVNpZ25hdHVyZShuZXR3b3JrLCBtZXNzYWdlLCBwcnYhKTtcbiAgICBVdGlscy5yZWNvdmVyeVNpZ25hdHVyZShuZXR3b3JrLCBtZXNzYWdlLCBzaWduYXR1cmUpLnNob3VsZC5kZWVwRXF1YWwocHViKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1ZhbGlkYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBhIHB1YmxpYyBrZXknLCAoKSA9PiB7XG4gICAgICBVdGlscy5pc1ZhbGlkUHVibGljS2V5KHRlc3REYXRhLlNFRURfQUNDT1VOVC5wdWJsaWNLZXlDYjU4KS5zaG91bGQuYmUudHJ1ZSgpO1xuICAgICAgVXRpbHMuaXNWYWxpZFB1YmxpY0tleSh0ZXN0RGF0YS5TRUVEX0FDQ09VTlQucHVibGljS2V5KS5zaG91bGQuYmUudHJ1ZSgpO1xuICAgICAgVXRpbHMuaXNWYWxpZFB1YmxpY0tleSh0ZXN0RGF0YS5TRUVEX0FDQ09VTlQueFB1YmxpY0tleSkuc2hvdWxkLmJlLnRydWUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmFpbCB0byB2YWxpZGF0ZSBpbnZhbGlkIGFkZHJlc3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBhZGRyZXNzID0gJ2Z1amkxNWphbXd1a2Zxa3doZTh6MjZ0anF4ZWp0amQzams5dmo0a214d2EnO1xuICAgICAgVXRpbHMuaXNWYWxpZEFkZHJlc3MoYWRkcmVzcykuc2hvdWxkLmJlLmZhbHNlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGFuIGFkZHJlc3MgYXJyYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB2YWxpZEFkZHJlc3NlcyA9IFtcbiAgICAgICAgJ1AtZnVqaTE1amFtd3VrZnFrd2hlOHoyNnRqcXhlanRqZDNqazl2ajRrbXh3YScsXG4gICAgICAgICdOb2RlSUQtTWR0ZVM5VTk4N1BZN2l3QTVQY3ozc0tWcHJKQWJBdkU3JyxcbiAgICAgICAgJ05vZGVJRC1QMUtqZFBOcmFwOExIZng1QXN0Y1h4c0hqazNqYmJ5RicsXG4gICAgICBdO1xuXG4gICAgICBVdGlscy5pc1ZhbGlkQWRkcmVzcyh2YWxpZEFkZHJlc3Nlcykuc2hvdWxkLmJlLnRydWUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgYW4gYWRkcmVzcyBtdWx0aVNpZyBzdHJpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBzdHJpbmdNdWx0aVNpZ0FkZHJlc3MgPVxuICAgICAgICAnUC1mdWppMTVqYW13dWtmcWt3aGU4ejI2dGpxeGVqdGpkM2prOXZqNGtteHdhfk5vZGVJRC1NZHRlUzlVOTg3UFk3aXdBNVBjejNzS1ZwckpBYkF2RTd+Tm9kZUlELVAxS2pkUE5yYXA4TEhmeDVBc3RjWHhzSGprM2piYnlGJztcblxuICAgICAgVXRpbHMuaXNWYWxpZEFkZHJlc3Moc3RyaW5nTXVsdGlTaWdBZGRyZXNzKS5zaG91bGQuYmUudHJ1ZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmYWlsIHRvIHZhbGlkYXRlIGFuIGludmFsaWQgYmxvY2sgaWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBibG9jayA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eic7XG4gICAgICBVdGlscy5pc1ZhbGlkQmxvY2tJZChibG9jaykuc2hvdWxkLmJlLmZhbHNlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGEgYmxvY2sgaWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBibG9jayA9ICd6R0MyNkJhZ2o3OVJCUG9iSzhIZ2hrOXh1cUFtTUU1M2VFVXRNOVJKMnlhZEJ4cmNoJztcbiAgICAgIFV0aWxzLmlzVmFsaWRCbG9ja0lkKGJsb2NrKS5zaG91bGQuYmUudHJ1ZSgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19