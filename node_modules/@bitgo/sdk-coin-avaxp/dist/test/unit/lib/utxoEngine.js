"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
require("should");
const utxoEngine_1 = require("../../../src/lib/utxoEngine");
const utils_1 = __importDefault(require("./../../../src/lib/utils"));
describe('AvaxP UTXO engine', () => {
    describe('should fail', () => {
        const sender = [
            'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
            'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
            'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
        ].map((a) => utils_1.default.parseAddress(a));
        it('should return empty input for utxos of wrong type', () => {
            const utxos = [1, 2, 3, 4].map((n) => ({
                outputID: n,
                amount: '509999975',
                txid: 'CEbFa3hCDfMFu8ASZP9rT1s3X2X8wqoPAN258kkStk9JX3wsH',
                outputidx: '0',
                addresses: [
                    'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
                    'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
                    'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
                ],
                threshold: 2,
            }));
            const { inputs } = utxoEngine_1.utxoToInput(utxos, sender);
            inputs.should.be.empty();
        });
        it('should fail with wrong address', () => {
            const utxos = [
                {
                    outputID: 7,
                    amount: '509999975',
                    txid: 'CEbFa3hCDfMFu8ASZP9rT1s3X2X8wqoPAN258kkStk9JX3wsH',
                    outputidx: '0',
                    addresses: [
                        'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
                        'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
                        'P-fuji13pyc89t4x5483fgdfgg9lcnpxz7ggr09vn6m6c',
                    ],
                    threshold: 2,
                },
            ];
            assert_1.default.throws(() => utxoEngine_1.utxoToInput(utxos, sender), (e) => e.message === 'Addresses are inconsistent: CEbFa3hCDfMFu8ASZP9rT1s3X2X8wqoPAN258kkStk9JX3wsH');
        });
        it('should fail with wrong threshold', () => {
            const utxos = [
                {
                    outputID: 7,
                    amount: '509999975',
                    txid: 'CEbFa3hCDfMFu8ASZP9rT1s3X2X8wqoPAN258kkStk9JX3wsH',
                    outputidx: '0',
                    addresses: [
                        'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
                        'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
                        'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
                    ],
                    threshold: 3,
                },
            ];
            assert_1.default.throws(() => utxoEngine_1.utxoToInput(utxos, sender), (e) => e.message === 'Threshold is inconsistent');
        });
    });
    describe('2 of 3 signers', () => {
        const utxos = [
            {
                outputID: 7,
                amount: '509999975',
                txid: 'CEbFa3hCDfMFu8ASZP9rT1s3X2X8wqoPAN258kkStk9JX3wsH',
                outputidx: '0',
                addresses: [
                    'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
                    'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
                    'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
                ],
                threshold: 2,
            },
            {
                outputID: 7,
                amount: '26932830273',
                txid: '2VyWNR4q8p7ZnKfaot37SbMBCWHbEbqEca7Af1tiRTArkJMdXt',
                outputidx: '0',
                addresses: [
                    'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
                    'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
                    'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
                ],
                threshold: 2,
            },
        ];
        const sender = [
            'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
            'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
            'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
        ].map((a) => utils_1.default.parseAddress(a));
        const firstSigner = sender[0].toString('hex');
        // second signer is Zeros credential.
        it('should return credential 2 of 3', () => {
            const { inputs } = utxoEngine_1.utxoToInput(utxos, sender);
            inputs.forEach((input, i) => {
                const expectedSignature = input.signatures.map((signature) => signature.toBuffer().toString('hex').substring(90));
                expectedSignature.should.containEql(firstSigner);
                const fistSignatureIdx = input.signaturesIdx[expectedSignature.indexOf(firstSigner)];
                utils_1.default.parseAddress(utxos[i].addresses[fistSignatureIdx]).toString('hex').should.be.equal(firstSigner);
            });
        });
    });
    describe('4 of 4 signers', () => {
        const utxos = [
            {
                outputID: 7,
                amount: '509999975',
                txid: 'CEbFa3hCDfMFu8ASZP9rT1s3X2X8wqoPAN258kkStk9JX3wsH',
                outputidx: '0',
                addresses: [
                    'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
                    'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
                    'P-fuji13pyc89t4x5483fgdfgg9lcnpxz7ggr09vn6m6c',
                    'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
                ],
                threshold: 4,
            },
            {
                outputID: 7,
                amount: '26932830273',
                txid: '2VyWNR4q8p7ZnKfaot37SbMBCWHbEbqEca7Af1tiRTArkJMdXt',
                outputidx: '0',
                addresses: [
                    'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
                    'P-fuji13pyc89t4x5483fgdfgg9lcnpxz7ggr09vn6m6c',
                    'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
                    'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
                ],
                threshold: 4,
            },
        ];
        const sender = [
            'P-fuji103cmntssp6qnucejahddy42wcy4qty0uj42822',
            'P-fuji1hdk7ntw0huhqmlhlheme9t7scsy9lhfhw3ywy4',
            'P-fuji1yzpfsdalhfwkq2ceewgs9wv7k0uft40ydpuj59',
            'P-fuji13pyc89t4x5483fgdfgg9lcnpxz7ggr09vn6m6c',
        ].map((a) => utils_1.default.parseAddress(a));
        const firstSigner = sender[0].toString('hex');
        // second signer is Zeros credential.
        const thirdSigner = sender[2].toString('hex');
        const forthSigner = sender[3].toString('hex');
        it('should return credential', () => {
            const { inputs } = utxoEngine_1.utxoToInput(utxos, sender, 4);
            inputs.forEach((input, i) => {
                const expectedSignature = input.signatures.map((signature) => signature.toBuffer().toString('hex').substring(90));
                expectedSignature.should.containEql(firstSigner);
                const fistSignatureIdx = input.signaturesIdx[expectedSignature.indexOf(firstSigner)];
                utils_1.default.parseAddress(utxos[i].addresses[fistSignatureIdx]).toString('hex').should.be.equal(firstSigner);
                expectedSignature.should.containEql(thirdSigner);
                const thirdSignatureIdx = input.signaturesIdx[expectedSignature.indexOf(thirdSigner)];
                utils_1.default.parseAddress(utxos[i].addresses[thirdSignatureIdx]).toString('hex').should.be.equal(thirdSigner);
                expectedSignature.should.containEql(forthSigner);
                const forthSignatureIdx = input.signaturesIdx[expectedSignature.indexOf(forthSigner)];
                utils_1.default.parseAddress(utxos[i].addresses[forthSignatureIdx]).toString('hex').should.be.equal(forthSigner);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,