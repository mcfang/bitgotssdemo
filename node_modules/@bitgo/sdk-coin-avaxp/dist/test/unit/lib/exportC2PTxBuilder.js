"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
require("should");
const errorMessage = __importStar(require("../../resources/errors"));
const lib_1 = require("../../../src/lib");
const statics_1 = require("@bitgo/statics");
const exportC_1 = require("../../resources/tx/exportC");
const avalanche_1 = require("avalanche");
describe('AvaxP Export C2P Tx Builder', () => {
    const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'));
    const data = exportC_1.EXPORT_C;
    describe('validate txBuilder fields', () => {
        const txBuilder = factory.getExportInCBuilder();
        it('should fail amount low or equal than zero', () => {
            for (const amount of [new avalanche_1.BN(0), new avalanche_1.BN(-1), '0', '-1']) {
                assert_1.default.throws(() => {
                    txBuilder.amount(amount);
                }, (e) => e.message === errorMessage.ERROR_AMOUNT);
            }
        });
        it('should fail nonce low than zero', () => {
            for (const nonce of [-1, '-1']) {
                assert_1.default.throws(() => {
                    txBuilder.nonce(nonce);
                }, (e) => e.message === errorMessage.ERROR_NONCE);
            }
        });
    });
    describe('should build ', () => {
        const newTxBuilder = () => factory
            .getExportInCBuilder()
            .fromPubKey(data.cHexAddress)
            .nonce(data.nonce)
            .amount(data.amount)
            .threshold(data.threshold)
            .locktime(0)
            .to(data.pAddresses)
            .feeRate(data.fee);
        it('Should create export tx for same values', async () => {
            const txBuilder = newTxBuilder();
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(data.unsignedTxHex);
        });
        it('Should recover export tx from raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(data.unsignedTxHex);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(data.unsignedTxHex);
        });
        it('Should recover signed export  from signed raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(data.fullsigntxHex);
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(data.fullsigntxHex);
        });
        it('Should full sign a export tx for same values', async () => {
            const txBuilder = newTxBuilder();
            txBuilder.sign({ key: data.privKey });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(data.fullsigntxHex);
        });
        it('Should full sign a export tx from unsigned raw tx', async () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')).from(data.unsignedTxHex);
            txBuilder.sign({ key: data.privKey });
            const tx = await txBuilder.build();
            const rawTx = tx.toBroadcastFormat();
            rawTx.should.equal(data.fullsigntxHex);
        });
    });
    // TODO(BG-56700):  Improve canSign by check in addresses in empty credentials match signer
    xdescribe('Key cannot sign the transaction ', () => {
        it('Should full sign a export  tx from unsigned raw tx', () => {
            const txBuilder = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
                .from(data.unsignedTxHex)
                .fromPubKey(data.pAddresses);
            txBuilder.sign({ key: data.privKey });
            txBuilder
                .build()
                .then(() => assert_1.default.fail('it can sign'))
                .catch((err) => {
                err.message.should.be.equal(errorMessage.ERROR_KEY_CANNOT_SIGN);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,