"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const should_1 = __importDefault(require("should"));
const lib_1 = require("../../../src/lib");
const testData = __importStar(require("../../resources/avaxp"));
const pubKey = testData.ACCOUNT_1.pubkey;
const prvKey = testData.ACCOUNT_1.privkey;
describe('Avax P Key Pair', () => {
    describe('should create a valid KeyPair', () => {
        it('from an empty value', () => {
            const keyPair = new lib_1.KeyPair();
            should_1.default.exists(keyPair.getKeys().prv);
            should_1.default.exists(keyPair.getKeys().pub);
            should_1.default.exists(keyPair.getKeys().pub);
        });
        it('from a seed', () => {
            const seed = testData.SEED_ACCOUNT.seed;
            const keyPairObj = new lib_1.KeyPair({ seed: Buffer.from(seed, 'hex') });
            const keys = keyPairObj.getKeys();
            should_1.default.exists(keys.prv);
            should_1.default.exists(keys.pub);
            should_1.default.equal(keys.prv, testData.SEED_ACCOUNT.privateKey);
            should_1.default.equal(keys.pub, testData.SEED_ACCOUNT.publicKey);
            const extendedKeys = keyPairObj.getExtendedKeys();
            should_1.default.exists(extendedKeys.xprv);
            should_1.default.exists(extendedKeys.xpub);
            should_1.default.equal(extendedKeys.xprv, testData.SEED_ACCOUNT.xPrivateKey);
            should_1.default.equal(extendedKeys.xpub, testData.SEED_ACCOUNT.xPublicKey);
        });
        it('from a xprv', () => {
            const keyPairObj = new lib_1.KeyPair({ prv: testData.SEED_ACCOUNT.xPrivateKey });
            const keys = keyPairObj.getKeys();
            should_1.default.exists(keys.prv);
            should_1.default.exists(keys.pub);
            should_1.default.equal(keys.prv, testData.SEED_ACCOUNT.privateKey);
            should_1.default.equal(keys.pub, testData.SEED_ACCOUNT.publicKey);
            const extendedKeys = keyPairObj.getExtendedKeys();
            should_1.default.exists(extendedKeys.xprv);
            should_1.default.exists(extendedKeys.xpub);
            should_1.default.equal(extendedKeys.xprv, testData.SEED_ACCOUNT.xPrivateKey);
            should_1.default.equal(extendedKeys.xpub, testData.SEED_ACCOUNT.xPublicKey);
        });
        it('from a xpub', () => {
            const keyPairObj = new lib_1.KeyPair({ pub: testData.SEED_ACCOUNT.xPublicKey });
            const keys = keyPairObj.getKeys();
            should_1.default.not.exists(keys.prv);
            should_1.default.exists(keys.pub);
            should_1.default.equal(keys.pub, testData.SEED_ACCOUNT.publicKey);
            const extendedKeys = keyPairObj.getExtendedKeys();
            should_1.default.not.exists(extendedKeys.xprv);
            should_1.default.exists(extendedKeys.xpub);
            should_1.default.equal(extendedKeys.xpub, testData.SEED_ACCOUNT.xPublicKey);
        });
        it('from a public key', () => {
            const keyPair = new lib_1.KeyPair({ pub: testData.ACCOUNT_3.pubkey });
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_3.pubkeyHex);
            should_1.default.exists(keyPair.getAddress());
        });
        it('from a public ke hex', () => {
            const keyPair = new lib_1.KeyPair({ pub: testData.ACCOUNT_3.pubkeyHex });
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_3.pubkeyHex);
            should_1.default.exists(keyPair.getAddress());
        });
        it('from a private key', () => {
            const keyPair = new lib_1.KeyPair({ prv: testData.ACCOUNT_3.privkey });
            should_1.default.equal(keyPair.getKeys().prv, testData.ACCOUNT_3.privkeyHex);
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_3.pubkeyHex);
            should_1.default.exists(keyPair.getAddress());
        });
        it('from a private key Hex', () => {
            const keyPair = new lib_1.KeyPair({ prv: testData.ACCOUNT_3.privkeyHex });
            should_1.default.equal(keyPair.getKeys().prv, testData.ACCOUNT_3.privkeyHex);
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_3.pubkeyHex);
            should_1.default.exists(keyPair.getAddress());
        });
        it('Should get same address key for account 3 private key ', () => {
            const keyPair = new lib_1.KeyPair({ prv: testData.ACCOUNT_3.privkey });
            should_1.default.equal(keyPair.getKeys().prv, testData.ACCOUNT_3.privkeyHex);
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_3.pubkeyHex);
            should_1.default.equal(keyPair.getAddress('testnet'), testData.ACCOUNT_3.address);
        });
        it('Should get same address key for account 3 private key hex ', () => {
            const keyPair = new lib_1.KeyPair({ prv: testData.ACCOUNT_3.privkeyHex });
            should_1.default.equal(keyPair.getKeys().prv, testData.ACCOUNT_3.privkeyHex);
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_3.pubkeyHex);
            should_1.default.equal(keyPair.getAddress('testnet'), testData.ACCOUNT_3.address);
        });
        it('Should get same address key for account 4 private key ', () => {
            const keyPair = new lib_1.KeyPair({ prv: testData.ACCOUNT_4.privkey });
            should_1.default.equal(keyPair.getKeys().prv, testData.ACCOUNT_4.privkeyHex);
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_4.pubkeyHex);
            should_1.default.equal(keyPair.getAddress('testnet'), testData.ACCOUNT_4.address);
        });
        it('Should get same address key for account 4 private key hex ', () => {
            const keyPair = new lib_1.KeyPair({ prv: testData.ACCOUNT_4.privkeyHex });
            should_1.default.equal(keyPair.getKeys().prv, testData.ACCOUNT_4.privkeyHex);
            should_1.default.equal(keyPair.getKeys().pub, testData.ACCOUNT_4.pubkeyHex);
            should_1.default.equal(keyPair.getAddress('testnet'), testData.ACCOUNT_4.address);
        });
        describe('getAddress', function () {
            it('should get an address', () => {
                const seed = testData.SEED_ACCOUNT.seed;
                const keyPair = new lib_1.KeyPair({ seed: Buffer.from(seed, 'hex') });
                const address = keyPair.getAddress();
                address.should.equal(testData.SEED_ACCOUNT.addressMainnet);
            });
        });
        it('without source', () => {
            const keyPair = new lib_1.KeyPair();
            keyPair.getKeys().should.have.property('pub');
            keyPair.getKeys().should.have.property('prv');
        });
    });
    describe('should fail to create a KeyPair', () => {
        it('from an invalid public key', () => {
            assert_1.default.throws(() => new lib_1.KeyPair({ pub: testData.INVALID_SHORT_KEYPAIR_KEY }), (e) => e.message === testData.INVALID_PUBLIC_KEY_ERROR_MESSAGE);
        });
        it('from an invalid private key', () => {
            assert_1.default.throws(() => new lib_1.KeyPair({ prv: testData.INVALID_SHORT_KEYPAIR_KEY }), (e) => e.message === testData.INVALID_PRIVATE_KEY_ERROR_MESSAGE);
            assert_1.default.throws(() => {
                new lib_1.KeyPair({ prv: testData.INVALID_LONG_KEYPAIR_PRV });
            }, (e) => e.message === testData.INVALID_PRIVATE_KEY_ERROR_MESSAGE);
            assert_1.default.throws(() => new lib_1.KeyPair({ prv: prvKey + pubKey }), (e) => e.message === testData.INVALID_PRIVATE_KEY_ERROR_MESSAGE);
        });
    });
    describe('verifyAddress', function () {
        it('should get and match mainnet address', () => {
            const seed = testData.SEED_ACCOUNT.seed;
            const keyPair = new lib_1.KeyPair({ seed: Buffer.from(seed, 'hex') });
            const address = keyPair.getAddress();
            address.should.equal(testData.SEED_ACCOUNT.addressMainnet);
            const prv = testData.ACCOUNT_1.privkey;
            const keyPair2 = new lib_1.KeyPair({ prv: prv });
            const address2 = keyPair2.getAddress();
            address2.should.equal(testData.ACCOUNT_1.addressMainnet);
        });
        it('should get and match testnet address', () => {
            const seed = testData.SEED_ACCOUNT.seed;
            const keyPair = new lib_1.KeyPair({ seed: Buffer.from(seed, 'hex') });
            const address = keyPair.getAddress('testnet');
            address.should.equal(testData.SEED_ACCOUNT.addressTestnet);
            const prv = testData.ACCOUNT_1.privkey;
            const keyPair2 = new lib_1.KeyPair({ prv: prv });
            const address2 = keyPair2.getAddress('testnet');
            address2.should.equal(testData.ACCOUNT_1.addressTestnet);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,