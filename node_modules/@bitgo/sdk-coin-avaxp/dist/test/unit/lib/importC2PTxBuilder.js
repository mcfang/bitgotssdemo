"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
require("should");
const errorMessage = __importStar(require("../../resources/errors"));
const lib_1 = require("../../../src/lib");
const statics_1 = require("@bitgo/statics");
const importC_1 = require("../../resources/tx/importC");
const signFlowTestSuit_1 = __importDefault(require("./signFlowTestSuit"));
describe('AvaxP Import C2P Tx Builder', () => {
    const factory = new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'));
    describe('validate txBuilder fields', () => {
        const txBuilder = factory.getImportInCBuilder();
        it('should fail validate Utxos empty string', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_EMPTY);
        });
        it('should fail validate Utxos without amount field', () => {
            assert_1.default.throws(() => {
                txBuilder.validateUtxos([{ outputID: '' }]);
            }, (e) => e.message === errorMessage.ERROR_UTXOS_AMOUNT);
        });
    });
    signFlowTestSuit_1.default({
        transactionType: 'Import C2P',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getImportInCBuilder()
            .threshold(importC_1.IMPORT_C.threshold)
            .fromPubKey(importC_1.IMPORT_C.pAddresses)
            .utxos(importC_1.IMPORT_C.outputs)
            .to(importC_1.IMPORT_C.to)
            .feeRate(importC_1.IMPORT_C.fee),
        unsignedTxHex: importC_1.IMPORT_C.unsignedTxHex,
        halfsigntxHex: importC_1.IMPORT_C.halfsigntxHex,
        fullsigntxHex: importC_1.IMPORT_C.fullsigntxHex,
        privKey: {
            prv1: importC_1.IMPORT_C.privKey.prv1,
            prv2: importC_1.IMPORT_C.privKey.prv2,
        },
    });
    signFlowTestSuit_1.default({
        transactionType: 'Import C2P recovery',
        newTxFactory: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp')),
        newTxBuilder: () => new lib_1.TransactionBuilderFactory(statics_1.coins.get('tavaxp'))
            .getImportInCBuilder()
            .threshold(importC_1.IMPORT_C.threshold)
            .fromPubKey(importC_1.IMPORT_C.pAddresses)
            .utxos(importC_1.IMPORT_C.outputs)
            .to(importC_1.IMPORT_C.to)
            .feeRate(importC_1.IMPORT_C.fee)
            .recoverMode(),
        unsignedTxHex: importC_1.IMPORT_C.rUnsignedTxHex,
        halfsigntxHex: importC_1.IMPORT_C.rHalfsigntxHex,
        fullsigntxHex: importC_1.IMPORT_C.rFullsigntxHex,
        privKey: {
            prv1: importC_1.IMPORT_C.privKey.prv3,
            prv2: importC_1.IMPORT_C.privKey.prv2,
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0QzJQVHhCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC91bml0L2xpYi9pbXBvcnRDMlBUeEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsb0RBQTRCO0FBQzVCLGtCQUFnQjtBQUNoQixxRUFBdUQ7QUFDdkQsMENBQTZFO0FBQzdFLDRDQUF1QztBQUN2Qyx3REFBc0Q7QUFDdEQsMEVBQThDO0FBRTlDLFFBQVEsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7SUFDM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSwrQkFBeUIsQ0FBQyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbkUsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUVoRCxFQUFFLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1lBQ2pELGdCQUFNLENBQUMsTUFBTSxDQUNYLEdBQUcsRUFBRTtnQkFDSCxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLENBQUMsRUFDRCxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxZQUFZLENBQUMsaUJBQWlCLENBQ3pELENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxHQUFHLEVBQUU7WUFDekQsZ0JBQU0sQ0FBQyxNQUFNLENBQ1gsR0FBRyxFQUFFO2dCQUNILFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQTJCLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsRUFDRCxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxZQUFZLENBQUMsa0JBQWtCLENBQzFELENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsMEJBQVksQ0FBQztRQUNYLGVBQWUsRUFBRSxZQUFZO1FBQzdCLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLCtCQUF5QixDQUFDLGVBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUNqQixJQUFJLCtCQUF5QixDQUFDLGVBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDL0MsbUJBQW1CLEVBQUU7YUFDckIsU0FBUyxDQUFDLGtCQUFRLENBQUMsU0FBUyxDQUFDO2FBQzdCLFVBQVUsQ0FBQyxrQkFBUSxDQUFDLFVBQVUsQ0FBQzthQUMvQixLQUFLLENBQUMsa0JBQVEsQ0FBQyxPQUFPLENBQUM7YUFDdkIsRUFBRSxDQUFDLGtCQUFRLENBQUMsRUFBRSxDQUFDO2FBQ2YsT0FBTyxDQUFDLGtCQUFRLENBQUMsR0FBRyxDQUFDO1FBQzFCLGFBQWEsRUFBRSxrQkFBUSxDQUFDLGFBQWE7UUFDckMsYUFBYSxFQUFFLGtCQUFRLENBQUMsYUFBYTtRQUNyQyxhQUFhLEVBQUUsa0JBQVEsQ0FBQyxhQUFhO1FBQ3JDLE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQzNCLElBQUksRUFBRSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1NBQzVCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsMEJBQVksQ0FBQztRQUNYLGVBQWUsRUFBRSxxQkFBcUI7UUFDdEMsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksK0JBQXlCLENBQUMsZUFBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RSxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQ2pCLElBQUksK0JBQXlCLENBQUMsZUFBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMvQyxtQkFBbUIsRUFBRTthQUNyQixTQUFTLENBQUMsa0JBQVEsQ0FBQyxTQUFTLENBQUM7YUFDN0IsVUFBVSxDQUFDLGtCQUFRLENBQUMsVUFBVSxDQUFDO2FBQy9CLEtBQUssQ0FBQyxrQkFBUSxDQUFDLE9BQU8sQ0FBQzthQUN2QixFQUFFLENBQUMsa0JBQVEsQ0FBQyxFQUFFLENBQUM7YUFDZixPQUFPLENBQUMsa0JBQVEsQ0FBQyxHQUFHLENBQUM7YUFDckIsV0FBVyxFQUFFO1FBQ2xCLGFBQWEsRUFBRSxrQkFBUSxDQUFDLGNBQWM7UUFDdEMsYUFBYSxFQUFFLGtCQUFRLENBQUMsY0FBYztRQUN0QyxhQUFhLEVBQUUsa0JBQVEsQ0FBQyxjQUFjO1FBQ3RDLE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQzNCLElBQUksRUFBRSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1NBQzVCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgJ3Nob3VsZCc7XG5pbXBvcnQgKiBhcyBlcnJvck1lc3NhZ2UgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2Vycm9ycyc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbkJ1aWxkZXJGYWN0b3J5LCBEZWNvZGVkVXR4b09iaiB9IGZyb20gJy4uLy4uLy4uL3NyYy9saWInO1xuaW1wb3J0IHsgY29pbnMgfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5pbXBvcnQgeyBJTVBPUlRfQyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy90eC9pbXBvcnRDJztcbmltcG9ydCBzaWduRmxvd1Rlc3QgZnJvbSAnLi9zaWduRmxvd1Rlc3RTdWl0JztcblxuZGVzY3JpYmUoJ0F2YXhQIEltcG9ydCBDMlAgVHggQnVpbGRlcicsICgpID0+IHtcbiAgY29uc3QgZmFjdG9yeSA9IG5ldyBUcmFuc2FjdGlvbkJ1aWxkZXJGYWN0b3J5KGNvaW5zLmdldCgndGF2YXhwJykpO1xuICBkZXNjcmliZSgndmFsaWRhdGUgdHhCdWlsZGVyIGZpZWxkcycsICgpID0+IHtcbiAgICBjb25zdCB0eEJ1aWxkZXIgPSBmYWN0b3J5LmdldEltcG9ydEluQ0J1aWxkZXIoKTtcblxuICAgIGl0KCdzaG91bGQgZmFpbCB2YWxpZGF0ZSBVdHhvcyBlbXB0eSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgICBhc3NlcnQudGhyb3dzKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdHhCdWlsZGVyLnZhbGlkYXRlVXR4b3MoW10pO1xuICAgICAgICB9LFxuICAgICAgICAoZTogYW55KSA9PiBlLm1lc3NhZ2UgPT09IGVycm9yTWVzc2FnZS5FUlJPUl9VVFhPU19FTVBUWVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmFpbCB2YWxpZGF0ZSBVdHhvcyB3aXRob3V0IGFtb3VudCBmaWVsZCcsICgpID0+IHtcbiAgICAgIGFzc2VydC50aHJvd3MoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0eEJ1aWxkZXIudmFsaWRhdGVVdHhvcyhbeyBvdXRwdXRJRDogJycgfSBhcyBhbnkgYXMgRGVjb2RlZFV0eG9PYmpdKTtcbiAgICAgICAgfSxcbiAgICAgICAgKGU6IGFueSkgPT4gZS5tZXNzYWdlID09PSBlcnJvck1lc3NhZ2UuRVJST1JfVVRYT1NfQU1PVU5UXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBzaWduRmxvd1Rlc3Qoe1xuICAgIHRyYW5zYWN0aW9uVHlwZTogJ0ltcG9ydCBDMlAnLFxuICAgIG5ld1R4RmFjdG9yeTogKCkgPT4gbmV3IFRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnkoY29pbnMuZ2V0KCd0YXZheHAnKSksXG4gICAgbmV3VHhCdWlsZGVyOiAoKSA9PlxuICAgICAgbmV3IFRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnkoY29pbnMuZ2V0KCd0YXZheHAnKSlcbiAgICAgICAgLmdldEltcG9ydEluQ0J1aWxkZXIoKVxuICAgICAgICAudGhyZXNob2xkKElNUE9SVF9DLnRocmVzaG9sZClcbiAgICAgICAgLmZyb21QdWJLZXkoSU1QT1JUX0MucEFkZHJlc3NlcylcbiAgICAgICAgLnV0eG9zKElNUE9SVF9DLm91dHB1dHMpXG4gICAgICAgIC50byhJTVBPUlRfQy50bylcbiAgICAgICAgLmZlZVJhdGUoSU1QT1JUX0MuZmVlKSxcbiAgICB1bnNpZ25lZFR4SGV4OiBJTVBPUlRfQy51bnNpZ25lZFR4SGV4LFxuICAgIGhhbGZzaWdudHhIZXg6IElNUE9SVF9DLmhhbGZzaWdudHhIZXgsXG4gICAgZnVsbHNpZ250eEhleDogSU1QT1JUX0MuZnVsbHNpZ250eEhleCxcbiAgICBwcml2S2V5OiB7XG4gICAgICBwcnYxOiBJTVBPUlRfQy5wcml2S2V5LnBydjEsXG4gICAgICBwcnYyOiBJTVBPUlRfQy5wcml2S2V5LnBydjIsXG4gICAgfSxcbiAgfSk7XG5cbiAgc2lnbkZsb3dUZXN0KHtcbiAgICB0cmFuc2FjdGlvblR5cGU6ICdJbXBvcnQgQzJQIHJlY292ZXJ5JyxcbiAgICBuZXdUeEZhY3Rvcnk6ICgpID0+IG5ldyBUcmFuc2FjdGlvbkJ1aWxkZXJGYWN0b3J5KGNvaW5zLmdldCgndGF2YXhwJykpLFxuICAgIG5ld1R4QnVpbGRlcjogKCkgPT5cbiAgICAgIG5ldyBUcmFuc2FjdGlvbkJ1aWxkZXJGYWN0b3J5KGNvaW5zLmdldCgndGF2YXhwJykpXG4gICAgICAgIC5nZXRJbXBvcnRJbkNCdWlsZGVyKClcbiAgICAgICAgLnRocmVzaG9sZChJTVBPUlRfQy50aHJlc2hvbGQpXG4gICAgICAgIC5mcm9tUHViS2V5KElNUE9SVF9DLnBBZGRyZXNzZXMpXG4gICAgICAgIC51dHhvcyhJTVBPUlRfQy5vdXRwdXRzKVxuICAgICAgICAudG8oSU1QT1JUX0MudG8pXG4gICAgICAgIC5mZWVSYXRlKElNUE9SVF9DLmZlZSlcbiAgICAgICAgLnJlY292ZXJNb2RlKCksXG4gICAgdW5zaWduZWRUeEhleDogSU1QT1JUX0MuclVuc2lnbmVkVHhIZXgsXG4gICAgaGFsZnNpZ250eEhleDogSU1QT1JUX0MuckhhbGZzaWdudHhIZXgsXG4gICAgZnVsbHNpZ250eEhleDogSU1QT1JUX0MuckZ1bGxzaWdudHhIZXgsXG4gICAgcHJpdktleToge1xuICAgICAgcHJ2MTogSU1QT1JUX0MucHJpdktleS5wcnYzLFxuICAgICAgcHJ2MjogSU1QT1JUX0MucHJpdktleS5wcnYyLFxuICAgIH0sXG4gIH0pO1xufSk7XG4iXX0=