"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeedValidator = void 0;
const stellar = __importStar(require("stellar-sdk"));
const _ = __importStar(require("lodash"));
const statics_1 = require("@bitgo/statics");
const lib_1 = require("./lib");
const cryptography_1 = require("@hashgraph/cryptography");
/**
 * This classes intention is to guess/verify what seeds come from where.
 */
class SeedValidator {
    /**
     * Try to guess what kind of seed this could be
     * @param seed
     * @returns {string} - returns undefined if the coin type is undetectable. returns
     * the coin family otherwise.
     */
    static getCoinFamilyFromSeed(seed) {
        let coin = undefined;
        // if this can be implemented in more than one competing seed format, that could be an issue
        if (!SeedValidator.hasCompetingSeedFormats(seed)) {
            // ordering generally matters here - hbar is the least permissive for seed checking, algo and
            // stellar have checksums. coin is guaranteed to be mutually exclusive by the
            // competing seed format check
            if (lib_1.algoUtils.isValidSeed(seed))
                coin = statics_1.CoinFamily.ALGO;
            if (stellar.StrKey.isValidEd25519SecretSeed(seed))
                coin = statics_1.CoinFamily.XLM;
            if (SeedValidator.isValidHbarSeedFormat(seed))
                coin = statics_1.CoinFamily.HBAR;
        }
        return coin;
    }
    /**
     * Checks whether this is a valid seed for this coin family type.
     * @param seed - seed
     * @param coinFamily - the coinFamily of the coin we're working with
     */
    static isValidEd25519SeedForCoin(seed, coinFamily) {
        const guessedCoin = SeedValidator.getCoinFamilyFromSeed(seed);
        return coinFamily === guessedCoin;
    }
    /**
     * We need to ensure there is no overlap for any two seeds we put into this function. This functions
     * intention is for gating whether this seed could possibly match two formats or is invalid itself.
     * @param seed
     */
    static hasCompetingSeedFormats(seed) {
        const isAlgoSeed = lib_1.algoUtils.isValidSeed(seed);
        const isStellarSeed = stellar.StrKey.isValidEd25519SecretSeed(seed);
        const isHbarSeed = SeedValidator.isValidHbarSeedFormat(seed);
        return _.sum([isAlgoSeed, isStellarSeed, isHbarSeed]) !== 1;
    }
    /**
     * Checks if this is a valid Hbar prv. These can be encoded differently.
     * @param seed
     */
    static isValidHbarSeedFormat(seed) {
        try {
            cryptography_1.PrivateKey.fromString(seed);
        }
        catch {
            return false;
        }
        return true;
    }
}
exports.SeedValidator = SeedValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VlZFZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZWVkVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxREFBdUM7QUFDdkMsMENBQTRCO0FBQzVCLDRDQUE0QztBQUM1QywrQkFBa0M7QUFDbEMsMERBQXFEO0FBQ3JEOztHQUVHO0FBQ0gsTUFBYSxhQUFhO0lBQ3hCOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQVk7UUFDdkMsSUFBSSxJQUFJLEdBQTJCLFNBQVMsQ0FBQztRQUU3Qyw0RkFBNEY7UUFDNUYsSUFBSSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoRCw2RkFBNkY7WUFDN0YsNkVBQTZFO1lBQzdFLDhCQUE4QjtZQUU5QixJQUFJLGVBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUFFLElBQUksR0FBRyxvQkFBVSxDQUFDLElBQUksQ0FBQztZQUN4RCxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDO2dCQUFFLElBQUksR0FBRyxvQkFBVSxDQUFDLEdBQUcsQ0FBQztZQUN6RSxJQUFJLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7Z0JBQUUsSUFBSSxHQUFHLG9CQUFVLENBQUMsSUFBSSxDQUFDO1NBQ3ZFO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFZLEVBQUUsVUFBc0I7UUFDbkUsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlELE9BQU8sVUFBVSxLQUFLLFdBQVcsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxJQUFZO1FBQ3pDLE1BQU0sVUFBVSxHQUFHLGVBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRSxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0QsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQVk7UUFDdkMsSUFBSTtZQUNGLHlCQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO1FBQUMsTUFBTTtZQUNOLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQTNERCxzQ0EyREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzdGVsbGFyIGZyb20gJ3N0ZWxsYXItc2RrJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IENvaW5GYW1pbHkgfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5pbXBvcnQgeyBhbGdvVXRpbHMgfSBmcm9tICcuL2xpYic7XG5pbXBvcnQgeyBQcml2YXRlS2V5IH0gZnJvbSAnQGhhc2hncmFwaC9jcnlwdG9ncmFwaHknO1xuLyoqXG4gKiBUaGlzIGNsYXNzZXMgaW50ZW50aW9uIGlzIHRvIGd1ZXNzL3ZlcmlmeSB3aGF0IHNlZWRzIGNvbWUgZnJvbSB3aGVyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlZWRWYWxpZGF0b3Ige1xuICAvKipcbiAgICogVHJ5IHRvIGd1ZXNzIHdoYXQga2luZCBvZiBzZWVkIHRoaXMgY291bGQgYmVcbiAgICogQHBhcmFtIHNlZWRcbiAgICogQHJldHVybnMge3N0cmluZ30gLSByZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGUgY29pbiB0eXBlIGlzIHVuZGV0ZWN0YWJsZS4gcmV0dXJuc1xuICAgKiB0aGUgY29pbiBmYW1pbHkgb3RoZXJ3aXNlLlxuICAgKi9cbiAgc3RhdGljIGdldENvaW5GYW1pbHlGcm9tU2VlZChzZWVkOiBzdHJpbmcpOiBDb2luRmFtaWx5IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgY29pbjogQ29pbkZhbWlseSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIGlmIHRoaXMgY2FuIGJlIGltcGxlbWVudGVkIGluIG1vcmUgdGhhbiBvbmUgY29tcGV0aW5nIHNlZWQgZm9ybWF0LCB0aGF0IGNvdWxkIGJlIGFuIGlzc3VlXG4gICAgaWYgKCFTZWVkVmFsaWRhdG9yLmhhc0NvbXBldGluZ1NlZWRGb3JtYXRzKHNlZWQpKSB7XG4gICAgICAvLyBvcmRlcmluZyBnZW5lcmFsbHkgbWF0dGVycyBoZXJlIC0gaGJhciBpcyB0aGUgbGVhc3QgcGVybWlzc2l2ZSBmb3Igc2VlZCBjaGVja2luZywgYWxnbyBhbmRcbiAgICAgIC8vIHN0ZWxsYXIgaGF2ZSBjaGVja3N1bXMuIGNvaW4gaXMgZ3VhcmFudGVlZCB0byBiZSBtdXR1YWxseSBleGNsdXNpdmUgYnkgdGhlXG4gICAgICAvLyBjb21wZXRpbmcgc2VlZCBmb3JtYXQgY2hlY2tcblxuICAgICAgaWYgKGFsZ29VdGlscy5pc1ZhbGlkU2VlZChzZWVkKSkgY29pbiA9IENvaW5GYW1pbHkuQUxHTztcbiAgICAgIGlmIChzdGVsbGFyLlN0cktleS5pc1ZhbGlkRWQyNTUxOVNlY3JldFNlZWQoc2VlZCkpIGNvaW4gPSBDb2luRmFtaWx5LlhMTTtcbiAgICAgIGlmIChTZWVkVmFsaWRhdG9yLmlzVmFsaWRIYmFyU2VlZEZvcm1hdChzZWVkKSkgY29pbiA9IENvaW5GYW1pbHkuSEJBUjtcbiAgICB9XG5cbiAgICByZXR1cm4gY29pbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGlzIGlzIGEgdmFsaWQgc2VlZCBmb3IgdGhpcyBjb2luIGZhbWlseSB0eXBlLlxuICAgKiBAcGFyYW0gc2VlZCAtIHNlZWRcbiAgICogQHBhcmFtIGNvaW5GYW1pbHkgLSB0aGUgY29pbkZhbWlseSBvZiB0aGUgY29pbiB3ZSdyZSB3b3JraW5nIHdpdGhcbiAgICovXG4gIHN0YXRpYyBpc1ZhbGlkRWQyNTUxOVNlZWRGb3JDb2luKHNlZWQ6IHN0cmluZywgY29pbkZhbWlseTogQ29pbkZhbWlseSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGd1ZXNzZWRDb2luID0gU2VlZFZhbGlkYXRvci5nZXRDb2luRmFtaWx5RnJvbVNlZWQoc2VlZCk7XG4gICAgcmV0dXJuIGNvaW5GYW1pbHkgPT09IGd1ZXNzZWRDb2luO1xuICB9XG5cbiAgLyoqXG4gICAqIFdlIG5lZWQgdG8gZW5zdXJlIHRoZXJlIGlzIG5vIG92ZXJsYXAgZm9yIGFueSB0d28gc2VlZHMgd2UgcHV0IGludG8gdGhpcyBmdW5jdGlvbi4gVGhpcyBmdW5jdGlvbnNcbiAgICogaW50ZW50aW9uIGlzIGZvciBnYXRpbmcgd2hldGhlciB0aGlzIHNlZWQgY291bGQgcG9zc2libHkgbWF0Y2ggdHdvIGZvcm1hdHMgb3IgaXMgaW52YWxpZCBpdHNlbGYuXG4gICAqIEBwYXJhbSBzZWVkXG4gICAqL1xuICBzdGF0aWMgaGFzQ29tcGV0aW5nU2VlZEZvcm1hdHMoc2VlZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXNBbGdvU2VlZCA9IGFsZ29VdGlscy5pc1ZhbGlkU2VlZChzZWVkKTtcbiAgICBjb25zdCBpc1N0ZWxsYXJTZWVkID0gc3RlbGxhci5TdHJLZXkuaXNWYWxpZEVkMjU1MTlTZWNyZXRTZWVkKHNlZWQpO1xuICAgIGNvbnN0IGlzSGJhclNlZWQgPSBTZWVkVmFsaWRhdG9yLmlzVmFsaWRIYmFyU2VlZEZvcm1hdChzZWVkKTtcblxuICAgIHJldHVybiBfLnN1bShbaXNBbGdvU2VlZCwgaXNTdGVsbGFyU2VlZCwgaXNIYmFyU2VlZF0pICE9PSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGlzIGEgdmFsaWQgSGJhciBwcnYuIFRoZXNlIGNhbiBiZSBlbmNvZGVkIGRpZmZlcmVudGx5LlxuICAgKiBAcGFyYW0gc2VlZFxuICAgKi9cbiAgc3RhdGljIGlzVmFsaWRIYmFyU2VlZEZvcm1hdChzZWVkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHNlZWQpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl19