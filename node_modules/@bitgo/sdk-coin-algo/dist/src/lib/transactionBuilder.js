"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const algosdk_1 = __importDefault(require("algosdk"));
const transaction_1 = require("./transaction");
const errors_1 = require("./errors");
const keyPair_1 = require("./keyPair");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
const sdk_core_1 = require("@bitgo/sdk-core");
const MIN_FEE = 1000; // in microalgos
const MAINNET_GENESIS_ID = 'mainnet-v1.0';
const MAINNET_GENESIS_HASH = 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=';
const TESTNET_GENESIS_ID = 'testnet-v1.0';
const TESTNET_GENESIS_HASH = 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=';
const BETANET_GENESIS_ID = 'betanet-v1.0';
const BETANET_GENESIS_HASH = 'mFgazF+2uRS1tMiL9dsj01hJGySEmPN28B/TjjvpVW0=';
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(coinConfig) {
        super(coinConfig);
        this._transaction = new transaction_1.Transaction(coinConfig);
        this._keyPairs = [];
    }
    /**
     * Sets the fee.
     *
     * The minimum fee is 1000 microalgos.
     *
     * @param {BaseFee} feeObj The amount to pay to the fee sink denoted in microalgos
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    fee(feeObj) {
        this._isFlatFee = true;
        const fee = new bignumber_js_1.default(feeObj.fee).toNumber();
        if (this._isFlatFee && fee < MIN_FEE) {
            throw new errors_1.InsufficientFeeError(fee, MIN_FEE);
        }
        this._fee = fee;
        return this;
    }
    /**
     * Sets whether the fee is a flat fee.
     *
     * A flat fee is the fee for the entire transaction whereas a normal fee
     * is a fee for every byte in the transaction.
     *
     * @param {boolean} isFlatFee Whether the fee should be specified as a flat fee.
     * @returns {TransactionBuilder} This transaction builder.
     */
    isFlatFee(isFlatFee) {
        this._isFlatFee = isFlatFee;
        return this;
    }
    /**
     * Sets the transaction sender.
     *
     * @param {BaseAddress} sender The sender account
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    sender(sender) {
        this.validateAddress(sender);
        this._sender = sender.address;
        this._transaction.sender(sender.address);
        return this;
    }
    /**
     * Sets the genesis id.
     *
     * @param {string} genesisId The genesis id.
     * @example "mainnet-v1.0"
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    genesisId(genesisId) {
        this._genesisId = genesisId;
        return this;
    }
    /**
     * Sets the genesis hash.
     *
     * The genesis hash must be base64 encoded.
     *
     * @param {string} genesisHash The genesis hash.
     * @example "wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8="
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    genesisHash(genesisHash) {
        this._genesisHash = genesisHash;
        return this;
    }
    /**
     * Sets the genesis id and hash to mainnet.
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/algorand-networks/mainnet/#genesis-id
     * @see https://developer.algorand.org/docs/reference/algorand-networks/mainnet/#genesis-hash
     */
    mainnet() {
        this.genesisId(MAINNET_GENESIS_ID);
        this.genesisHash(MAINNET_GENESIS_HASH);
        return this;
    }
    /**
     * Sets the genesis id and hash to testnet.
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/algorand-networks/testnet/#genesis-id
     * @see https://developer.algorand.org/docs/reference/algorand-networks/testnet/#genesis-hash
     */
    testnet() {
        this.genesisId(TESTNET_GENESIS_ID);
        this.genesisHash(TESTNET_GENESIS_HASH);
        return this;
    }
    /**
     * Sets the genesis id and hash to betanet.
     *
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/algorand-networks/betanet/#genesis-id
     * @see https://developer.algorand.org/docs/reference/algorand-networks/betanet/#genesis-hash
     */
    betanet() {
        this.genesisId(BETANET_GENESIS_ID);
        this.genesisHash(BETANET_GENESIS_HASH);
        return this;
    }
    /**
     * Sets the first round.
     *
     * @param {number} round The first protocol round on which this txn is valid.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    firstRound(round) {
        this.validateValue(new bignumber_js_1.default(round));
        this._firstRound = round;
        return this;
    }
    /**
     * Sets the last round.
     *
     * @param {number} round The first protocol round on which this txn is valid.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    lastRound(round) {
        this.validateValue(new bignumber_js_1.default(round));
        this._lastRound = round;
        return this;
    }
    /**
     * Sets the lease on the transaction.
     *
     * A lease is a mutex on the transaction that prevents any other transaction
     * from being sent with the same lease until the prior transaction's last
     * round has passed.
     *
     * @param {Uint8Array} lease The lease to put the transaction.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    lease(lease) {
        this._lease = lease;
        return this;
    }
    /**
     * Sets the note for the transaction.
     *
     * @param {Uint8Array} note Arbitrary data for sender to store.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    note(note) {
        this._note = note;
        return this;
    }
    /**
     * Sets the authorized address.
     *
     * The authorized asset will be used to authorize all future transactions.
     *
     * @param {BaseAddress} authorizer The address to delegate authorization authority to.
     * @returns {TransactionBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/
     */
    reKeyTo(authorizer) {
        this.validateAddress(authorizer);
        this._reKeyTo = authorizer.address;
        return this;
    }
    /** @inheritdoc */
    validateAddress({ address }) {
        if (!algosdk_1.default.isValidAddress(address)) {
            throw new errors_1.AddressValidationError(address);
        }
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.transaction.setAlgoTransaction(this.buildAlgoTxn());
        this.transaction.setTransactionType(this.transactionType);
        this.transaction.sign(this._keyPairs);
        this._transaction.loadInputsAndOutputs();
        return this._transaction;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const decodedTxn = utils_1.default.decodeAlgoTxn(rawTransaction);
        const algosdkTxn = decodedTxn.txn;
        if (decodedTxn.signed) {
            this._transaction.signedTransaction = decodedTxn.rawTransaction;
            if (decodedTxn.signers) {
                this.setSigners(decodedTxn.signers);
            }
            if (decodedTxn.signedBy) {
                this._transaction.signedBy = decodedTxn.signedBy;
            }
        }
        this.sender({ address: algosdk_1.default.encodeAddress(algosdkTxn.from.publicKey) });
        this._isFlatFee = true;
        this._fee = algosdkTxn.fee;
        this._genesisHash = algosdkTxn.genesisHash.toString('base64');
        this._genesisId = algosdkTxn.genesisID;
        this._firstRound = algosdkTxn.firstRound;
        this._lastRound = algosdkTxn.lastRound;
        this._lease = algosdkTxn.lease;
        this._note = algosdkTxn.note;
        this._reKeyTo = algosdkTxn.reKeyTo ? algosdk_1.default.encodeAddress(algosdkTxn.reKeyTo.publicKey) : undefined;
        this._transaction.setAlgoTransaction(algosdkTxn);
        return this._transaction;
    }
    /** @inheritdoc */
    signImplementation({ key }) {
        const buffKey = utils_1.default.decodeSeed(key);
        const keypair = new keyPair_1.KeyPair({ prv: Buffer.from(buffKey.seed).toString('hex') });
        this._keyPairs.push(keypair);
        return this._transaction;
    }
    numberOfSigners(num) {
        this._transaction.setNumberOfRequiredSigners(num);
        return this;
    }
    setSigners(addrs) {
        const signers = addrs instanceof Array ? addrs : [addrs];
        signers.forEach((address) => this.validateAddress({ address: address }));
        this._transaction.signers = signers;
        return this;
    }
    /**
     * Sets the number of signers required to sign the transaction.
     *
     * The number of signers cannot be set to a negative value.
     *
     * @param {number} n The number of signers.
     * @returns {TransactionBuilder} This transaction builder.
     */
    numberOfRequiredSigners(n) {
        if (n < 0) {
            throw new sdk_core_1.BuildTransactionError(`Number of signers: '${n}' cannot be negative`);
        }
        this._transaction.setNumberOfRequiredSigners(n);
        return this;
    }
    /**
     * @inheritdoc
     * @see https://developer.algorand.org/docs/features/accounts/#transformation-private-key-to-base64-private-key
     */
    validateKey({ key }) {
        let isValidPrivateKeyFromBytes;
        const isValidPrivateKeyFromHex = sdk_core_1.isValidEd25519Seed(key);
        const isValidPrivateKeyFromBase64 = sdk_core_1.isValidEd25519Seed(Buffer.from(key, 'base64').toString('hex'));
        try {
            const decodedSeed = utils_1.default.decodeSeed(key);
            isValidPrivateKeyFromBytes = sdk_core_1.isValidEd25519Seed(Buffer.from(decodedSeed.seed).toString('hex'));
        }
        catch (err) {
            isValidPrivateKeyFromBytes = false;
        }
        if (!isValidPrivateKeyFromBytes && !isValidPrivateKeyFromHex && !isValidPrivateKeyFromBase64) {
            throw new sdk_core_1.BuildTransactionError(`Key validation failed`);
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        const decodedTxn = utils_1.default.decodeAlgoTxn(rawTransaction);
        const algoTxn = decodedTxn.txn;
        const validationResult = txnSchema_1.BaseTransactionSchema.validate({
            fee: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.fee,
            firstRound: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.firstRound,
            genesisHash: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.genesisHash.toString('base64'),
            lastRound: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.lastRound,
            sender: algoTxn ? algosdk_1.default.encodeAddress(algoTxn.from.publicKey) : undefined,
            genesisId: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.genesisID,
            lease: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.lease,
            note: algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.note,
            reKeyTo: (algoTxn === null || algoTxn === void 0 ? void 0 : algoTxn.reKeyTo) ? algosdk_1.default.encodeAddress(algoTxn.reKeyTo.publicKey) : undefined,
        });
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    /** @inheritdoc */
    validateTransaction(_) {
        this.validateBaseFields(this._fee, this._firstRound, this._genesisHash, this._lastRound, this._sender, this._genesisId, this._lease, this._note, this._reKeyTo);
    }
    validateBaseFields(fee, firstRound, genesisHash, lastRound, sender, genesisId, lease, note, reKeyTo) {
        const validationResult = txnSchema_1.BaseTransactionSchema.validate({
            fee,
            firstRound,
            genesisHash,
            lastRound,
            sender,
            genesisId,
            lease,
            note,
            reKeyTo,
        });
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /**
     * Convenience method to retrieve the algosdk suggested parameters.
     *
     * @returns {algosdk.SuggestedParams} The algosdk suggested parameters.
     */
    get suggestedParams() {
        return {
            flatFee: this._isFlatFee,
            fee: this._fee,
            firstRound: this._firstRound,
            lastRound: this._lastRound,
            genesisID: this._genesisId,
            genesisHash: this._genesisHash,
        };
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,