"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const stellar_sdk_1 = __importDefault(require("stellar-sdk"));
const hex = __importStar(require("@stablelib/hex"));
const nacl = __importStar(require("tweetnacl"));
const hi_base32_1 = __importDefault(require("hi-base32"));
const js_sha512_1 = __importDefault(require("js-sha512"));
const lodash_1 = __importDefault(require("lodash"));
const keyPair_1 = require("./keyPair");
const seedEncoding_1 = require("./seedEncoding");
const algoNacl = __importStar(require("algosdk/dist/cjs/src/nacl/naclWrappers"));
const encoding = __importStar(require("algosdk/dist/cjs/src/encoding/encoding"));
const sdk_core_1 = require("@bitgo/sdk-core");
const ALGORAND_CHECKSUM_BYTE_LENGTH = 4;
const ALGORAND_SEED_LENGTH = 58;
const ALGORAND_SEED_BYTE_LENGTH = 36;
const ALGORAND_TRANSACTION_LENGTH = 52;
const SEED_BYTES_LENGTH = 32;
/**
 * Determines whether the string is only composed of hex chars.
 *
 * @param {string} maybe The string to be validated.
 * @returns {boolean} true if the string consists of only hex characters, otherwise false.
 */
function allHexChars(maybe) {
    return /^([0-9a-f]{2})+$/i.test(maybe);
}
/**
 * ConcatArrays takes two array and returns a joint array of both
 *
 * @param a {Uint8Array} first array to concat
 * @param b {Uint8Array} second array
 * @returns {Uint8Array} a new array containing all elements of 'a' followed by all elements of 'b'
 */
function concatArrays(a, b) {
    const c = new Uint8Array(a.length + b.length);
    c.set(a);
    c.set(b, a.length);
    return c;
}
class Utils {
    /** @inheritdoc */
    isValidAddress(address) {
        return algosdk_1.default.isValidAddress(address);
    }
    /** @inheritdoc */
    isValidTransactionId(txId) {
        if (txId.length !== 104) {
            return false;
        }
        return allHexChars(txId);
    }
    /** @inheritdoc */
    isValidPublicKey(key) {
        return sdk_core_1.isValidEd25519PublicKey(key);
    }
    /** @inheritdoc */
    isValidPrivateKey(key) {
        return sdk_core_1.isValidEd25519SecretKey(key);
    }
    /**
     * Returns an hex string of the given buffer
     *
     * @param {Uint8Array} buffer - the buffer to be converted to hex
     * @returns {string} - the hex value
     */
    toHex(buffer) {
        return hex.encode(buffer, true);
    }
    /** @inheritdoc */
    isValidSignature(signature) {
        throw new sdk_core_1.NotImplementedError('isValidSignature not implemented.');
    }
    /** @inheritdoc */
    isValidBlockId(hash) {
        throw new sdk_core_1.NotImplementedError('hash not implemented.');
    }
    /**
     * Compare two Keys
     *
     * @param {Uint8Array} key1 - key to be compare
     * @param {Uint8Array} key2 - key to be compare
     * @returns {boolean} - returns true if both keys are equal
     */
    areKeysEqual(key1, key2) {
        return nacl.verify(key1, key2);
    }
    /**
     * Returns a Uint8Array of the given hex string
     *
     * @param {string} str - the hex string to be converted
     * @returns {string} - the Uint8Array value
     */
    toUint8Array(str) {
        return Buffer.from(str, 'hex');
    }
    /**
     * Determines whether a seed is valid.
     *
     * @param {string} seed - the seed to be validated
     * @returns {boolean} - true if the seed is valid
     */
    isValidSeed(seed) {
        if (typeof seed !== 'string')
            return false;
        if (seed.length !== ALGORAND_SEED_LENGTH)
            return false;
        // Try to decode
        let decoded;
        try {
            decoded = this.decodeSeed(seed);
        }
        catch (e) {
            return false;
        }
        // Compute checksum
        const checksum = new Uint8Array(js_sha512_1.default.sha512_256.array(decoded.seed).slice(SEED_BYTES_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, SEED_BYTES_LENGTH));
        // Check if the checksum matches the one from the decoded seed
        return lodash_1.default.isEqual(checksum, decoded.checksum);
    }
    /**
     * Encode an algo seed
     *
     * @param  {Buffer} secretKey - the valid secretKey .
     * @returns {string} - the seed to be validated.
     */
    encodeSeed(secretKey) {
        // get seed
        const seed = secretKey.slice(0, SEED_BYTES_LENGTH);
        // compute checksum
        const checksum = Buffer.from(js_sha512_1.default.sha512_256.array(seed).slice(SEED_BYTES_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, SEED_BYTES_LENGTH));
        const encodedSeed = hi_base32_1.default.encode(concatArrays(seed, checksum));
        return encodedSeed.toString().slice(0, ALGORAND_SEED_LENGTH); // removing the extra '===='
    }
    /**
     * decodeSeed decodes an algo seed
     *
     * Decoding algo seed is same as decoding address.
     * Latest version of algo sdk (1.9, at this writing) does not expose explicit method for decoding seed.
     * Parameter is decoded and split into seed and checksum.
     *
     * @param {string} seed - hex or base64 encoded seed to be validated
     * @returns {Seed} - validated object Seed
     */
    decodeSeed(seed) {
        // try to decode
        const decoded = hi_base32_1.default.decode.asBytes(seed);
        // Sanity check
        if (decoded.length !== ALGORAND_SEED_BYTE_LENGTH)
            throw new Error('seed seems to be malformed');
        return {
            seed: new Uint8Array(decoded.slice(0, ALGORAND_SEED_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH)),
            checksum: new Uint8Array(decoded.slice(SEED_BYTES_LENGTH, ALGORAND_SEED_BYTE_LENGTH)),
        };
    }
    /**
     * Verifies if signature for message is valid.
     *
     * @param pub {Uint8Array} public key
     * @param message {Uint8Array} signed message
     * @param signature {Buffer} signature to verify
     * @returns {Boolean} true if signature is valid.
     */
    verifySignature(message, signature, pub) {
        return nacl.sign.detached.verify(message, signature, pub);
    }
    /**
     * Transforms an Ed25519 public key into an algorand address.
     *
     * @param {Uint8Array} pk The Ed25519 public key.
     * @see https://developer.algorand.org/docs/features/accounts/#transformation-public-key-to-algorand-address
     *
     * @returns {string} The algorand address.
     */
    publicKeyToAlgoAddress(pk) {
        return new keyPair_1.KeyPair({ pub: Buffer.from(pk).toString('hex') }).getAddress();
    }
    /**
     * Checks if a unsigned algo transaction can be decoded.
     *
     * @param {Uint8Array} txn The encoded unsigned transaction.
     * @returns {boolean} true if the transaction can be decoded, otherwise false
     */
    isDecodableUnsignedAlgoTxn(txn) {
        try {
            algosdk_1.default.decodeUnsignedTransaction(txn);
            return true;
        }
        catch {
            return false;
        }
    }
    /**
     * Checks if a signed algo transaction can be decoded.
     *
     * @param {Uint8Array} txn The encoded signed transaction.
     * @returns {boolean} true if the transaction can be decoded, otherwise false
     */
    isDecodableSignedTransaction(txn) {
        try {
            algosdk_1.default.decodeSignedTransaction(txn);
            return true;
        }
        catch {
            return false;
        }
    }
    /**
     * Decodes a signed or unsigned algo transaction.
     *
     * @param {Uint8Array | string} txnBytes The encoded unsigned or signed txn.
     * @returns {EncodedTx} The decoded transaction.
     */
    decodeAlgoTxn(txnBytes) {
        let buffer = typeof txnBytes === 'string'
            ? Buffer.from(txnBytes, allHexChars(txnBytes) ? 'hex' : 'base64')
            : Buffer.from(txnBytes);
        // In order to maintain backward compatibility with old keyreg transactions encoded with
        // forked algosdk 1.2.0 (https://github.com/BitGo/algosdk-bitgo),
        // the relevant information is extracted and parsed following the latest algosdk
        // release standard.
        // This way we can decode transactions successfully by still maintaining backward compatibility.
        const decodedTx = encoding.decode(buffer);
        if (decodedTx.txn &&
            decodedTx.txn.type === 'keyreg' &&
            decodedTx.txn.votefst &&
            decodedTx.txn.votelst &&
            decodedTx.txn.votekd) {
            decodedTx.txn.votekey = decodedTx.txn.votekey || decodedTx.msig.subsig[0].pk;
            decodedTx.txn.selkey = decodedTx.txn.selkey || decodedTx.msig.subsig[0].pk;
            buffer = decodedTx.msig || decodedTx.sig ? encoding.encode(decodedTx) : encoding.encode(decodedTx.txn);
        }
        try {
            return this.tryToDecodeUnsignedTransaction(buffer);
        }
        catch {
            // Ignore error to try different format
        }
        try {
            return this.tryToDecodeSignedTransaction(buffer);
        }
        catch {
            throw new sdk_core_1.InvalidTransactionError('Transaction cannot be decoded');
        }
    }
    /**
     * Try to decode a signed Algo transaction
     * @param buffer the encoded transaction
     * @returns { EncodedTx } the decoded signed transaction
     * @throws error if it is not a valid encoded signed transaction
     */
    tryToDecodeSignedTransaction(buffer) {
        // TODO: Replace with
        // return algosdk.Transaction.from_obj_for_encoding(algosdk.decodeSignedTransaction(buffer).txn);
        // see: https://github.com/algorand/js-algorand-sdk/issues/364
        // "...some parts of the codebase treat the output of Transaction.from_obj_for_encoding as EncodedTransaction.
        // They need to be fixed(or we at least need to make it so Transaction conforms to EncodedTransaction)."
        const tx = algosdk_1.default.decodeSignedTransaction(buffer);
        const signers = [];
        const signedBy = [];
        if (tx.msig && tx.msig.subsig) {
            for (const sig of tx.msig.subsig) {
                const addr = algosdk_1.default.encodeAddress(sig.pk);
                signers.push(addr);
                if (sig.s) {
                    signedBy.push(addr);
                }
            }
        }
        return {
            rawTransaction: new Uint8Array(buffer),
            txn: tx.txn,
            signed: true,
            signers: signers,
            signedBy: signedBy,
        };
    }
    /**
     * Try to decode an unsigned Algo transaction
     * @param buffer the encoded transaction
     * @returns {EncodedTx} the decoded unsigned transaction
     * @throws error if it is not a valid encoded unsigned transaction
     */
    tryToDecodeUnsignedTransaction(buffer) {
        const txn = algosdk_1.default.decodeUnsignedTransaction(buffer);
        return {
            rawTransaction: new Uint8Array(buffer),
            txn,
            signed: false,
        };
    }
    /*
     * encodeObj takes a javascript object and returns its msgpack encoding
     * Note that the encoding sorts the fields alphabetically
     *
     * @param {Record<string | number | symbol, any>} obj js obj
     * @returns {Uint8Array} Uint8Array binary representation
     */
    encodeObj(obj) {
        return algosdk_1.default.encodeObj(obj);
    }
    /**
     * decodeObj takes a Uint8Array and returns its javascript obj
     * @param o - Uint8Array to decode
     * @returns object
     */
    decodeObj(o) {
        return algosdk_1.default.decodeObj(o);
    }
    /**
     * secretKeyToMnemonic takes an Algorant secret key and returns the corresponding mnemonic
     *
     * @param sk - Algorant secret key
     * @return Secret key is associated mnemonic
     */
    secretKeyToMnemonic(sk) {
        const skValid = Buffer.from(sk.toString('hex'));
        if (!this.isValidPrivateKey(skValid.toString('hex'))) {
            throw new sdk_core_1.InvalidKey(`The secret key: ${sk.toString('hex')} is invalid`);
        }
        const skUnit8Array = Buffer.from(sk);
        return algosdk_1.default.secretKeyToMnemonic(skUnit8Array);
    }
    /**
     * seedFromMnemonic converts a mnemonic generated using this library into the source key used to create it
     * It returns an error if the passed mnemonic has an incorrect checksum, if the number of words is unexpected, or if one
     * of the passed words is not found in the words list
     *
     * @param mnemonic - 25 words mnemonic
     * @returns 32 bytes long seed
     */
    seedFromMnemonic(mnemonic) {
        return algosdk_1.default.mnemonicToMasterDerivationKey(mnemonic);
    }
    /**
     * keyPairFromSeed generates an object with secretKey and publicKey using the algosdk
     * @param seed 32 bytes long seed
     * @returns KeyPair
     */
    keyPairFromSeed(seed) {
        const mn = this.mnemonicFromSeed(seed);
        const base64PrivateKey = algosdk_1.default.mnemonicToSecretKey(mn).sk;
        return this.createKeyPair(base64PrivateKey);
    }
    /**
     * Generate a new `KeyPair` object from the given private key.
     *
     * @param base64PrivateKey 64 bytes long privateKey
     * @returns KeyPair
     */
    createKeyPair(base64PrivateKey) {
        const sk = base64PrivateKey.slice(0, 32);
        return new keyPair_1.KeyPair({ prv: Buffer.from(sk).toString('hex') });
    }
    /**
     * decodePrivateKey generates a seed with a mnemonic and using algosdk.
     *
     * @param seed 32 bytes long seed
     * @returns mnemonic - 25 words mnemonic - 25 words mnemonic
     */
    mnemonicFromSeed(seed) {
        return algosdk_1.default.masterDerivationKeyToMnemonic(seed);
    }
    /**
     * Validates the key with the stellar-sdk
     *
     * @param publicKey
     * @returns boolean
     */
    isValidEd25519PublicKeyStellar(publicKey) {
        return stellar_sdk_1.default.StrKey.isValidEd25519PublicKey(publicKey);
    }
    /**
     * Decodes the key with the stellar-sdk
     *
     * @param publicKey
     * @returns Buffer
     */
    decodeEd25519PublicKeyStellar(publicKey) {
        return stellar_sdk_1.default.StrKey.decodeEd25519PublicKey(publicKey);
    }
    /**
     * Convert a stellar seed to algorand encoding
     *
     * @param seed
     * @returns string the encoded seed
     */
    convertFromStellarSeed(seed) {
        return seedEncoding_1.SeedEncoding.encode(stellar_sdk_1.default.StrKey.decodeEd25519SecretSeed(seed));
    }
    /**
     * Returns an address encoded with algosdk
     *
     * @param addr
     * @returns string
     */
    encodeAddress(addr) {
        return algosdk_1.default.encodeAddress(addr);
    }
    /**
     * Return an address decoded with algosdk
     *
     * @param addr
     * @returns Address
     */
    decodeAddress(addr) {
        return algosdk_1.default.decodeAddress(addr);
    }
    /**
     * Converts an address into an ALGO one
     * If the given data is a Stellar address or public key, it is converted to ALGO address.
     *
     * @param addressOrPubKey an ALGO address, or an Stellar address or public key
     * @returns address algo address string
     */
    stellarAddressToAlgoAddress(addressOrPubKey) {
        // we have an Algorand address
        if (this.isValidAddress(addressOrPubKey)) {
            return addressOrPubKey;
        }
        // we have a stellar key
        if (this.isValidEd25519PublicKeyStellar(addressOrPubKey)) {
            const stellarPub = this.decodeEd25519PublicKeyStellar(addressOrPubKey);
            const algoAddress = this.encodeAddress(stellarPub);
            if (this.isValidAddress(algoAddress)) {
                return algoAddress;
            }
            throw new Error('Cannot convert Stellar address to an Algorand address via pubkey.');
        }
        throw new Error('Neither an Algorand address nor a stellar pubkey.');
    }
    /**
     * multisigAddress takes multisig metadata (preimage) and returns the corresponding human readable Algorand address.
     *
     * @param {number} version mutlisig version
     * @param {number} threshold multisig threshold
     * @param {string[]} addrs list of Algorand addresses
     * @returns {string} human readable Algorand address.
     */
    multisigAddress(version, threshold, addrs) {
        return algosdk_1.default.multisigAddress({
            version,
            threshold,
            addrs,
        });
    }
    /**
     * generateAccount generates un account with a secretKey and an address
     *
     * Function has not params
     * @returns Account
     */
    generateAccount() {
        return algosdk_1.default.generateAccount();
    }
    generateAccountFromSeed(seed) {
        const keys = nacl.sign.keyPair.fromSeed(seed);
        return {
            addr: algosdk_1.default.encodeAddress(keys.publicKey),
            sk: keys.secretKey,
        };
    }
    /**
     * Generates Tx ID from an encoded multisig transaction
     *
     * This is done because of a change made on version 1.10.1 on algosdk so method txID() only supports SignedTransaction type.
     * (https://github.com/algorand/js-algorand-sdk/blob/develop/CHANGELOG.md#1101)
     *
     * @param {string} txBase64 - encoded base64 multisig transaction
     * @returns {string} - transaction ID
     */
    getMultisigTxID(txBase64) {
        const txBytes = Buffer.from(txBase64, 'base64');
        const decodeSignTx = algosdk_1.default.decodeSignedTransaction(txBytes);
        const wellFormedDecodedSignTx = decodeSignTx.txn.get_obj_for_encoding();
        const txForEncoding = { msig: decodeSignTx.msig, txn: wellFormedDecodedSignTx };
        const en_msg = encoding.encode(txForEncoding);
        const tag = Buffer.from([84, 88]);
        const gh = Buffer.from(concatArrays(tag, en_msg));
        const hash = Buffer.from(algoNacl.genericHash(gh));
        return hi_base32_1.default.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);
    }
    /**
     * Determines if a given transaction data is to enable or disable a token
     * @param amount the amount in transaction
     * @param from the originated address
     * @param to the target address
     * @param closeRemainderTo (optional) address to send remaining units in originated address
     * @returns 'enableToken' or 'disableToken'
     */
    getTokenTxType(amount, from, to, closeRemainderTo) {
        let type = 'transferToken';
        if (amount === '0' && from === to) {
            type = !closeRemainderTo ? 'enableToken' : 'disableToken';
        }
        return type;
    }
    /**
     * Validate if the key is a valid base64 string
     * @param key the key to validate
     */
    validateBase64(key) {
        if (!key || typeof key !== 'string') {
            throw new Error('Invalid base64 string');
        }
        const base64RegExp = /^(?:[a-zA-Z0-9+\/]{4})*(?:|(?:[a-zA-Z0-9+\/]{3}=)|(?:[a-zA-Z0-9+\/]{2}==)|(?:[a-zA-Z0-9+\/]{1}===))$/;
        if (!base64RegExp.test(key)) {
            throw new Error('Invalid base64 string');
        }
    }
}
exports.Utils = Utils;
const utils = new Utils();
exports.default = utils;
//# sourceMappingURL=data:application/json;base64,