"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetTransferBuilder = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const sdk_core_1 = require("@bitgo/sdk-core");
const transferBuilder_1 = require("./transferBuilder");
const txnSchema_1 = require("./txnSchema");
const utils_1 = __importDefault(require("./utils"));
class AssetTransferBuilder extends transferBuilder_1.TransferBuilder {
    constructor(coinConfig) {
        super(coinConfig);
    }
    /**
     * Sets the token id.
     *
     * The token id uniquely identifies the asset.
     *
     * @param {number} id The token id.
     * @returns {AssetTransferBuilder} This transaction builder.
     *
     * @see https://developer.algorand.org/docs/reference/transactions/#asset-transfer-transaction
     */
    tokenId(id) {
        if (id <= 0) {
            throw new Error('Asset index must be a uint64 value');
        }
        this._tokenId = id;
        return this;
    }
    /**
     * Sets the parameters of the transaction builder to allowlist an asset.
     *
     * To allow list an asset, you send 0 units of the asset to yourself.
     *
     * This method sets the tokenId, sender, receiver, asset amount, and
     * fee parameters to their respective values to allowlist and asset.
     *
     * @param {number} tokenId The unique identifier of the asset.
     * @param {BaseAddress} userAddress The address of the user.
     * @returns {AssetTransferBuilder} This transaction builder.
     */
    allowListAsset(tokenId, userAddress) {
        this.tokenId(tokenId);
        this.sender(userAddress);
        this.to(userAddress);
        this.isFlatFee(true);
        this.fee({ fee: '1000' });
        this.amount(0);
        return this;
    }
    buildAlgoTxn() {
        return algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(this._sender, this._to, this._closeRemainderTo, undefined, this._amount, this._note, this._tokenId, this.suggestedParams, this._reKeyTo);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Send;
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = super.fromImplementation(rawTransaction);
        const algoTx = tx.getAlgoTransaction();
        if (!algoTx) {
            throw new sdk_core_1.InvalidTransactionError('Transaction is empty');
        }
        this._tokenId = algoTx.assetIndex;
        this._amount = algoTx.amount || 0;
        this._to = algosdk_1.default.encodeAddress(algoTx.to.publicKey);
        return tx;
    }
    validateRawTransaction(rawTransaction) {
        const { txn: algoTxn } = utils_1.default.decodeAlgoTxn(rawTransaction);
        if (algoTxn.type !== algosdk_1.default.TransactionType.axfer) {
            throw new sdk_core_1.InvalidTransactionError(`Invalid Transaction Type: ${algoTxn.type}. Expected ${algosdk_1.default.TransactionType.axfer}`);
        }
        this.validateFields(algoTxn.assetIndex, algoTxn.amount, algosdk_1.default.encodeAddress(algoTxn.to.publicKey));
    }
    /** @inheritdoc */
    validateTransaction(txn) {
        super.validateTransaction(txn);
        this.validateFields(this._tokenId, this._amount, this._to);
    }
    validateFields(tokenId, assetAmount, receiver) {
        let validationResult;
        if (this._sender !== this._to) {
            validationResult = txnSchema_1.AssetTransferTxnSchema.validate({
                tokenId,
                assetAmount,
                receiver,
            });
        }
        else {
            validationResult = txnSchema_1.AssetToggleTxnSchema.validate({
                tokenId,
                receiver,
            });
        }
        if (validationResult.error) {
            throw new sdk_core_1.InvalidTransactionError(`Transaction validation failed: ${validationResult.error.message}`);
        }
    }
}
exports.AssetTransferBuilder = AssetTransferBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRUcmFuc2ZlckJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Fzc2V0VHJhbnNmZXJCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLHNEQUE4QjtBQUM5Qiw4Q0FBd0Y7QUFDeEYsdURBQW9EO0FBRXBELDJDQUEyRTtBQUMzRSxvREFBNEI7QUFFNUIsTUFBYSxvQkFBcUIsU0FBUSxpQ0FBZTtJQUd2RCxZQUFZLFVBQWdDO1FBQzFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsT0FBTyxDQUFDLEVBQVU7UUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSCxjQUFjLENBQUMsT0FBZSxFQUFFLFdBQXdCO1FBQ3RELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFUyxZQUFZO1FBQ3BCLE9BQU8saUJBQU8sQ0FBQyx1Q0FBdUMsQ0FDcEQsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsU0FBUyxFQUNULElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLEtBQUssRUFDVixJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFjLGVBQWU7UUFDM0IsT0FBTywwQkFBZSxDQUFDLElBQUksQ0FBQztJQUM5QixDQUFDO0lBRUQsa0JBQWtCO0lBQ1Isa0JBQWtCLENBQUMsY0FBbUM7UUFDOUQsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLElBQUksa0NBQXVCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUMzRDtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxHQUFHLEdBQUcsaUJBQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV0RCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxjQUFtQztRQUN4RCxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLGVBQUssQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0QsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLGlCQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRTtZQUNsRCxNQUFNLElBQUksa0NBQXVCLENBQy9CLDZCQUE2QixPQUFPLENBQUMsSUFBSSxjQUFjLGlCQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUN2RixDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxpQkFBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDdkcsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixtQkFBbUIsQ0FBQyxHQUFnQjtRQUNsQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFUyxjQUFjLENBQUMsT0FBZSxFQUFFLFdBQTRCLEVBQUUsUUFBZ0I7UUFDdEYsSUFBSSxnQkFBZ0IsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUM3QixnQkFBZ0IsR0FBRyxrQ0FBc0IsQ0FBQyxRQUFRLENBQUM7Z0JBQ2pELE9BQU87Z0JBQ1AsV0FBVztnQkFDWCxRQUFRO2FBQ1QsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLGdCQUFnQixHQUFHLGdDQUFvQixDQUFDLFFBQVEsQ0FBQztnQkFDL0MsT0FBTztnQkFDUCxRQUFRO2FBQ1QsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLGdCQUFnQixDQUFDLEtBQUssRUFBRTtZQUMxQixNQUFNLElBQUksa0NBQXVCLENBQUMsa0NBQWtDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZHO0lBQ0gsQ0FBQztDQUNGO0FBdEhELG9EQXNIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDb2luIGFzIENvaW5Db25maWcgfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5pbXBvcnQgYWxnb3NkayBmcm9tICdhbGdvc2RrJztcbmltcG9ydCB7IEJhc2VBZGRyZXNzLCBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvciwgVHJhbnNhY3Rpb25UeXBlIH0gZnJvbSAnQGJpdGdvL3Nkay1jb3JlJztcbmltcG9ydCB7IFRyYW5zZmVyQnVpbGRlciB9IGZyb20gJy4vdHJhbnNmZXJCdWlsZGVyJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBBc3NldFRyYW5zZmVyVHhuU2NoZW1hLCBBc3NldFRvZ2dsZVR4blNjaGVtYSB9IGZyb20gJy4vdHhuU2NoZW1hJztcbmltcG9ydCBVdGlscyBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIEFzc2V0VHJhbnNmZXJCdWlsZGVyIGV4dGVuZHMgVHJhbnNmZXJCdWlsZGVyIHtcbiAgcHJpdmF0ZSBfdG9rZW5JZDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGNvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+KSB7XG4gICAgc3VwZXIoY29pbkNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdG9rZW4gaWQuXG4gICAqXG4gICAqIFRoZSB0b2tlbiBpZCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBhc3NldC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIFRoZSB0b2tlbiBpZC5cbiAgICogQHJldHVybnMge0Fzc2V0VHJhbnNmZXJCdWlsZGVyfSBUaGlzIHRyYW5zYWN0aW9uIGJ1aWxkZXIuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVmZXJlbmNlL3RyYW5zYWN0aW9ucy8jYXNzZXQtdHJhbnNmZXItdHJhbnNhY3Rpb25cbiAgICovXG4gIHRva2VuSWQoaWQ6IG51bWJlcik6IHRoaXMge1xuICAgIGlmIChpZCA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fzc2V0IGluZGV4IG11c3QgYmUgYSB1aW50NjQgdmFsdWUnKTtcbiAgICB9XG4gICAgdGhpcy5fdG9rZW5JZCA9IGlkO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcGFyYW1ldGVycyBvZiB0aGUgdHJhbnNhY3Rpb24gYnVpbGRlciB0byBhbGxvd2xpc3QgYW4gYXNzZXQuXG4gICAqXG4gICAqIFRvIGFsbG93IGxpc3QgYW4gYXNzZXQsIHlvdSBzZW5kIDAgdW5pdHMgb2YgdGhlIGFzc2V0IHRvIHlvdXJzZWxmLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZXRzIHRoZSB0b2tlbklkLCBzZW5kZXIsIHJlY2VpdmVyLCBhc3NldCBhbW91bnQsIGFuZFxuICAgKiBmZWUgcGFyYW1ldGVycyB0byB0aGVpciByZXNwZWN0aXZlIHZhbHVlcyB0byBhbGxvd2xpc3QgYW5kIGFzc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9rZW5JZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGFzc2V0LlxuICAgKiBAcGFyYW0ge0Jhc2VBZGRyZXNzfSB1c2VyQWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgdXNlci5cbiAgICogQHJldHVybnMge0Fzc2V0VHJhbnNmZXJCdWlsZGVyfSBUaGlzIHRyYW5zYWN0aW9uIGJ1aWxkZXIuXG4gICAqL1xuICBhbGxvd0xpc3RBc3NldCh0b2tlbklkOiBudW1iZXIsIHVzZXJBZGRyZXNzOiBCYXNlQWRkcmVzcyk6IHRoaXMge1xuICAgIHRoaXMudG9rZW5JZCh0b2tlbklkKTtcbiAgICB0aGlzLnNlbmRlcih1c2VyQWRkcmVzcyk7XG4gICAgdGhpcy50byh1c2VyQWRkcmVzcyk7XG4gICAgdGhpcy5pc0ZsYXRGZWUodHJ1ZSk7XG4gICAgdGhpcy5mZWUoeyBmZWU6ICcxMDAwJyB9KTtcbiAgICB0aGlzLmFtb3VudCgwKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJvdGVjdGVkIGJ1aWxkQWxnb1R4bigpOiBhbGdvc2RrLlRyYW5zYWN0aW9uIHtcbiAgICByZXR1cm4gYWxnb3Nkay5tYWtlQXNzZXRUcmFuc2ZlclR4bldpdGhTdWdnZXN0ZWRQYXJhbXMoXG4gICAgICB0aGlzLl9zZW5kZXIsXG4gICAgICB0aGlzLl90byxcbiAgICAgIHRoaXMuX2Nsb3NlUmVtYWluZGVyVG8sXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0aGlzLl9hbW91bnQsXG4gICAgICB0aGlzLl9ub3RlLFxuICAgICAgdGhpcy5fdG9rZW5JZCxcbiAgICAgIHRoaXMuc3VnZ2VzdGVkUGFyYW1zLFxuICAgICAgdGhpcy5fcmVLZXlUb1xuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IHRyYW5zYWN0aW9uVHlwZSgpOiBUcmFuc2FjdGlvblR5cGUge1xuICAgIHJldHVybiBUcmFuc2FjdGlvblR5cGUuU2VuZDtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBwcm90ZWN0ZWQgZnJvbUltcGxlbWVudGF0aW9uKHJhd1RyYW5zYWN0aW9uOiBVaW50OEFycmF5IHwgc3RyaW5nKTogVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0IHR4ID0gc3VwZXIuZnJvbUltcGxlbWVudGF0aW9uKHJhd1RyYW5zYWN0aW9uKTtcbiAgICBjb25zdCBhbGdvVHggPSB0eC5nZXRBbGdvVHJhbnNhY3Rpb24oKTtcbiAgICBpZiAoIWFsZ29UeCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRUcmFuc2FjdGlvbkVycm9yKCdUcmFuc2FjdGlvbiBpcyBlbXB0eScpO1xuICAgIH1cblxuICAgIHRoaXMuX3Rva2VuSWQgPSBhbGdvVHguYXNzZXRJbmRleDtcbiAgICB0aGlzLl9hbW91bnQgPSBhbGdvVHguYW1vdW50IHx8IDA7XG4gICAgdGhpcy5fdG8gPSBhbGdvc2RrLmVuY29kZUFkZHJlc3MoYWxnb1R4LnRvLnB1YmxpY0tleSk7XG5cbiAgICByZXR1cm4gdHg7XG4gIH1cblxuICB2YWxpZGF0ZVJhd1RyYW5zYWN0aW9uKHJhd1RyYW5zYWN0aW9uOiBVaW50OEFycmF5IHwgc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgeyB0eG46IGFsZ29UeG4gfSA9IFV0aWxzLmRlY29kZUFsZ29UeG4ocmF3VHJhbnNhY3Rpb24pO1xuICAgIGlmIChhbGdvVHhuLnR5cGUgIT09IGFsZ29zZGsuVHJhbnNhY3Rpb25UeXBlLmF4ZmVyKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFRyYW5zYWN0aW9uRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIFRyYW5zYWN0aW9uIFR5cGU6ICR7YWxnb1R4bi50eXBlfS4gRXhwZWN0ZWQgJHthbGdvc2RrLlRyYW5zYWN0aW9uVHlwZS5heGZlcn1gXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMudmFsaWRhdGVGaWVsZHMoYWxnb1R4bi5hc3NldEluZGV4LCBhbGdvVHhuLmFtb3VudCwgYWxnb3Nkay5lbmNvZGVBZGRyZXNzKGFsZ29UeG4udG8ucHVibGljS2V5KSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgdmFsaWRhdGVUcmFuc2FjdGlvbih0eG46IFRyYW5zYWN0aW9uKTogdm9pZCB7XG4gICAgc3VwZXIudmFsaWRhdGVUcmFuc2FjdGlvbih0eG4pO1xuICAgIHRoaXMudmFsaWRhdGVGaWVsZHModGhpcy5fdG9rZW5JZCwgdGhpcy5fYW1vdW50LCB0aGlzLl90byk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVGaWVsZHModG9rZW5JZDogbnVtYmVyLCBhc3NldEFtb3VudDogbnVtYmVyIHwgYmlnaW50LCByZWNlaXZlcjogc3RyaW5nKTogdm9pZCB7XG4gICAgbGV0IHZhbGlkYXRpb25SZXN1bHQ7XG4gICAgaWYgKHRoaXMuX3NlbmRlciAhPT0gdGhpcy5fdG8pIHtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQgPSBBc3NldFRyYW5zZmVyVHhuU2NoZW1hLnZhbGlkYXRlKHtcbiAgICAgICAgdG9rZW5JZCxcbiAgICAgICAgYXNzZXRBbW91bnQsXG4gICAgICAgIHJlY2VpdmVyLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbGlkYXRpb25SZXN1bHQgPSBBc3NldFRvZ2dsZVR4blNjaGVtYS52YWxpZGF0ZSh7XG4gICAgICAgIHRva2VuSWQsXG4gICAgICAgIHJlY2VpdmVyLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbGlkYXRpb25SZXN1bHQuZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkVHJhbnNhY3Rpb25FcnJvcihgVHJhbnNhY3Rpb24gdmFsaWRhdGlvbiBmYWlsZWQ6ICR7dmFsaWRhdGlvblJlc3VsdC5lcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxufVxuIl19